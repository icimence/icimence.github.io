<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据科学基础大作业</title>
      <link href="/2022/01/09/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/01/09/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>由于数据科学的学习需要就要完成一个数据分析的任务，所以我们按照老师的要求写了这篇文章，文章贡献者<code>Chaos</code>。</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>学生编程能力分析</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li><p><del>满足陈老师日常突然发疯的特殊需求</del></p></li><li><p>大数据时代背景环境下的科学分析技术</p></li><li>多维衡量学生编程能力的需求涌现</li><li>数据科学基础课程提供相关知识能力</li></ul><h2 id="学生编程能力分析角度"><a href="#学生编程能力分析角度" class="headerlink" title="学生编程能力分析角度"></a>学生编程能力分析角度</h2><p>定义：<strong>n值</strong> 单项中对应集体能力的平均数、中位数、众数、峰度、偏度衡量标准中视情况而判定的更为合理一项（具体有待后期考证）</p><p>（如若文件中对应n值难以计算，会采用预先计算设定得的n值以减少资源消耗）</p><ul><li><p>提交数据相关</p><p>定义：<strong>分时值</strong> 定义个人对应单题</p><p><em>（最后一次提交成绩 - 第一次提交成绩）</em> <em> </em>中途花费的时间*</p><p>定义：<strong>分次比</strong> 定义个人对应单题</p><p><em>（最后一次提交成绩 - 第一次提交成绩）/ 提交次数</em></p><ul><li>基础编程能力<ul><li>衡量标准：个人第一次提交获得分数与 <em>n值</em> 比较</li></ul></li><li>debug能力<ul><li>衡量标准：分时比低、分次比高，获得对应评分越高</li></ul></li><li>编程稳定性：<ul><li>衡量标准：总体题目的得分的峰度与<em>n值</em>比较</li></ul></li></ul></li><li><p>代码能力相关</p><ul><li>可维护性（兼容可读性/规范性）：<ul><li>衡量标准：命名规范、结构空行完整，对应部分注释完善</li></ul></li><li>多样性：<ul><li>衡量标准：代码实现的方式多样性，重复度低 <del>ctrl-c、ctrl-v情况少</del></li></ul></li><li>安全性：<ul><li>衡量标准：类的封装处理 <del>什么？没有类？那就直接给个100吧</del></li></ul></li><li>衡量方式：尝试数值化计量对应能力并于n值比较</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataSciense </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（转载）WechatApp技术笔记之列表下拉（四）</title>
      <link href="/2022/01/09/WechatApp%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%97%E8%A1%A8%E4%B8%8B%E6%8B%89%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2022/01/09/WechatApp%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%97%E8%A1%A8%E4%B8%8B%E6%8B%89%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;上一章我们从页面的实战开发角度讲解了前端代码编写的一些技巧，本章我们继续探讨小程序前端页面开发的技巧与应避开的大坑。（是的，我踩了一个很大的坑，到现在才发现）<a href="http://nandodu.cn/2020/04/26/wechat4/">转载自<code>NanDoDu</code>的博客。</a></p><h2 id="（划重点！划重点！划重点！）view-布局"><a href="#（划重点！划重点！划重点！）view-布局" class="headerlink" title="（划重点！划重点！划重点！）view 布局"></a><strong>（划重点！划重点！划重点！）view 布局</strong></h2><p>&emsp;&emsp;说真的，对于初学者来说，view布局这一块在网上查来查去就是弹性盒子、flex、弹性盒子、flex……反复横跳，我昨天查了一晚上怎么让文字在图片的右侧靠右显示（前提是文字在图片上方），答案无一不是float、right、float、right……反复横跳。那么我就从实际应用的角度来介绍两个常用的view布局。</p><h3 id="弹性盒子布局"><a href="#弹性盒子布局" class="headerlink" title="弹性盒子布局"></a>弹性盒子布局</h3><p>&emsp;&emsp;因网上关于这个的资料太多，此处只说优点和缺点。</p><p>&emsp;&emsp;优点：</p><ul><li><p>简单方便，快速对齐，快速布局</p></li><li><p>网上资料多，可借鉴代码多</p></li></ul><p>&emsp;&emsp;缺点：</p><ul><li><p>灵活性太差，尤其是对初学者而言（比如我）</p></li><li><p>margin调整位置受前一个view的影响</p></li><li><p>很难做到横向对齐的同时纵向对齐（即，很难做到横向弹性盒子和纵向弹性盒子同时设置）</p></li></ul><h3 id="自由布局"><a href="#自由布局" class="headerlink" title="自由布局"></a>自由布局</h3><p>&emsp;&emsp;对外层view不声明flex，内层位置的调节只靠margin-top和margin-left，小程序对右对齐的适配性极差（个人观点），因此能以左边框为基准就不以右边框为基准。</p><h2 id="实现qq列表下拉功能代码模板"><a href="#实现qq列表下拉功能代码模板" class="headerlink" title="实现qq列表下拉功能代码模板"></a><strong>实现qq列表下拉功能代码模板</strong></h2><p>&emsp;&emsp;多层嵌套渲染列表与列表展开/收起的应用，类似开发可直接借鉴下述模板。</p><p>&emsp;&emsp;.wxml文件代码模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">&#x27;pagename&#x27;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  // 下拉条列表渲染逻辑（第一层列表）</span><br><span class="line">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for-items</span> = <span class="string">&quot;&#123;&#123;missionInfoData&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">&quot;bar&quot;</span> <span class="attr">bindtap</span> = <span class="string">&#x27;toggleBtn&#x27;</span> <span class="attr">id</span>=<span class="string">&quot;&#123;&#123;item.id&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span> = <span class="string">&#x27;barimage &#123;&#123;item.id &gt; 0?&quot;&quot;:&quot;hidden&quot;&#125;&#125;&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;&#123;&#123;item.imgurl&#125;&#125;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span> = <span class="string">&#x27;barimage &#123;&#123;item.id &gt; 0?&quot;hidden&quot;:&quot;&quot;&#125;&#125;&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;&#123;&#123;item.imgurl1&#125;&#125;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">&#x27;barinfo&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">&#x27;barname&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.barname&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">&#x27;barnum&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.barnum&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span>&gt;</span>/<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.barNum&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    //下拉内容列表渲染逻辑（第二层列表）</span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for-items</span> = <span class="string">&quot;&#123;&#123;item.content&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span> = <span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">&quot;mission &#123;&#123;item.id &gt; 0?&#x27;hidden&#x27;:&#x27;&#x27;&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">&#x27;timeimageview&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span> = <span class="string">&#x27;timeimage&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;/icons/resttime.png&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">&#x27;timetextview&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span> = <span class="string">&#x27;timetextnum&#x27;</span>&gt;</span>&#123;&#123;content.day&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span>&gt;</span>天<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">&#x27;missionnameview&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">&#x27;missionnameview1&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;content.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">&#x27;missionnameview2&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;content.type&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">&#x27;stateview&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span> = <span class="string">&#x27;stateimage&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;&#123;&#123;content.statecolor&#125;&#125;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;.js文件代码模板:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">missionInfoData</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">      <span class="string">&quot;datas&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="string">&quot;imgurl&quot;</span>: <span class="string">&quot;/images/ingbar.png&quot;</span>,</span><br><span class="line">          <span class="string">&quot;imgurl1&quot;</span>: <span class="string">&quot;/images/ingbar1.png&quot;</span>,</span><br><span class="line">          <span class="string">&quot;barname&quot;</span>: <span class="string">&quot;在读图书&quot;</span>,</span><br><span class="line">          <span class="string">&quot;barnum&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="string">&quot;barNum&quot;</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="string">&quot;content&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">day</span>: <span class="number">20</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&quot;小程序入门&quot;</span>,</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&quot;计算机&quot;</span>,</span><br><span class="line">              <span class="attr">statecolor</span>: <span class="string">&quot;/icons/lamp.png&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">day</span>: <span class="number">10</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&quot;小程序实战&quot;</span>,</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&quot;计算机&quot;</span>,</span><br><span class="line">              <span class="attr">statecolor</span>: <span class="string">&quot;/icons/lamp.png&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">day</span>: <span class="number">30</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&quot;资本论&quot;</span>,</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&quot;经济学&quot;</span>,</span><br><span class="line">              <span class="attr">statecolor</span>: <span class="string">&quot;/icons/lamp1.png&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="string">&quot;imgurl&quot;</span>: <span class="string">&quot;/images/ingbar.png&quot;</span>,</span><br><span class="line">          <span class="string">&quot;imgurl1&quot;</span>: <span class="string">&quot;/images/ingbar1.png&quot;</span>,</span><br><span class="line">          <span class="string">&quot;barname&quot;</span>: <span class="string">&quot;在阅资源&quot;</span>,</span><br><span class="line">          <span class="string">&quot;barnum&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="string">&quot;barNum&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="string">&quot;content&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">day</span>: <span class="number">15</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&quot;概率论.pdf&quot;</span>,</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&quot;数学&quot;</span>,</span><br><span class="line">              <span class="attr">statecolor</span>: <span class="string">&quot;/icons/lamp.png&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">day</span>: <span class="number">20</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&quot;计算机网络.pdf&quot;</span>,</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&quot;计算机&quot;</span>,</span><br><span class="line">              <span class="attr">statecolor</span>: <span class="string">&quot;/icons/lamp.png&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="string">&quot;imgurl&quot;</span>: <span class="string">&quot;/images/ingbar.png&quot;</span>,</span><br><span class="line">          <span class="string">&quot;imgurl1&quot;</span>: <span class="string">&quot;/images/ingbar1.png&quot;</span>,</span><br><span class="line">          <span class="string">&quot;barname&quot;</span>: <span class="string">&quot;当前竞赛&quot;</span>,</span><br><span class="line">          <span class="string">&quot;barnum&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="string">&quot;barNum&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="string">&quot;content&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">day</span>: <span class="number">35</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&quot;高校小程序开发大赛&quot;</span>,</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&quot;应用比赛&quot;</span>,</span><br><span class="line">              <span class="attr">statecolor</span>: <span class="string">&quot;/icons/lamp.png&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      <span class="attr">missionInfoData</span>: data.datas</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 实现各列表展开独立进行，也可设置全局变量实现唯一列表展开</span></span><br><span class="line">  <span class="attr">toggleBtn</span>: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> itemId = event.currentTarget.id;</span><br><span class="line">    <span class="keyword">if</span>(itemId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      itemId = -itemId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不这样处理的话会报错</span></span><br><span class="line">    <span class="keyword">var</span> up = <span class="string">&quot;missionInfoData[&quot;</span> + (itemId - <span class="number">1</span>) + <span class="string">&quot;].id&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> resId = -event.currentTarget.id;</span><br><span class="line">    that.setData (&#123;</span><br><span class="line">      [up]: resId</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;.wxss文件代码模板：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.topInfo</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.topImage1</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.topImage2</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">630</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.barimage</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.barname</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">70</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">78</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.barinfo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.barnum</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">margin-left</span>:<span class="number">675</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mission</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: whitesmoke;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.missionnameview</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">230</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">120</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.missionnameview1</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.missionnameview2</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.timeimageview</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.timeimage</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80</span>rpx;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.timetextview</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.stateview</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">683</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.stateimage</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 显示/隐藏属性</span><br><span class="line"><span class="selector-class">.hidden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP中的istringstream用法解析</title>
      <link href="/2022/01/09/CPP%E4%B8%AD%E7%9A%84istringstream%E7%94%A8%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
      <url>/2022/01/09/CPP%E4%B8%AD%E7%9A%84istringstream%E7%94%A8%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp;&emsp;因为在日常的学习过程中经常会发现CPP要处理一些带有空格的输入，并且学要以习性读取后进行拆分，甚至有可能出现空格前后的数据格式不同的情况，所以就把最好用的一个模块放在这里进行一下介绍。</p><h2 id="使用介绍"><a href="#使用介绍" class="headerlink" title="使用介绍"></a>使用介绍</h2><p>个人十分推荐使用<code>sstream</code>头文件中带有的<code>istringstream</code>。这个可以较为方便得使用。先说明它只能处理带有空格的一行的字符串，并且在输出时可以根据输出的对象自动转变类型，所以是非常好用的。原理不是很好介绍，到时候有时间再把这一块补上。下面就是直接看代码领悟一下就可以了。</p><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><p>这里提供两段代码分别是两个使用方式，都可以进行使用，请根据情况自行选择。事先说明，请在程序的开头使用<code>#include&lt;sstream&gt;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(cin, temp)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (temp.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="function">istringstream <span class="title">ss</span><span class="params">(temp)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> temp_num;</span><br><span class="line">    <span class="keyword">while</span> (ss &gt;&gt; temp_num) &#123;</span><br><span class="line">        Product_info.<span class="built_in">push_back</span>(temp_num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是另一段代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Bank bank;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">string input;</span><br><span class="line">string method, name;</span><br><span class="line"><span class="keyword">int</span> id, type;</span><br><span class="line"><span class="keyword">double</span> money;</span><br><span class="line"><span class="built_in">getline</span>(cin, input);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">strcmp</span>(input.<span class="built_in">c_str</span>(), <span class="string">&quot;end&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="function">istringstream <span class="title">ss</span><span class="params">(input)</span></span>;</span><br><span class="line">    ss &gt;&gt; method;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(method.<span class="built_in">c_str</span>(), <span class="string">&quot;createAccount&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        ss &gt;&gt; type;</span><br><span class="line">        bank.<span class="built_in">CreateAccount</span>(type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(method.<span class="built_in">c_str</span>(), <span class="string">&quot;createCustomer&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        ss &gt;&gt; name;</span><br><span class="line">        bank.<span class="built_in">CreateCustomer</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(method.<span class="built_in">c_str</span>(), <span class="string">&quot;addToCustomer&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        ss &gt;&gt; id&gt;&gt;name;</span><br><span class="line">        bank.<span class="built_in">AddToCustomer</span>(id,name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(method.<span class="built_in">c_str</span>(), <span class="string">&quot;accountDeposit&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        ss &gt;&gt; id&gt;&gt;money;</span><br><span class="line">        bank.<span class="built_in">AccountDeposit</span>(id,money);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(method.<span class="built_in">c_str</span>(), <span class="string">&quot;accountWithdraw&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        ss &gt;&gt; id &gt;&gt;money;</span><br><span class="line">        bank.<span class="built_in">AccountWithdraw</span>(id,money);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>第二段代码是一种比较灵活的运用方式，到时候再加吧，最近时间实在是有点紧张。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向服务复习提纲</title>
      <link href="/2021/04/26/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/"/>
      <url>/2021/04/26/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="一些概念："><a href="#一些概念：" class="headerlink" title="一些概念："></a>一些概念：</h2><ol><li>Web服务是实现SOA的核心技术，但SOA并不等同于Web服务。Web服务是一套技术体系，可以用来构建应用解决方案，解决特定的消息通信和应用集成问题。而SOA 是一种软件架构，不局限于某种技术组合（如Web服务），它超越技术范畴，甚至可以用来组织公司。</li><li>企业服务总线（ESB）是SOA基础架构（basic frastruct）的关键组件，是一种消息代理架构，管理消息通信、服务交互等等。</li><li>WSDL：Web服务描述语言，基于XML，但它才是Web服务的核心。因为它描述Web 服务提供的操作（服务能力）以及这些操作接收和返回的参数。WSDL包含的信息： 服务做什么，应该如何使用它们，它们在哪里。也就是说提供者和调用者都需要参考WSDL，从这个意义上来说WSDL是核心。</li></ol><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><h3 id="一、为何需要构建服务生态系统？什么是服务生态系统中的垂直服务和水平服务？它们有何联系和区别？试举例加以说明"><a href="#一、为何需要构建服务生态系统？什么是服务生态系统中的垂直服务和水平服务？它们有何联系和区别？试举例加以说明" class="headerlink" title="一、为何需要构建服务生态系统？什么是服务生态系统中的垂直服务和水平服务？它们有何联系和区别？试举例加以说明"></a>一、为何需要构建服务生态系统？什么是服务生态系统中的垂直服务和水平服务？它们有何联系和区别？试举例加以说明</h3><ol><li><strong>服务生态系统（参考商业生态系统的答案）</strong></li></ol><p>一方面：面向服务的快速发展导致单个组织无法独立提供全套服务，提供的有限服务也无法被广泛运用；已存在的服务并不能很好的被发现和调用，也导致了大量冗余服务</p><p>另一方面：原先的服务系统是复杂、脆弱、特殊的，从上层业务看，无法灵活应对实际业务的变更；从底层实现看，也无法及时应对底层技术的更新、或者新增的功能 因此构建服务生态系统，运用面向服务的分析和设计原则，使得产生的服务具有良好的可发现性和可复用性，同时能灵活应对业务领域和技术领域的变更。</p><ol><li>垂直服务</li></ol><ul><li><p>单独面向一个客户，提供系列功能的服务</p></li><li><p>从消费者的角度说，垂直服务可以被同时、独立地使用，分为纯IT服务和IT-enabled 服务</p></li></ul><ol><li>水平服务</li></ol><ul><li><p>用于构建垂直服务、可重用的、跨行业的公共服务</p></li><li><p>分为公共业务服务和IT服务</p></li></ul><ol><li>联系与区别</li></ol><ul><li><p>垂直服务和水平服务都是通过服务系统来实现业务服务</p></li><li><p>水平服务是功能相关的，简单且相对稳定，一般由IT专家开发</p></li><li><p>垂直服务是流程相关的，复杂且易变更，需要领域专家参与开发</p></li><li><p>垂直服务实际上是一系列水平服务的封装，将上下文无关的水平服务根据特定的业务流程进行编排，最后打包为一个解决特定问题的垂直服务</p></li></ul><p>举例：</p><p>学校的借书服务、打印成绩单服务是垂直服务，都需要进行身份认证，身份认证就是一个水平服务；借书服务和打印成绩单服务除了身份认证还包含其他的服务，就是将简单的水平服务构建成能实现业务目标或流程的垂直服务</p><h3 id="二、试描述SOA三角操作模型，并对比传统的端到端服务调用模式，阐述其IT优势和商业优势"><a href="#二、试描述SOA三角操作模型，并对比传统的端到端服务调用模式，阐述其IT优势和商业优势" class="headerlink" title="二、试描述SOA三角操作模型，并对比传统的端到端服务调用模式，阐述其IT优势和商业优势"></a>二、试描述SOA三角操作模型，并对比传统的端到端服务调用模式，阐述其IT优势和商业优势</h3><h4 id="SOA三角操作模型"><a href="#SOA三角操作模型" class="headerlink" title="SOA三角操作模型"></a>SOA三角操作模型</h4><p>   <img src="https://gitee.com/icimence/CDN/raw/master/postimg/soa/soa.png" alt="soa示例"></p><ol><li>三种角色：</li></ol><ul><li><p>服务提供者：发布自己的服务，并且对服务请求进行响应</p></li><li><p>服务请求者：利用服务注册查找所需要的服务，然后使用该服务</p></li><li><p>服务注册：注册已经发布的服务，对其进行分类，并提供搜索服务</p></li></ul><ol><li>三个操作：</li></ol><ul><li><p>发布：为了使服务可访问，需要发布服务描述以使服务使用者可以发现它</p></li><li><p>查找：服务请求者查询服务注册来找到满足其标准的服务</p></li><li><p>绑定：检索到服务描述后，服务使用者继续根据服务描述中的信息调用服务</p></li></ul><p>对比传统端到端服务调用模式：</p><p>降低服务调用者和服务提供者之间的耦合；调用者只需要向服务注册请求调用，服务注册会在满足条件的服务提供方中选一个交给调用者，调用者不需要担心提供者是否会停止服务；提供者需要变更自己的服务时，服务注册就换一个实现给调用者。</p><h4 id="IT优势"><a href="#IT优势" class="headerlink" title="IT优势"></a>IT优势</h4><ol><li><p>松耦合，消除假依赖———复用</p><ul><li>语言、平台和厂商中立</li><li>消除时间依赖</li><li>消除访问地址依赖</li><li>消除访问协议依赖 </li></ul></li><li>服务间接寻址 ——— 灵活</li><li><p>商业优势</p><ul><li>保护企业投资，提升现有IT资源的作用，促进IT资源的复用</li><li>提高企业灵敏度</li><li>支持企业外包管理模式</li></ul></li></ol><h3 id="三、XML的结构（树状结构）？与原先的文本-json-二进制相比有什么好处？"><a href="#三、XML的结构（树状结构）？与原先的文本-json-二进制相比有什么好处？" class="headerlink" title="三、XML的结构（树状结构）？与原先的文本/json/二进制相比有什么好处？"></a>三、XML的结构（树状结构）？与原先的文本/json/二进制相比有什么好处？</h3><p>XML形成的是树状结构，一个XML文档有唯一的element作为根元素，该元素是所有其他元素的父元素，同时所有的元素均可拥有子元素。</p><p>优点：XML文档的内容和结构完全分离，基于这个特性可以实现服务的功能管理和流程管理彻底分离；</p><blockquote><p>互操作性强，纯文本文件可以方便地在不同的系统之间通信； 规范统一，XML有统一的标准语法，可以跨平台、跨系统</p><p>可扩展性强，可以根据XML的基本语法，进一步限定在特殊环境下，使用的</p></blockquote><p>XML文档格式</p><blockquote><p>支持多种编码，XML包含所使用的编码，方便多语言系统对数据进行处理</p></blockquote><h3 id="四、试描述soap包的结构，并结合该结构，阐述soap处理模型（无需准确给出相关命名空间和元素名称）"><a href="#四、试描述soap包的结构，并结合该结构，阐述soap处理模型（无需准确给出相关命名空间和元素名称）" class="headerlink" title="四、试描述soap包的结构，并结合该结构，阐述soap处理模型（无需准确给出相关命名空间和元素名称）"></a>四、试描述soap包的结构，并结合该结构，阐述soap处理模型（无需准确给出相关命名空间和元素名称）</h3><h4 id="soap包结构"><a href="#soap包结构" class="headerlink" title="soap包结构"></a>soap包结构</h4><p>soap包本质是一个xml文档，包含下列元素：</p><ol><li><p>Envelope元素</p><blockquote><ul><li>必需元素，根元素，标识此XML文档为一条 SOAP 消息</li><li>可以包含命名空间和声明额外的属性。如果出现额外属性，则必须使用命名空间修饰</li></ul></blockquote></li><li><p>Header 元素</p><blockquote><ul><li>可选元素，有关 SOAP 消息的应用程序专用信息（比如认证、支付等）</li></ul></blockquote></li><li><p>Body 元素</p><blockquote><ul><li>必需元素，包含所有的调用和响应信息</li></ul></blockquote></li><li><p>Fault 元素</p><blockquote><ul><li>可选元素，提供有关在处理此消息所发生错误的信息</li></ul></blockquote></li></ol><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/soa/soap.png" alt="soap示例"></p><h4 id="处理模型"><a href="#处理模型" class="headerlink" title="处理模型"></a>处理模型</h4><ol><li><p>用XML打包请求</p><blockquote><ul><li>将接口名作为根节点</li><li>方法和参数作为结点</li></ul></blockquote></li><li><p>将请求发给服务器</p><blockquote><ul><li>不创建自己的TCP/IP信息，利用HTTP</li><li>将 请 求 封 装 成 HTTP POST 请 求 格 式 发 出</li></ul></blockquote></li><li><p>服务器接收到请求，解码XML，处理请求，以XML格式返回响应</p><blockquote><ul><li>与请求比较，方法的结点名字变为请求的方法名后缀Response</li><li>客户程序知道自己调用了哪个方法，根据方法名后缀Response寻找调用方法的返回值</li></ul></blockquote></li></ol><h4 id="处理模式"><a href="#处理模式" class="headerlink" title="处理模式"></a>处理模式</h4><ol><li><p>简单模式</p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/soa/1.png" alt="简单模式"></p></li><li><p>复杂模式</p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/soa/2.png" alt="复杂模式"></p></li></ol><h4 id="交互模式"><a href="#交互模式" class="headerlink" title="交互模式"></a>交互模式</h4><ol><li><p>远程过程调用模式</p><blockquote><ul><li>一种同步请求/响应交互的方法</li><li>发出请求后会一直等待响应</li></ul></blockquote></li><li><p>面向文档模式</p><blockquote><ul><li>一种异步交互的方法</li><li>发送一个完整XML文档，然后等待通知，结果会在处理后发送回来</li></ul></blockquote></li></ol><p>补充：SOAP为什么被设计成两块？实际SOAP如何利用这两个信道？</p><p>被设计成header和body两块，一方面分离了控制信息和主要数据，让信息结构更加清晰；另一方面，在复杂模式中，header中的头块信息可以和中间节点进行角色上的转变。</p><p>body是必须的部分，内嵌的XML是完成当前任务的主要数据；而如果是一些附加的、用来协助完成的控制信息，则放在header中</p><h3 id="五、试结合WSDL文件的结构，说明WSDL文档记载了服务的哪些-信息，并阐述为何需要将WSDL文件分为抽象部分和具体部分"><a href="#五、试结合WSDL文件的结构，说明WSDL文档记载了服务的哪些-信息，并阐述为何需要将WSDL文件分为抽象部分和具体部分" class="headerlink" title="五、试结合WSDL文件的结构，说明WSDL文档记载了服务的哪些 信息，并阐述为何需要将WSDL文件分为抽象部分和具体部分"></a>五、试结合WSDL文件的结构，说明WSDL文档记载了服务的哪些 信息，并阐述为何需要将WSDL文件分为抽象部分和具体部分</h3><h4 id="结构（WSDL-2-0）"><a href="#结构（WSDL-2-0）" class="headerlink" title="结构（WSDL 2.0）"></a>结构（WSDL 2.0）</h4><p>以description元素为根结点</p><p>import、include：拼装不同部门/组织定义的文档，形成完整的WSDL语意</p><ol><li><p>抽象部分</p><blockquote><ul><li>Types：使用到的数据结构或者叫数据格式规范，独立于语言和平台</li><li>Interface：operation的集合即服务能力的集合，描述服务能力</li><li>operation：input、output、infault、outfault</li></ul></blockquote></li><li><p>具体部分</p><blockquote><ul><li>Binding：特定端口类型的具体协议和数据格式规范的绑定。</li><li>Service：对服务整体的抽象，包含若干个endpoint endpoint：将绑定与当前地址关联</li></ul></blockquote></li></ol><h4 id="服务的哪些信息"><a href="#服务的哪些信息" class="headerlink" title="服务的哪些信息"></a>服务的哪些信息</h4><p>功能 也叫服务能力，即调用某一个特定的操作，这个操作能被用来完成面向服务的一项功能</p><p>数据结构 通信消息中使用的数据结构</p><p>协议的绑定 即确定消息如何在具体的网络协议上传输总的来说就是服务做什么、如何使用服务以及服务在哪里</p><h4 id="分开原因"><a href="#分开原因" class="headerlink" title="分开原因"></a>分开原因</h4><p>一方面：</p><ul><li><p>抽象部分以独立于平台和语言的方式定义服务的逻辑意义，并不包含任何随机器或语言而变的元素，使不同的服务调用者都能调用实现</p></li><li><p>具体部分则包含了随网站而异的东西，由各实现方依据自己的情况定制</p></li><li><p>在保证可复用的同时又不局限各实现方的个性化定制</p></li></ul><p>另一方面：</p><ul><li>定义服务与实现服务可能是不同的部门或者组织，那么抽象部分与具体部分的WSDL 也应当由各自的部门定义、持有与管理（C9高校做让选课无缝衔接，教育部持有抽象部分，各高校持有具体部分）</li></ul><h3 id="六、以UDDI和WSIL为例，分别阐述集中式和分布式服务发布-查询的过程，并对比这两种方法"><a href="#六、以UDDI和WSIL为例，分别阐述集中式和分布式服务发布-查询的过程，并对比这两种方法" class="headerlink" title="六、以UDDI和WSIL为例，分别阐述集中式和分布式服务发布/查询的过程，并对比这两种方法"></a>六、以UDDI和WSIL为例，分别阐述集中式和分布式服务发布/查询的过程，并对比这两种方法</h3><ol><li><p>集中式发布</p><blockquote><p>S1：软件公司和标准组织向服务注册发布规范,即tModel 。</p><p>S2：公司完成服务的开发，注册关于业务及提供的服务的描述。</p><p>S3：UDDI 服务注册给每个实体指定一个唯一的标识符，从而能时刻了解所有实体的情况。</p></blockquote></li><li><p>集中式查询</p><blockquote><p>查询者使用UDDI提供的API，根据业务信息、服务信息或服务类别等搜索相关的服务</p><p>UDDI找到相应服务的WSDL并生成SOAP发送给查询者，查询者根据WSDL中描述的 接口等信息调用服务</p></blockquote></li><li><p>分布式发布</p><blockquote><p>S1：将服务描述为一个XML文档发布在Web服务器上</p><p>S2：使用WSIL从现有的服务描述文档生成引用</p><p>S3：引用指针连接到下一个服务，既可以是发布在UDDI注册中心的服务，也可以是另一个WSIL，这样不断地连接最终形成了WSIL超链。</p></blockquote></li><li><p>分布式查询</p><blockquote><p>通常使用构建好的查询工具查询；遍历WSIL超链，进行查找</p><p>S1：确定起始WSIL的位置</p><p>S2： 执 行 查 找 </p><p>S3：显示该WSIL中的链接表</p><p>S4：选择一个链接打开，如果打开的WSIL还包含其他链接，则继续追踪</p><p>S5：重复步骤3和4，直到找到目标信息</p></blockquote></li><li><p>对比</p><blockquote><p>主要区别是代价和复杂性</p><p>UDDI：适用于希望得到最大复用、得到最大访问范围的服务；</p><p>UDDI使用黄页机制，维护大量服务，代价大，但好处是分门别类，便于管理和共享 </p><p>WSIL：适用于当前提供服务的企业事先已经规划完毕，（我把它写成了一个目录，这个目录挂载在某个网站，让别人可以直接下载）根据超链的方式，对外提供这个企业内部所有分门别类的服务；复用性稍差，好处是不需要付出额外的代价</p></blockquote></li></ol><h3 id="七、试对比面向服务泛型和面向对象泛型（提示：方法论、抽象和协作层次、代码共享和复用、动态绑定和重新组合、重组、组件通讯和接口，系统维护、可靠性、软件拥有）"><a href="#七、试对比面向服务泛型和面向对象泛型（提示：方法论、抽象和协作层次、代码共享和复用、动态绑定和重新组合、重组、组件通讯和接口，系统维护、可靠性、软件拥有）" class="headerlink" title="七、试对比面向服务泛型和面向对象泛型（提示：方法论、抽象和协作层次、代码共享和复用、动态绑定和重新组合、重组、组件通讯和接口，系统维护、可靠性、软件拥有）"></a>七、试对比面向服务泛型和面向对象泛型（提示：方法论、抽象和协作层次、代码共享和复用、动态绑定和重新组合、重组、组件通讯和接口，系统维护、可靠性、软件拥有）</h3><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/soa/3.png" alt="图"></p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/soa/4.png" alt="图"></p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/soa/5.png" alt="图"></p><h2 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h2><h3 id="一、试结合相关协议和框架，描述一个web-service从创建开始到被最终服务消费者调用的全过程中对服务的建模、查询和调用的全过程"><a href="#一、试结合相关协议和框架，描述一个web-service从创建开始到被最终服务消费者调用的全过程中对服务的建模、查询和调用的全过程" class="headerlink" title="一、试结合相关协议和框架，描述一个web service从创建开始到被最终服务消费者调用的全过程中对服务的建模、查询和调用的全过程"></a>一、试结合相关协议和框架，描述一个web service从创建开始到被最终服务消费者调用的全过程中对服务的建模、查询和调用的全过程</h3><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/soa/6.png" alt="图"></p><ol><li>服务的建模</li></ol><p><strong>XML(Namespace、XML Schema)、SOAP、WSDL</strong></p><p>&emsp;&emsp;XML定义了Web服务中的消息交换格式，使用XML Schema定义不同的数据结构， 引入Namespace使得XML、XML Schema中的元素和属性全球唯一且全球共享；</p><p>&emsp;&emsp;SOAP提供了一种标准的方法，使得运行在不同平台、使用不同的技术和编程语言的应用程序可以互相进行通信，服务的发布、查找、调用，都通过SOAP传递XML消息</p><p>&emsp;&emsp;WSDL对服务能力、服务中使用的数据结构以及传输绑定给出定义和描述；提供了一种基于XML的标准接口定义语言/服务能力定义语言，用以在服务的提供者/调用者/服务注册之间，交换必要的有关Web Service的信息</p><p>&emsp;&emsp;对于大多数服务，用以上三个协议和框架可以完成建模；对于一些更为复杂的服务，如复合服务或者是带有非功能性需求的服务，还需要用到其他协议和框架完成建模。BPEL定义多个服务间如何交互和合作，从而将一组现有的服务根据业务流程构建起来，实现业务服务。WS-Policy可以实现一非功能性需求，如信息加密，权限验证等。</p><p>&emsp;&emsp;建模完成后，服务提供者通过UDDI或者WSIL将服务发布出去。其中，UDDI利用分页机制，让服务得到最大可能的复用和共享范围；WSIL使用树形连接结构，适用于企业既定的服务。</p><ol><li>服务的查询</li></ol><p>&emsp;&emsp;消费者程序发送SOAP消息给服务注册，描述自己需要的服务；服务注册查询注册 表，通过WSDL服务合约找到一系列符合条件的服务；服务注册将查询到的WSDL通过SOAP发送给消费者程序，让消费者程序从中选择可用的服务；或者服务注册自动化筛 选出当前最符合消费者程序要求的服务，通知消费者程序。</p><ol><li>服务的调用</li></ol><p>&emsp;&emsp;消费者程序根据WSDL中提供的服务位置进行调用；其中，消费者和提供者基于WSDL中约定的接口进行消息的发送和接收；另一方面，当前服务可能同时被多个消费者程序使用，创建了一系列服务实例，WS-Addressing提供了相应的机制，确保服务消费者能在实例池中找到特定的实例并与之通信。另一方面，由于创建的实例是有状态的，利用WSRF对状态数据进行存取，进行状态管理，提高资源利用率。</p><h3 id="二、以电信企业为应用背景，举例描述服务分析和服务设计的过程。并结合面向服务的设计原则（标准化服务合约、服务松散耦合、服务抽象、服务可复用性、服务自治、服务无状态性、服务可发现性、服务可组合性），讨论”schema集中化””合约集中化””逻辑集中化”-在设计过程中的应用。"><a href="#二、以电信企业为应用背景，举例描述服务分析和服务设计的过程。并结合面向服务的设计原则（标准化服务合约、服务松散耦合、服务抽象、服务可复用性、服务自治、服务无状态性、服务可发现性、服务可组合性），讨论”schema集中化””合约集中化””逻辑集中化”-在设计过程中的应用。" class="headerlink" title="二、以电信企业为应用背景，举例描述服务分析和服务设计的过程。并结合面向服务的设计原则（标准化服务合约、服务松散耦合、服务抽象、服务可复用性、服务自治、服务无状态性、服务可发现性、服务可组合性），讨论”schema集中化””合约集中化””逻辑集中化” 在设计过程中的应用。"></a>二、以电信企业为应用背景，举例描述服务分析和服务设计的过程。并结合面向服务的设计原则（标准化服务合约、服务松散耦合、服务抽象、服务可复用性、服务自治、服务无状态性、服务可发现性、服务可组合性），讨论”schema集中化””合约集中化””逻辑集中化” 在设计过程中的应用。</h3><p>举例：电信企业有订购、退订套餐，账单结算等基本业务流程</p><h4 id="1-服务分析流程"><a href="#1-服务分析流程" class="headerlink" title="1.服务分析流程"></a>1.服务分析流程</h4><p>面向服务分析的目标是讨论需要构建哪些服务，每个服务应该封装哪些逻辑。分析的核心是业务服务。</p><ol><li><p>进行文档化的需求描述，<strong>定义流程自动化需求</strong>，作为服务候选建模的依据；由于电信企业发展比较完善，可以直接使用之前的需求文档分析；</p></li><li><p>对<strong>现有的自动化系统进行分析、识别</strong>；分析企业正在使用的系统具有的功能；</p></li><li><p>对<strong>服务候选建模</strong>，识别服务操作候选，并将其分组。</p></li></ol><p>在面向服务分析流程中，需要考虑服务可复用性、服务自治和服务可发现性；</p><p>可复用性：在服务建模中，需要：精化已有的服务能力候选，使其更加一般化和可复用；定义额外的服务能力候选，这些能力是在构成服务建模过程的基础的业务流程自动化所需之外的</p><p>自治：对已有自动化系统收集得到的信息，会影响服务系统所能达到的自治级别；比如根据信息决定保留遗留系统，那么达到共享自治，独立开发的可能达到逻辑自治或完全自治</p><p>可发现性：从服务生命周期开始，尤其是在产生服务操作候选时，需要以统一的方式， 记录所有元数据；在服务建模过程中，业务和技术专家需要一起合作，建立服务候选</p><h4 id="2-服务设计流程"><a href="#2-服务设计流程" class="headerlink" title="2.服务设计流程"></a>2.服务设计流程</h4><p>服务设计过程，是从服务候选（逻辑）派生出具体的服务设计（物理），然后装配到实现业务流程的抽象组合中。</p><ol><li><p>组合SOA：选择编排、业务、应用服务层中的哪些进行实现，定义核心的SOA标 准，选择SOA扩展（WS-*协议）</p></li><li><p>根据业务层级，分别设计以实体为核心的业务服务，应用服务，以任务为核心的业务服务</p></li><li><p>设计面向服务业务过程，组合服务构建出业务流程</p></li></ol><h5 id="“schema集中化”："><a href="#“schema集中化”：" class="headerlink" title="“schema集中化”："></a>“schema集中化”：</h5><p>&emsp;&emsp;传统的做法是在订购服务、退订服务中使用不同的套餐数据结构，而按照标准化服务合约，所有使用的数据结构都应该被单独定义、管理，与具体的操作流程无关。</p><p>&emsp;&emsp;采用Schema集中化的设计模式，将电信企业划分为多个分离的领域（部门），每个领域都可以被独立地进行标准化和治理，每个领域定义和管理自己的schema，作为整个服务系统的基本数据结构；在不同的服务中，使用这些schema，避免了频繁且不必要的数据转换；在必要的情况下，可以利用这些schema定义新的数据结构</p><h5 id="“合约集中化”"><a href="#“合约集中化”" class="headerlink" title="“合约集中化”"></a>“合约集中化”</h5><p>为了保证服务松散耦合，避免消极耦合，采用合约集中化，将对服务的访问严格控制在合约内：</p><ol><li><p>所有的合约应该被集中管理，拥有一致的设计原则和设计目标；</p></li><li><p>在服务生态系统中，任何情况都不可以绕开合约去访问具体内容</p></li></ol><p>服务抽象&amp;服务可发现性设计服务暴露的信息</p><p>服务抽象：技术信息、功能、程序逻辑、服务质量抽象</p><p>服务抽象出来并对外界可用的信息就是服务合约，服务合约的设计标准会影响到其他</p><h5 id="“逻辑集中化”"><a href="#“逻辑集中化”" class="headerlink" title="“逻辑集中化”"></a>“逻辑集中化”</h5><p>为了实现服务可复用性，让消费者程序只调用指定的服务，要建立服务库存，在规范的服务库存中，每个服务代表来一个独特的功能域，这就要求服务边界之间没有重叠。</p><p>设置专家管理服务库存，应用开发人员不能直接往服务库存中增改需要的服务，只能请求当前服务库存管理人员进行审查，作出恰当的决策。</p><p>同时，服务可发现性是实现服务可复用的前提，服务自治是可复用服务潜在高性能和并行使用的保证；无状态性能提高服务的可用性</p><h5 id="逻辑集中化和合约集中化"><a href="#逻辑集中化和合约集中化" class="headerlink" title="逻辑集中化和合约集中化"></a>逻辑集中化和合约集中化</h5><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/soa/7.png" alt=""></p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/soa/8.png" alt=""></p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/soa/9.png" alt=""></p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/soa/10.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库复习提纲</title>
      <link href="/2021/04/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/"/>
      <url>/2021/04/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本复习提纲由Dart完成整理。</p><p>内容没有按题号来，主要按6+上课复习涉及到的知识点</p><h3 id="1-B-树索引"><a href="#1-B-树索引" class="headerlink" title="1. B+树索引"></a>1. B+树索引</h3><h4 id="1-1-B-树的结构"><a href="#1-1-B-树的结构" class="headerlink" title="1.1 B+树的结构"></a>1.1 B+树的结构</h4><p>索引结构为树状层次结构，根节点会将数值分成若干区间，每个区间用指针指向下一层节点，下一层节点同样划分成若干区间，指向再下一层节点，依次往下</p><p>最底层的节点——叶节点，叶节点记录索引字段的值和此值所对应的基本表相关的记录存放的地址，将这个地址称为rowid </p><p>读取文件的步骤为：在b树中逐层向下找到rowid（索引的过程），之后根据rowid取读取基本表相关记录内容。读取每层节点的值都是一次io操作，下图中3次io操作是索引，再经历一次io操作查表即可获得基本表相关记录，即4次io</p><p>所有的叶节点都是按顺序在底层横向连接在一起，属于顺序存储的数据结构，对于搜索范围数据非常有用</p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/sql/1.jpg" alt="B+"></p><h4 id="1-2-B-树索引能做什么，不能做什么，理由"><a href="#1-2-B-树索引能做什么，不能做什么，理由" class="headerlink" title="1.2 B+树索引能做什么，不能做什么，理由"></a>1.2 B+树索引能做什么，不能做什么，理由</h4><ul><li><p>能做什么</p><p>全键值查询（等值查询），每一次查询都是固定的次数的io操作（基于上图为4），3次索引+1次查表，不会受基本表大小的影响，效率一样</p><p>范围查询，查询过程为：先通过等值查询找到范围最左侧的值对应的块，然后横向读取叶节点，直到读到范围最右侧的值对应的块为止，读完索引以后根据地址（rowid）找值即可。由于数据在叶节点中横向顺序查询，因此范围查询很方便，效率很高</p><p>键前缀查询，与范围查询类似。</p></li><li><p>不能做什么</p><p>后缀查询</p></li></ul><h3 id="2-索引"><a href="#2-索引" class="headerlink" title="2. 索引"></a>2. 索引</h3><h4 id="2-1-作用"><a href="#2-1-作用" class="headerlink" title="2.1 作用"></a>2.1 作用</h4><p>索引是否合理取决于它是否有用，判断适用性的依据是检索比例（查询到的结果集在原数据中所占的比例，一般为10%，但是没有明确的分界线）</p><p>查询结果所占的百分比越低，称查询越具有选择性</p><p>越少的数据访问，越有必要通过索引来提升查询效率，如果比例过大，则可能还不如全表遍历</p><p>两种b树索引适用情况：</p><ul><li><p>仅需要访问基本表中很少一部分行可以使用索引</p></li><li><p>访问基本表很多行，只使用索引，不使用表</p><blockquote><p>e.g</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> x,y</span><br><span class="line"><span class="keyword">From</span> T</span><br><span class="line"><span class="keyword">where</span> x</span><br></pre></td></tr></table></figure><p>即所需查询的数据中，select需要筛选的字段只有x,y,则可以通过复合键索引（见2.2），读完整个索引，查询结果可得，不需要查询基本表</p></blockquote></li></ul><h4 id="2-2-复合键索引"><a href="#2-2-复合键索引" class="headerlink" title="2.2 复合键索引"></a>2.2 复合键索引</h4><p>复合键索引，即对多个字段构建的索引</p><blockquote><p>e.g. index(x,y)</p></blockquote><p>复合键索引本质上是按照排名第一的字段进行的索引，如上例中index(x)和index(x,y)本质是一样的，如果有index(x,y)，则不需要index(x)，因为二者组织方式是一样的</p><blockquote><p>e.g. 对x,y进行复合键索引，本质上是对x构建索引一样，唯一的差别是在叶节点增加一列y的值，对每个x的取值，y进行排序</p></blockquote><h4 id="2-3-索引加外键的理由"><a href="#2-3-索引加外键的理由" class="headerlink" title="2.3 索引加外键的理由"></a>2.3 索引加外键的理由</h4><h5 id="对数据库的某些操作有影响："><a href="#对数据库的某些操作有影响：" class="headerlink" title="对数据库的某些操作有影响："></a>对数据库的某些操作有影响：</h5><blockquote><p>e.g.表A student的外键参照了表B department的主键，两张表需要同时修改，stu表很大，而用户只是希望从department表删除一条记录，dbms为了避免表间依赖的不一致性，s tu需要检查stu表中是否包含了de表中待删除的记录，就会花费较多时间，并有可能影响到操作，而有索引之后会节省很多时间</p></blockquote><h5 id="对并发也有影响："><a href="#对并发也有影响：" class="headerlink" title="对并发也有影响："></a>对并发也有影响：</h5><p>外键不加索引有可能会造成死锁，若无，查找子记录的速度就会很慢，参照表被锁住的时间会很长，阻塞更多的操作，两个进程互锁对方需要的参照表就会引发死锁，加外键的必要性在于可以避免枷锁时间过长，进程需要的时间缩短，降低了出现死锁的概率</p><h5 id="什么时候不需要："><a href="#什么时候不需要：" class="headerlink" title="什么时候不需要："></a>什么时候不需要：</h5><p>表b很少被修改，例如表b为字典表，其主键作为表a的外键不需要加索引，因为表b很难产生修改的情况，因而很难产生并发冲突</p><h4 id="2-4-同一字段-多个索引-字段顺序问题"><a href="#2-4-同一字段-多个索引-字段顺序问题" class="headerlink" title="2.4 同一字段 多个索引 字段顺序问题"></a>2.4 同一字段 多个索引 字段顺序问题</h4><p>如果系统为外键自动增加索引，常常会导致同一字段属于多个索引的情况</p><blockquote><p>e.g. 多对多的情况：一个订单包含多个商品，一个商品也在多个订单中出现，因此需要在中间建立关联表（Order_Details(Order_id,article_id)）</p></blockquote><p>在索引中字段顺序很重要，可能会影响某引数量，导致多余索引的情况，从而影响性能</p><blockquote><p>e.g. 在上例中，如果Order_id在前，表会缺省地构建一个order_id和article_id的复合键索引，然后要手动为外键构建索引，Order_id不需要索引，因为跟复合键索index（o,a）引本质一样，因此只需要构建article_id的索引，而article是商品表，不太被修改，符合字典表原则，因此不需要构建索引。综上，只需对复合键构建索引，不需单独索引，仅有一个索引</p><p>如果a在前，系统会构建一个a_id为主的复合键索引，同时要手工构建o_id的外键索引，因为order这张表要频繁更改，构建外键索引是必要的。综上，引入了额外的索引</p></blockquote><h4 id="2-5-自增字段-系统生成键"><a href="#2-5-自增字段-系统生成键" class="headerlink" title="2.5 自增字段 系统生成键"></a>2.5 自增字段 系统生成键</h4><p>构建数据库有时需要唯一的流水号作为主键，往往用自增字段/系统生成键来实现</p><h5 id="怎么实现"><a href="#怎么实现" class="headerlink" title="怎么实现"></a>怎么实现</h5><p>系统提供的自增字段性能很高，使用系统提供的自增字段是最佳选择，远好于自己实现，系统会自动为当前自增字段构建主键索引以保证其唯一性</p><ul><li><p>自己实现：</p><p>需要存储一个最大值，而这个最大值势必成为资源竞争的节点，所有的插入必须先读取该最大值，然后进行+1，再存储，此时该字段值只能串行化，无法支持并发</p></li></ul><h5 id="资源竞争"><a href="#资源竞争" class="headerlink" title="资源竞争"></a>资源竞争</h5><p>如果用自增字段来实现系统生成键，可能会引发并发问题：插入并发性过高，在主键索引的创建操作上会发生严重的资源竞争问题</p><p>主键索引的主要作用是保障主键的唯一性，如果仅存在一个系统生成键的生成器，生成的序列号就会很接近，在插入键值的过程中，所有的进程都会争夺相同的索引的page和块，而请求需要串行化各个进程，利用合适锁定机制来避免一个进程的复写(overwrite)。尽管在基本表的插入中由于堆文件、随机文件的存在使得基本表可以支持高并发的同时写入，但在索引写入上只能支持串行，即一个接一个的操作，这时就会出现瓶颈</p><h5 id="怎么解决"><a href="#怎么解决" class="headerlink" title="怎么解决"></a>怎么解决</h5><p>反向键索引/逆向索引（reverse index）</p><ul><li><p>特殊的函数索引，将字段值反过来（9527-&gt;7259）</p><p>如果有连续的记录并发插入，他们大概率会在索引结构上同一个叶节点的块中，此时必须要排队竞争该具体块从而插入</p><p>反向键索引使得连续的值变得相差很远，他们大概率会落在索引结构的不同叶节点上，这时可以同时插入不同的块，不需要竞争</p></li></ul><p>哈希索引(hash index)</p><ul><li>组织形式与b树索引类似，将值与等长数值（哈希值）对应起来，将哈希值组成索引结构</li><li>与上一个方法类似，本质是将连续的内容离散化</li></ul><h5 id="该不该用毫无意义的字段作为主键，会带来什么问题（内容来自网络）"><a href="#该不该用毫无意义的字段作为主键，会带来什么问题（内容来自网络）" class="headerlink" title="该不该用毫无意义的字段作为主键，会带来什么问题（内容来自网络）"></a>该不该用毫无意义的字段作为主键，会带来什么问题（内容来自网络）</h5><p>优点：</p><ul><li>数据库自动编号，速度快，而且是增量增长，按顺序存放，对于检索非常有利；</li><li>数字型，占用空间小，易排序，在程序中传递也方便；</li><li>如果通过非系统增加记录时，可以不用指定该字段，不用担心主键重复问题</li></ul><p>缺点：</p><ul><li>在系统集成或割接时，如果新旧系统主键不同是数字型就会导致修改主键数据类型，这也会导致其它有外键关联的表的修改，后果同样很严重</li><li>高并发的情况下，竞争自增锁会降低数据库的吞吐能力</li><li>导入旧数据时，可能会ID重复，导致导入失败</li><li>分布式架构，多个Mysql实例可能会导致ID重复</li></ul><h3 id="3-SQL"><a href="#3-SQL" class="headerlink" title="3. SQL"></a>3. SQL</h3><h4 id="3-1-执行顺序"><a href="#3-1-执行顺序" class="headerlink" title="3.1 执行顺序"></a>3.1 执行顺序</h4><p>解析最消耗资源，是高效执行/优化的切入口。解析对每一次的表达式进行等价变换，生成解析树进行评估，最终形成执行计划，将计划抛入执行引擎中，进行查询，解析+生成执行计划是查询优化器最重要的工作</p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/sql/2.jpg" alt="执行顺序"></p><h4 id="3-2-优化方式"><a href="#3-2-优化方式" class="headerlink" title="3.2 优化方式"></a>3.2 优化方式</h4><ul><li>使用好的过滤条件</li><li>降低表连接的数量</li></ul><h5 id="过滤条件"><a href="#过滤条件" class="headerlink" title="过滤条件"></a>过滤条件</h5><ul><li><p>含义</p><p>join过滤条件——on，用于连接表</p><p>select过滤条件——where，与需求、业务相关</p></li><li><p>过滤条件的好坏</p><p>过滤条件是否高效：是否能够尽快减少必须处理的数据总量</p><p>好的过滤条件需要先做，在复杂的、高并发的查询中，将好的过滤条件先做，可以有效减少中间结果集的大小，从而提高效率</p></li></ul><h5 id="用exists嵌套子查询摆脱distinct"><a href="#用exists嵌套子查询摆脱distinct" class="headerlink" title="用exists嵌套子查询摆脱distinct"></a>用exists嵌套子查询摆脱distinct</h5><p>子查询和外层select关系很密切，但会执行很多次，这时如果在exists前使用较高效的过滤条件可以有效减少exists的执行次数</p><h5 id="in构建非关联子查询"><a href="#in构建非关联子查询" class="headerlink" title="in构建非关联子查询"></a>in构建非关联子查询</h5><p>在关联子查询中，相关字段要有索引，而非关联子查询不需要，因为要用到的索引是主键索引，内层查询不再依赖外层查询，只需要执行一次</p><h4 id="3-3-表结构"><a href="#3-3-表结构" class="headerlink" title="3.3 表结构"></a>3.3 表结构</h4><h5 id="回头看看订单和客户的例子"><a href="#回头看看订单和客户的例子" class="headerlink" title="回头看看订单和客户的例子"></a>回头看看订单和客户的例子</h5><h5 id="降低表连接数量-gt-反范式-逆范式"><a href="#降低表连接数量-gt-反范式-逆范式" class="headerlink" title="降低表连接数量-&gt;反范式/逆范式"></a>降低表连接数量-&gt;反范式/逆范式</h5><p>反范式化为了提升查询效率而考虑把原本符合第三范式的表适当增冗余，减少表连接数量</p><p>合并1对1关系</p><ul><li><p>以全部参与的表为主，引入部分参入的表</p><blockquote><p>e.g. staff与nok(紧急联系人)是1对1，每个nok都对应一个staff，但不是每个staff都有nok，nok部分参与。对两表进行合并，以staff为主，引入nok</p></blockquote></li><li><p>问题：</p><ul><li>空值问题</li><li>如果全部参与的表很大，部分参与的表很小，会造成空间浪费</li><li>如果两个表对于彼此都是部分参与，那么还需手动引入主键</li></ul></li></ul><p>为减少连接操作，在1对多关系中复制非关键字属性</p><ul><li>注意复制过来的属性的更新，需要触发器来进行两张表的同步更新</li><li>一般对于钱这种属性，都需要打破范式进行存储</li></ul><p>为减少连接操作，在1对多关系中复制外部关键字</p><ul><li>与上述内容类似</li></ul><p>为减少连接操作，在多对多关系中复制非关键字属性</p><p>引入重复组</p><ul><li>把重复组打包放进主表中（不通用）</li><li>主表中存放缺省的一个值，等需要详细的全部内容时再访问相应的地址表和基本表</li></ul><p>合并基本表和查找表，创建提取表</p><ul><li>将查询慢的表全部连接起来形成一张大表</li><li>不到必要不要使用，虽然很强大，但会带来很大的复杂性</li></ul><p>分区（存储层面的逆范式）</p><h3 id="4-数据库的事务隔离级别"><a href="#4-数据库的事务隔离级别" class="headerlink" title="4. 数据库的事务隔离级别"></a>4. 数据库的事务隔离级别</h3><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/sql/3.jpg" alt="隔离级别"></p><h4 id="相关计算"><a href="#相关计算" class="headerlink" title="相关计算"></a>相关计算</h4><h5 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h5><p>一个事务读到另一个事务修改但未提交的数据时，就可能发生脏读</p><p>e.g. from ppt</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*事务1*/</span></span><br><span class="line"><span class="keyword">SELECT</span> dept_id <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">/* 结果是 1 */</span></span><br><span class="line"><span class="comment">/*事务2*/</span></span><br><span class="line">UPDATE users <span class="keyword">SET</span> dept_id<span class="operator">=</span><span class="number">2</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">/* No commit here */</span></span><br><span class="line"><span class="comment">/*事务1*/</span></span><br><span class="line"><span class="keyword">SELECT</span> dept_id <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">/* 结果是 2 */</span></span><br></pre></td></tr></table></figure><h5 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h5><p>（ppt）在当执行SELECT 操作时没有获得读锁或SELECT操作执行完后马上释放了读锁; 另外一个事务对数据进行了更新,读到了不同的结果</p><p>（网络版本）在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了</p><p>e.g. 事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*事务1*/</span></span><br><span class="line"><span class="keyword">SELECT</span> dept_id <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">/* 结果是 1 */</span></span><br><span class="line"><span class="comment">/*事务2*/</span></span><br><span class="line">UPDATE users <span class="keyword">SET</span> dept_id<span class="operator">=</span><span class="number">2</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">/* No commit here */</span></span><br><span class="line"><span class="comment">/*事务1*/</span></span><br><span class="line"><span class="keyword">SELECT</span> dept_id <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">/* 结果是 2 */</span></span><br></pre></td></tr></table></figure><p>注意，虽然你知道事务2改了，但是事务1可能不知道，连读两次数不一样的场面就很惊悚</p><h5 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h5><p>是不可重复读的一种特殊场景，主要针对增和删</p><ul><li><p>当事务1两次执行’’SELECT … WHERE’’检索一定范围内数据的操作中间</p></li><li><p>事务2在这个表中创建了(如[[INSERT]])了一行新数据，这条新数据正好满足事务1的 “WHERE”子句。</p></li></ul><p>e.g. from Internet</p><p>系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读</p><h5 id="三者比较"><a href="#三者比较" class="headerlink" title="三者比较"></a>三者比较</h5><p>脏读：读到了别的事物未提交的数据</p><p>不可重复读：读到了其他事务已经提交的数据</p><p>幻读：不可重复读的特殊场景</p><ul><li>不可重复读与幻读都是读到其他事务已提交的数据，但是它们针对点不同.</li><li>不可重复读:update.</li><li>幻读:delete，insert</li></ul><h4 id="四种级别（如果你嫌弃我的例子炒前面的冷饭那就自己举！）"><a href="#四种级别（如果你嫌弃我的例子炒前面的冷饭那就自己举！）" class="headerlink" title="四种级别（如果你嫌弃我的例子炒前面的冷饭那就自己举！）"></a>四种级别（如果你嫌弃我的例子炒前面的冷饭那就自己举！）</h4><h5 id="未提交读"><a href="#未提交读" class="headerlink" title="未提交读"></a>未提交读</h5><p>是最低的隔离级别，在这种隔离级别下，如果一个事务 已经开始写数据，则另外一个事务则不允许同时进行写操作，但允许其他事务读此行数据</p><p>在此隔离级别下，一个事务能够读到其他事务未提交的数据，因此可能存在脏读问题</p><p>e.g. (前面脏读的例子罢了)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*事务1*/</span></span><br><span class="line"><span class="keyword">SELECT</span> dept_id <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">/* 结果是 1 */</span></span><br><span class="line"><span class="comment">/*事务2*/</span></span><br><span class="line">UPDATE users <span class="keyword">SET</span> dept_id<span class="operator">=</span><span class="number">2</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">/* No commit here */</span></span><br><span class="line"><span class="comment">/*事务1*/</span></span><br><span class="line"><span class="keyword">SELECT</span> dept_id <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">/* 结果是 2 */</span></span><br></pre></td></tr></table></figure><p>隔离级别低到连其他未提交的数据都可以读到，因此可重复读和幻读问题也不可避免，举例与上述幻读和不可重复读一致</p><h5 id="已提交读"><a href="#已提交读" class="headerlink" title="已提交读"></a>已提交读</h5><p>读取数据的事务允许其他事务继续访问该行数据，但是未提交的写事务将会禁止其他事务 访问该行，会对该写锁一直保持直到到事务提交</p><p>e.g. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*事务1*/</span></span><br><span class="line"><span class="keyword">SELECT</span> dept_id <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">/* 结果是 1 */</span></span><br><span class="line"><span class="comment">/*事务2*/</span></span><br><span class="line">UPDATE users <span class="keyword">SET</span> dept_id<span class="operator">=</span><span class="number">2</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">/* No commit here ,But locked*/</span></span><br><span class="line"><span class="comment">/*事务1*/</span></span><br><span class="line"><span class="keyword">SELECT</span> dept_id <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">/* waiting waiting/</span></span><br><span class="line"><span class="comment">/*事务2*/</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">SELECT</span> dept_id <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">/* 结果是 1 */</span></span><br></pre></td></tr></table></figure><p>解释：在事务2更新某条数据的时候，如果没有commit，那么针对此条数据的写锁一直保持，当事务1想要读时会因为写锁被阻塞，直到事务2commit或者rollback，写锁解除，才可以读</p><p>但是防不了不可重复读的问题，即事务2 commit提交以后，事务1在前后两次读取相同行的内容是不同的</p><p>e.g. (前面不可重复读的例子罢了)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*事务1*/</span></span><br><span class="line"><span class="keyword">SELECT</span> dept_id <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">/* 结果是 1 */</span></span><br><span class="line"><span class="comment">/*事务2*/</span></span><br><span class="line">UPDATE users <span class="keyword">SET</span> dept_id<span class="operator">=</span><span class="number">2</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">/*事务1*/</span></span><br><span class="line"><span class="keyword">SELECT</span> dept_id <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">/* 结果是 2 */</span></span><br></pre></td></tr></table></figure><p>幻读作为不可重复读的特殊场景同样在这一隔离级别难以被避免（笔者此时心态崩了，不想写了，反正就事务2插入了，然后事务1恍惚间发现多了一条数据，就很迷）</p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/sql/4.jpg" alt="图"></p><h5 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h5><p>从名字就可以知道，它可以避免不可重复读的问题</p><p>一个事务在执行过程中，<strong>可以访问其他事务成功提交的新插入的数据，但不可以访问成功修改的数据。读取数据的事务将会禁止写事务（但允许读事务）</strong>，写事务则禁止任何其他事务。此隔离级别可有效防止不可重复读和脏读，但防不住幻读，下图应该很清楚了，我就不解释了</p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/sql/5.jpg" alt="图"></p><h5 id="可串行化"><a href="#可串行化" class="headerlink" title="可串行化"></a>可串行化</h5><p>提供严格的事务隔离。它要求事务序列化执行，事务只能一个接着一个地执行，不能并发执行。此隔离级别可有效防止脏读、不可重复读和幻读。但这个级别可能导致大量的超时现象和锁竞争，在实际应用中很少使用</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux程设复习提纲（三）</title>
      <link href="/2021/04/21/Linux%E7%A8%8B%E8%AE%BE%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2021/04/21/Linux%E7%A8%8B%E8%AE%BE%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="Chapter3-1（续）"><a href="#Chapter3-1（续）" class="headerlink" title="Chapter3-1（续）"></a>Chapter3-1（续）</h3><h3 id="系统调用（掌握）和库函数（当题目指定系统调用时不能使用）"><a href="#系统调用（掌握）和库函数（当题目指定系统调用时不能使用）" class="headerlink" title="系统调用（掌握）和库函数（当题目指定系统调用时不能使用）"></a>系统调用（掌握）和库函数（当题目指定系统调用时不能使用）</h3><p>系统调用和库函数都以C函数的形式出现</p><h4 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h4><ul><li>Linux内核的对外接口</li><li>用户程序和内核之间唯一的接口</li><li>提供最小接口</li></ul><h4 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h4><ul><li>依赖于系统调用</li><li>提供复杂功能（例如：标准I/O库）</li></ul><h4 id="以I-O作为样例"><a href="#以I-O作为样例" class="headerlink" title="以I/O作为样例"></a>以I/O作为样例</h4><ul><li>非缓存IO<ul><li>读写操作直接调用系统调用</li><li>文件描述符</li><li>Not in ANSI C, but in POSIX.1 and XPG3</li></ul></li><li>缓存IO<ul><li>使用标准IO库</li><li>处理很多细节，如缓存分配以及优化长度执行IO</li><li>流是一个文件中的指针</li></ul></li></ul><h4 id="系统IO调用"><a href="#系统IO调用" class="headerlink" title="系统IO调用"></a>系统IO调用</h4><h5 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h5><p>一个非负的整形（如在<unistd.h>文件中STDIN_FILENO (0), STDOUT_FILENO (1), STDERR_FILENO (2)）</p><p>一般的文件操作的步骤：打开，读/写，（lseek），关闭</p><h5 id="基本的IO函数"><a href="#基本的IO函数" class="headerlink" title="基本的IO函数"></a>基本的IO函数</h5><p>先给一个文件的最简单的读写样例程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* a rudimentary example program */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> fd, nread;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">/*open file “data” for reading */</span></span><br><span class="line">fd = open(“data”, O_RDONLY);</span><br><span class="line"><span class="comment">/* read in the data */</span></span><br><span class="line">nread = read(fd, buf, <span class="number">1024</span>);</span><br><span class="line"><span class="comment">/* close the file */</span></span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="open-creat方法"><a href="#open-creat方法" class="headerlink" title="open/creat方法"></a>open/creat方法</h6><p>用于打开或者创建一个文件或者设备</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> flags, <span class="keyword">mode_t</span> mode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">creat</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">mode_t</span> mode)</span></span>;</span><br><span class="line">(Return: a <span class="keyword">new</span> file descriptor <span class="keyword">if</span> success; <span class="number">-1</span> <span class="keyword">if</span> failure)</span><br></pre></td></tr></table></figure><p>flags参数：文件的访问模式</p><ul><li>O_RDONLY：只读操作</li><li>O_WRONLY：只写操作</li><li>O_RDWR：读写操作</li><li>O_APPEND：文件以追加（append）模式打开</li><li>O_TRUNC：如果文件已经存在且是一个常规文件且允许以写模式打开则截断该文件长度为0（清空文件？）</li><li>O_CREAT：如果文件不存在则被创建</li><li>O_EXCL：和O_CREAT一起使用，如果文件已经存在则是一个错误且打开文件失败。</li></ul><p>creat方法等价于以（O_CREAT|O_WRONLY|O_TRUNC）作为flag使用open方法</p><p>mode参数：指定创建新文件的权限，列表如下：</p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/20.png" alt="mode参数"></p><p>新建文件权限由mode和umask共同决定，如图</p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/21.png" alt="文件权限"></p><h6 id="close方法"><a href="#close方法" class="headerlink" title="close方法"></a>close方法</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br><span class="line">(Return: <span class="number">0</span> <span class="keyword">if</span> success; <span class="number">-1</span> <span class="keyword">if</span> failure)</span><br></pre></td></tr></table></figure><ul><li>主要系统调用要求掌握，指定系统调用的题不能用C库</li><li>进程相关的系统调用不要求掌握</li><li>LCTL不考</li><li>C库简答题可能要考</li><li>权限要掌握</li><li>文件锁要求掌握，扩展的文件锁不要求掌握</li><li>锁的标志位不要求掌握</li><li>锁的系统调用要求掌握</li></ul><h6 id="read-write函数"><a href="#read-write函数" class="headerlink" title="read/write函数"></a>read/write函数</h6><ul><li>从一个文件描述符进行读取</li><li>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>;</span><br><span class="line">(返回值: 读到的字节数，若已到文件尾为<span class="number">0</span>，若出错为<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 写到一个文件描述符</span><br><span class="line"></span><br><span class="line">```c </span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">ssize_t write(int fd, const void *buf, size_t count);</span><br><span class="line">(返回值: 若成功为已写的字节数，若出错为-1)</span><br></pre></td></tr></table></figure></li></ul><h6 id="lseek-函数"><a href="#lseek-函数" class="headerlink" title="lseek 函数"></a>lseek 函数</h6><p>用于重新计算读写的偏移量</p><p>用法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">off_t</span> <span class="title">lseek</span><span class="params">(<span class="keyword">int</span> fildes, <span class="keyword">off_t</span> offset, <span class="keyword">int</span> whence)</span></span>;</span><br><span class="line">(Return: the resulting offset location <span class="keyword">if</span> success; <span class="number">-1</span> <span class="keyword">if</span> failure)</span><br></pre></td></tr></table></figure><p>关于whence参数</p><blockquote><p><strong>SEEK_SET:</strong> the offset is set to “offset” bytes,这个表示把文件指针放在你设置的偏移量的位置。<br><strong>SEEK_CUR:</strong> the offset is set to its current location plus “offset” bytes，这个表示文件指针的位置设置在当前位置加上你设置的offset值的位置。<br><strong>SEEK_END:</strong> the offset is set to the size of the file plus “offset” bytes，这个表示文件指针的位置是文件末尾的位置加上设置的offset值的和的位置。</p></blockquote><h6 id="dup-dup2函数"><a href="#dup-dup2函数" class="headerlink" title="dup/dup2函数"></a>dup/dup2函数</h6><p>复制一个文件描述符，返回一个新的文件描述符，指向同一个文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup</span><span class="params">(<span class="keyword">int</span> oldfd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup2</span><span class="params">(<span class="keyword">int</span> oldfd, <span class="keyword">int</span> newfd)</span></span>;</span><br><span class="line">(Return: the <span class="keyword">new</span> file descriptor <span class="keyword">if</span> success; <span class="number">-1</span> <span class="keyword">if</span> failure)</span><br></pre></td></tr></table></figure><h6 id="fcntl函数"><a href="#fcntl函数" class="headerlink" title="fcntl函数"></a>fcntl函数</h6><p>对已打开的文件描述符进行各种控制操作以改变已打开文件的的各种属性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd, <span class="keyword">long</span> arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd, struct flock *lock)</span></span>;</span><br><span class="line">(返回值: 若成功则依赖于cmd，若出错为<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>cmd参数</p><ul><li>F_DUPFD：和dup函数相同</li><li>F_GETFD/F_SETFD：get/set文件的close-on-exec标志</li><li>F_GETFL/F_SETFL：get/set文件打开方式的标识</li><li>F_GETOWN/F_SETOWN：get/set文件的IO能力标识</li><li>F_GETLK/F_SETLK/F_SETLKW：获得，设置文件锁（封锁，解封），第二个在设置时如果失败会导致直接结束并返回，第三个是会阻塞自身等待文件解锁</li></ul><h6 id="ioctl函数"><a href="#ioctl函数" class="headerlink" title="ioctl函数"></a>ioctl函数</h6><p>控制设备的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ioctl</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> request, ...)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="标准I-O库"><a href="#标准I-O库" class="headerlink" title="标准I/O库"></a>标准I/O库</h5><h3 id="文件锁"><a href="#文件锁" class="headerlink" title="文件锁"></a>文件锁</h3><p>当几个进程同时操作文件时起到作用</p><ul><li><p>记录锁</p></li><li><p>劝告锁</p><blockquote><p>检查，加锁由应用程序自己控制</p></blockquote></li><li><p>强制锁</p><blockquote><p>检查，加锁由内核控制</p><p>影响open，read，write等函数</p></blockquote></li><li><p>共享锁</p></li><li><p>排他锁</p></li></ul><h4 id="fcntl设置锁"><a href="#fcntl设置锁" class="headerlink" title="fcntl设置锁"></a>fcntl设置锁</h4><p>上文<a href="#fcntl函数">系统调用中的fcntl</a>已经有cmd参数的详细介绍，这里不再做赘述，主要讲一下struct flock的使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd, struct flock *lock)</span></span>;</span><br><span class="line">(返回值: 若成功则依赖于cmd，若出错为<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">flock</span>&#123;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">short</span> l_type; <span class="comment">/* Type of lock: F_RDLCK, F_WRLCK, F_UNLCK */</span></span><br><span class="line"><span class="keyword">short</span> l_whence; <span class="comment">/* How to interpret l_start: SEEK_SET, SEEK_CUR, SEEK_END */</span></span><br><span class="line"><span class="keyword">off_t</span> l_start; <span class="comment">/* Starting offset for lock */</span></span><br><span class="line"><span class="keyword">off_t</span> l_len; <span class="comment">/* Number of bytes to lock */</span></span><br><span class="line"><span class="keyword">pid_t</span> l_pid; <span class="comment">/* PID of process blocking our lock (F_GETLK only) */</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Chapter-4"><a href="#Chapter-4" class="headerlink" title="Chapter 4"></a>Chapter 4</h2><h3 id="内核概念"><a href="#内核概念" class="headerlink" title="内核概念"></a>内核概念</h3><p>操作系统是一系列程序的集合，其中最重要的部分构成了内核。</p><h4 id="单内核-微内核"><a href="#单内核-微内核" class="headerlink" title="单内核/微内核"></a>单内核/微内核</h4><ul><li>单内核是一个很大的进程，内部可以分为若干模块，运行时是一个独立的二进制文件，模块间通讯通过直接调用函数实现</li><li>微内核中大部分内核作为独立的进程在特权下运行，通过消息传递进行通讯</li></ul><h4 id="Linux内核的能力"><a href="#Linux内核的能力" class="headerlink" title="Linux内核的能力"></a>Linux内核的能力</h4><ul><li>内存管理，文件系统，进程管理，多线程支持，抢占式，多处理支持</li></ul><h4 id="Linux内核区别于其他UNIX商业内核的优点"><a href="#Linux内核区别于其他UNIX商业内核的优点" class="headerlink" title="Linux内核区别于其他UNIX商业内核的优点"></a>Linux内核区别于其他UNIX商业内核的优点</h4><ul><li>单内核，模块支持</li><li>免费/开源</li><li>支持多种CPU，硬件支持能力非常强大</li><li>Linux开发者都是非常出色的程序员</li><li>通过学习Linux内核的源码可以了解现代操作系统的实现原理</li></ul><h3 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h3><p>常见的驱动代码集成在内核源码中</p><p>也有第三方开发的驱动可以单独编译为模块.ko文件</p><p>编译需要内核头文件的支持</p><h4 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h4><ul><li>底层命令<ul><li>insmod</li><li>rmmod</li></ul></li><li>高层命令<ul><li>modprobe</li><li>modprobe -r</li></ul></li></ul><h4 id="模块依赖"><a href="#模块依赖" class="headerlink" title="模块依赖"></a>模块依赖</h4><p>一个模块A应用另一个模块B所导出的符号我们就说模块B被模块A引用，如果要装载A，则必须要线装载B，否则，模块B所导出的那些符号的应用就不可能被链接到A中，这就叫模块的依赖</p><p>系统可以实现自动按需加载以及自动按需卸载</p><p>moddep，ismod，modinfo</p><h4 id="模块之间的通讯"><a href="#模块之间的通讯" class="headerlink" title="模块之间的通讯"></a>模块之间的通讯</h4><p>模块是为了完成某种特定任务而设计的，功能单一，为了丰富系统的功能，所以模块之间常常需要通信，可以共享<strong>变量，数据结构，调用对方的功能函数</strong></p><h4 id="模块的命令"><a href="#模块的命令" class="headerlink" title="模块的命令"></a>模块的命令</h4><ul><li>insmod <module.ko> [module parameters]<ul><li>用于装载模块</li><li>注意：只有超级用户能够使用这个命令</li></ul></li><li>rmmod<ul><li>卸载模块</li></ul></li><li>lsmod<ul><li>查看内核中已经装载的所有模块</li><li>这个命令和cat /proc/modules等价</li></ul></li><li>modprobe [-r] \<module name\><ul><li>装载一个模块以及这个模块依赖的所有模块</li></ul></li></ul><h4 id="Linux内核模块和应用程序的区别"><a href="#Linux内核模块和应用程序的区别" class="headerlink" title="Linux内核模块和应用程序的区别"></a>Linux内核模块和应用程序的区别</h4><div class="table-container"><table><thead><tr><th></th><th>C语言程序</th><th>Linux内核模块</th></tr></thead><tbody><tr><td>运行</td><td>用户空间</td><td>内核空间</td></tr><tr><td>入口</td><td>main</td><td>module_init()指定</td></tr><tr><td>出口</td><td>无</td><td>module_exit()指定</td></tr><tr><td>运行</td><td>直接运行</td><td>insmod</td></tr><tr><td>调试</td><td>gdb</td><td>kdbug,kdb,kgdb</td></tr></tbody></table></div><p>内核模块不能使用C库进行开发</p><p>没有内存保护机制</p><p>小内核栈</p><p>需要考虑并发</p><p>一个简单的内核模块的代码示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;Goodbye world\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/22.png" alt="内核模块解释"></p><h3 id="内核程序和用户态程序区别"><a href="#内核程序和用户态程序区别" class="headerlink" title="内核程序和用户态程序区别"></a>内核程序和用户态程序区别</h3><p>内核态和用户态是处理器的两个状态</p><p>当发生中断或者系统调用时暂停正在运行的进程，把处理器状态从用户态转到内核态，执行操作系统服务例程。这就是一次状态转换，此时进程仍然在自己的上下文中执行，仅处理器状态发生了变化，内核在被中断的进程的上下文中进行处理。</p><p>在大多数情况下处理器状态的转换不会影响到上下文。</p><h3 id="读懂内核程序代码"><a href="#读懂内核程序代码" class="headerlink" title="读懂内核程序代码"></a>读懂内核程序代码</h3><p>实在过于硬核，代码长达5页pdf，可以自行学习，在最后一个PDF的第25页开始</p><h3 id="字符型驱动程序概念"><a href="#字符型驱动程序概念" class="headerlink" title="字符型驱动程序概念"></a>字符型驱动程序概念</h3><p>Linux系统将设备分为三种类型：字符设备、块设备和网络接口设备</p><p>文件操作是字符设备驱动的对上接口</p><p>两个基本的结构体分别是：file结构体和inode结构体</p><p>驱动程序的初始化加载过程是</p><ul><li>申请设备号</li><li>定义文件操作结构体file_operations</li><li>创建并初始化定义结构体cdev</li><li>将cdev注册到系统，并和对应的设备号绑定</li><li>在/dev文件系统中用mknod创建设备文件，并将该文件绑定到设备号上</li></ul><p>每个字符设备或者是块设备都有主设备号和次设备号，主设备号表示一个特定的驱动程序，次设备号用来表示使用该驱动程序的各设备。</p><p><em>注：申请设备号之后的内容过于繁琐，个人认为不考，可以从参考pdf</em></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux程设复习提纲（二）</title>
      <link href="/2021/04/20/Linux%E7%A8%8B%E8%AE%BE%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2021/04/20/Linux%E7%A8%8B%E8%AE%BE%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Chapter3-0"><a href="#Chapter3-0" class="headerlink" title="Chapter3-0"></a>Chapter3-0</h2><h3 id="编译链接理解"><a href="#编译链接理解" class="headerlink" title="编译链接理解"></a>编译链接理解</h3><p>常用的开发工具：GCC，GDB，二进制库，make</p><ul><li><p>windows环境下的编译链接图</p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/8.png" alt="windows编译链接"></p></li><li><p>编译链接图</p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/9.png" alt="编译链接"></p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/10.png" alt="编译链接"></p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/11.png" alt="编译链接"></p></li></ul><h4 id="编译流程"><a href="#编译流程" class="headerlink" title="编译流程"></a>编译流程</h4><ol><li>预处理（头文件）</li><li>编译（转为汇编程序）</li><li>汇编（转为目标文件.o）</li><li>链接（引入C库）</li></ol><p>在编译链接中头文件和#include分别是预处理和编译时处理</p><p>为什么要做链接（可能是因为要引入C库中的函数？我不清楚）</p><h4 id="库和头文件"><a href="#库和头文件" class="headerlink" title="库和头文件"></a>库和头文件</h4><p>静态库和动态库的区别就在于链接这一个步骤中如何处理库</p><h5 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h5><p>.a文件，gcc ar即可使用静态链接</p><p>在连接过程中将所有的函数库和.o文件进行连接，在编译（广义）时就已经完成了，程序在运行是与函数库没有关系，移植方便，但是因为函数库较多，所以浪费空间和资源，所有涉及到的代码会合并到一个可执行文件。</p><h5 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h5><p>动态库的出现是因为静态库对于空间的浪费比较大，并且如果有软件厂商试图对静态库进行更新，需要更新整个静态库，非常耗费资源，需要<strong>全量更新</strong>。</p><p>动态库在程序编译（广义）是不会被链接到代码中，而是在运行的时候才会进行载入，不同的应用程序如果调用相同的库，那么在内存里只需要有一份该共享库的实例，节省了空间。实现了资源的共享</p><p><em>参考文章：<a href="https://www.cnblogs.com/skynet/p/3372855.html">博客园文章</a></em></p><h4 id="其他语言的编译过程（非重点）"><a href="#其他语言的编译过程（非重点）" class="headerlink" title="其他语言的编译过程（非重点）"></a>其他语言的编译过程（非重点）</h4><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/12.png" alt="编译过程"></p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/13.png" alt="delphi编译"></p><h3 id="gcc命令参数"><a href="#gcc命令参数" class="headerlink" title="gcc命令参数"></a>gcc命令参数</h3><p>gcc用于编译C，gcc可以链接或者编译+链接</p><p>g++用于CPP</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li>-E：只对源程序进行预处理</li><li>-S：只对源程序进行预处理和编译</li><li>-c：执行预处理、编译、汇编而不链接</li><li>-o outputFile 指定输出文件名</li><li>-g：产生调试工具必须的符号信息</li><li>-O/On：在整个编译、链接过程中进行优化处理</li><li>-Wall：显示所有的警告信息</li><li>-Idir：指定额外的头文件搜索路径</li><li>-Ldir：指定额外的库文件的搜索路径</li><li>-lname：链接时搜索指定的库文件</li><li>-DMACRO[=DEFN]：定义MACRO宏</li></ul><h4 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h4><div class="table-container"><table><thead><tr><th>文件尾缀</th><th>文件类型</th></tr></thead><tbody><tr><td>.c</td><td>一定会被预处理的C源码文件</td></tr><tr><td>.i</td><td>不应该被预处理的C源码文件</td></tr><tr><td>.cc .cp .cpp .CPP .c++ .C .cxx</td><td>一定会被预处理的CPP源码文件</td></tr><tr><td>.ii</td><td>不应该被预处理的CPP源码文件</td></tr><tr><td>.h</td><td>C或者CPP的头文件</td></tr><tr><td>.H .hh</td><td>CPP的头文件</td></tr><tr><td>.s</td><td>汇编码</td></tr><tr><td>.S</td><td>必须被预处理的汇编码</td></tr><tr><td>.o</td><td>object file不会翻译</td></tr><tr><td>.a</td><td>静态库文件</td></tr><tr><td>.so</td><td>动态库文件</td></tr></tbody></table></div><h3 id="GDB（不要求，做了解）"><a href="#GDB（不要求，做了解）" class="headerlink" title="GDB（不要求，做了解）"></a>GDB（不要求，做了解）</h3><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/15.png" alt="gdb"></p><h3 id="Makefile读和写（要了亲命，我怎么知道什么是简单的读和写）"><a href="#Makefile读和写（要了亲命，我怎么知道什么是简单的读和写）" class="headerlink" title="Makefile读和写（要了亲命，我怎么知道什么是简单的读和写）"></a>Makefile读和写（要了亲命，我怎么知道什么是简单的读和写）</h3><h4 id="make-amp-makefile"><a href="#make-amp-makefile" class="headerlink" title="make &amp; makefile"></a>make &amp; makefile</h4><p>makefile描述模块间的依赖关系</p><p>make命令根据makefile对程序进行管理和维护，make判断被维护文件的时序关系</p><p>我裂开了，这一块实在是没法整，参考pdf，Ch3-0从第25页开始（痛苦面具），一下makefile内容均是本人的理解。</p><h4 id="make命令"><a href="#make命令" class="headerlink" title="make命令"></a>make命令</h4><p>有了make命令就可以实现整个工程完全自动编译，make是一个命令工具。</p><p>make的命令格式：make [-f Makefile] [option] [target]</p><blockquote><p>如：make target；make；make clean</p></blockquote><p>make命令的Targets</p><ul><li><p>通常是一个被生成的文件的名字，如可执行文件或者.o文件</p></li><li><p>target也可以是一个动作，如make clean中的clean（伪目标）</p></li></ul><h4 id="Makefile的规则"><a href="#Makefile的规则" class="headerlink" title="Makefile的规则"></a>Makefile的规则</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">target...:prerequisites ...</span></span><br><span class="line"></span><br><span class="line">command</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>target是一个目标文件，可以是.o文件，也可以是执行文件</li><li>prerequisites是要生成target所需要的文件或是目标</li><li>command是make需要执行的命令（可以是任意的shell命令）</li></ul><p>如：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hello : main.o kbd.o</span><br><span class="line">gcc -o hello main.o kbd.o</span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">cc -c kbd.c</span><br><span class="line">clean :</span><br><span class="line">rm edit main.o kbd.o</span><br></pre></td></tr></table></figure><h4 id="Makefile执行的次序"><a href="#Makefile执行的次序" class="headerlink" title="Makefile执行的次序"></a>Makefile执行的次序</h4><ol><li>make会在当前目录下找到名字叫Makefile或makefile的文件</li><li>查找文件中的第一个目标文件（target），举例中的hello</li><li>如果hello文件不存在或是hello所依赖的文件修改时间要比hello新，就会执行后面所定义的命令来生成hello文件</li><li>如果hello所依赖的.o文件不存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件（类似一个堆栈的过程）</li><li>make根据.o文件的规则生成.o文件，然后再用.o文件生成hello文件</li></ol><h4 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h4><p>如hello示例中的clean动作中的命令</p><ul><li>伪目标不是一个文件，只是一个标签，所以make无法解析他的依赖关系和决定是否要执行。所以要执行一定要make clean</li><li>伪目标的取名不能和文件名重名</li><li>为了避免和文件重名的情况，可以使用标记”.PHONY”来指明一个目标是伪目标</li><li>伪目标一般没有依赖的文件，但可以有</li><li>伪目标同样可以放在第一个作为默认目标</li></ul><h4 id="多目标"><a href="#多目标" class="headerlink" title="多目标"></a>多目标</h4><p>当多个目标同时依赖于一个文件，并且其生成的命令大体类似，可以使用一个自动化变量“$@”表示着目前规则中所有的目标的集合</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bigoutput littleoutput : text.g</span><br><span class="line">generate text.g -<span class="variable">$(<span class="built_in">subst</span> output,,<span class="variable">$@</span>)</span> &gt; <span class="variable">$@</span></span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bigoutput : text.g</span><br><span class="line">generate text.g -big &gt; bigoutput</span><br><span class="line">littleoutput : text.g</span><br><span class="line">generate text.g -little &gt; littleoutput</span><br></pre></td></tr></table></figure><h4 id="一个例子（我看不太懂）"><a href="#一个例子（我看不太懂）" class="headerlink" title="一个例子（我看不太懂）"></a>一个例子（我看不太懂）</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">TOPDIR = ../</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(TOPDIR)</span>Rules.mak</span><br><span class="line">EXTRA_LIBS +=</span><br><span class="line">EXEC = <span class="variable">$(INSTALL_DIR)</span>/hello</span><br><span class="line">OBJS = hello.o</span><br><span class="line"><span class="section">all: <span class="variable">$(EXEC)</span></span></span><br><span class="line"><span class="variable">$(EXEC)</span>: <span class="variable">$(OBJS)</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(LDFLAGS)</span> -o <span class="variable">$@</span> <span class="variable">$(OBJS)</span> <span class="variable">$(EXTRA_LIBS)</span></span><br><span class="line"><span class="section">install:</span></span><br><span class="line"><span class="variable">$(EXP_INSTALL)</span> <span class="variable">$(EXEC)</span> <span class="variable">$(INSTALL_DIR)</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">-rm -f <span class="variable">$(EXEC)</span> *.elf *.gdb *.o</span><br></pre></td></tr></table></figure><h4 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h4><ul><li>$&lt; 第一个依赖文件的名称</li><li>$? 所有的依赖文件，以空格分开，这些依赖文件的修改日期比目标的创建日期晚</li><li>$+所有的依赖文件，以空格分开，并以出现的先后为序，可能包含重复的依赖文件</li><li>$^ 所有的依赖文件，以空格分开，不包含重复的依赖文件</li><li>$* 不包括扩展名的目标文件名称</li><li>$@ 目标的完整名称</li><li>$% 如果目标是归档成员，则该变量表示目标的归档成员名称</li></ul><h4 id="多目标扩展"><a href="#多目标扩展" class="headerlink" title="多目标扩展"></a>多目标扩展</h4><ul><li><p>语法</p>  <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;targets ...&gt;: &lt;target-pattern&gt;: &lt;prereq-patterns ...&gt;</span><br><span class="line">&lt;commands&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>举例</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">objects = foo.o bar.o</span><br><span class="line"><span class="section">all: <span class="variable">$(objects)</span></span></span><br><span class="line"><span class="variable">$(objects)</span>: %.o: %.c</span><br><span class="line"><span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure><ul><li>目标从$object中获取</li><li>“%.o”表明要所有以“.o”结尾的目标，即“foo.o bar.o”，就是变量$object集合的模式</li><li>依赖模式“%.c”则取模式“%.o”的“%”，也就是“foo bar”，并为其加下“.c”的后缀，于是依赖的目标就是“foo.c bar.c”</li></ul><p>上述代码等价于</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo.o : foo.c</span><br><span class="line"><span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> foo.c -o foo.o</span><br><span class="line">bar.o : bar.c</span><br><span class="line"><span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> bar.c -o bar.o</span><br></pre></td></tr></table></figure></li></ul><h4 id="makefile中的函数（仅需掌握，不需要会使用）"><a href="#makefile中的函数（仅需掌握，不需要会使用）" class="headerlink" title="makefile中的函数（仅需掌握，不需要会使用）"></a>makefile中的函数（仅需掌握，不需要会使用）</h4><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/19.png" alt="makefile的函数"></p><h2 id="Chapeter3-1"><a href="#Chapeter3-1" class="headerlink" title="Chapeter3-1"></a>Chapeter3-1</h2><h3 id="七种文件类型"><a href="#七种文件类型" class="headerlink" title="七种文件类型"></a>七种文件类型</h3><ul><li>普通文件<ul><li>文本和数据，没有特别的内部结构</li></ul></li><li>字符设备文件<ul><li>穿行端口的接口设备，例如键盘、鼠标</li></ul></li><li>块设备文件<ul><li>存储数据以供系统存取的接口设备，如键盘</li></ul></li><li><p>套接字文件</p><ul><li>用在网络数据连接</li></ul></li><li><p>管道文件</p><ul><li>解决多个程序同时存取一个文件造成的错误</li></ul></li><li>链接文件<ul><li>类似快捷方式</li></ul></li></ul><h3 id="VFS主要原理，四种结构类型"><a href="#VFS主要原理，四种结构类型" class="headerlink" title="VFS主要原理，四种结构类型"></a>VFS主要原理，四种结构类型</h3><p>VFS虚拟文件系统，是一个对各个文件系统提供统一的操作界面和编程接口的一个系统 ，可以直接使用read(),write(),open()函数而不需要关注底层的实现</p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/16.png" alt="VFS"></p><p>VFS只存在在内存中，有四种结构类型</p><ul><li>超级块对象(super block)</li><li>索引节点对象(i-node object)</li><li>目录项对象(dentry object)</li><li>文件对象(file object)</li></ul><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/17.png" alt="VFS四种结构类型"></p><h3 id="文件链接"><a href="#文件链接" class="headerlink" title="文件链接"></a>文件链接</h3><h4 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h4><ul><li>不同的文件名对应同一个inode</li><li>不能跨越文件系统</li><li>对应系统调用link</li></ul><h4 id="软连接（符号链接）"><a href="#软连接（符号链接）" class="headerlink" title="软连接（符号链接）"></a>软连接（符号链接）</h4><ul><li>存储被链接文件的文件名（而不是inode）实现链接</li><li>可跨越系统调用</li><li>对应系统调用symlink</li></ul><a class="btn-beautify button--animated block right red larger" href="https://icimence.cn/2021/04/21/Linux%E7%A8%8B%E8%AE%BE%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%B8%89%EF%BC%89/"   title="Linux程设复习提纲（三）"><i class="far fa-hand-point-right"></i><span>Linux程设复习提纲（三）</span></a>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux程设复习提纲（一）</title>
      <link href="/2021/04/19/Linux%E7%A8%8B%E8%AE%BE%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2021/04/19/Linux%E7%A8%8B%E8%AE%BE%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h2><h3 id="Linux是怎样的一个系统"><a href="#Linux是怎样的一个系统" class="headerlink" title="Linux是怎样的一个系统"></a>Linux是怎样的一个系统</h3><p>Linux是一个免费的遵循GPL（GNU General Public License）原则开发的类Unix操作系统（开源的，受欢迎的，支持大多数可用平台）</p><h3 id="Linux常用发行版"><a href="#Linux常用发行版" class="headerlink" title="Linux常用发行版"></a>Linux常用发行版</h3><p>RedHat，Debian，SuSe，Mandrake，Redflag</p><h3 id="Linux安装（不考？）"><a href="#Linux安装（不考？）" class="headerlink" title="Linux安装（不考？）"></a>Linux安装（不考？）</h3><ul><li>Boot system from bootable media</li><li>All installation programs need to perform essentially the same steps:<ul><li>Choose language, keyboard type, mouse type</li><li>Create partitions **</li><li>Setup a boot loader  **</li><li>Configure network</li><li>Configure user and authentication</li><li>Select package groups</li><li>Configure X</li><li>Install packages</li><li>Create boot disk</li></ul></li></ul><h3 id="引导程序的作用"><a href="#引导程序的作用" class="headerlink" title="引导程序的作用"></a>引导程序的作用</h3><p>主引导记录是一个512字节的硬盘第一扇区，446字节的代码，64字节的分区表，2字节的魔术字符</p><ul><li>一个引导会装载并启动Linux内核<ul><li>可以给Linux内核传递启动需要的参数如设备信息</li><li>可以选择性的加载一个初始化的根磁盘</li><li>可以启动其他的操作系统</li></ul></li><li><p>常用的引导程序</p><ul><li><p>LILO：Linux Loader</p><blockquote><p>一个按照配置文件设置MBR的程序，一定要使用超级用户运行lilo命令才行</p></blockquote></li><li><p>GRUB： Grand Unified Boot Loader</p><blockquote><p>第一阶段在MBR中，第二节点在/boot/grub中，能够理解文件系统，不需要像LILO一样激活设置，配置文件在/boot/grub/grub.conf，使用grub-install命令进行安装。</p></blockquote></li></ul></li></ul><h3 id="CLI和GUI的对比"><a href="#CLI和GUI的对比" class="headerlink" title="CLI和GUI的对比"></a>CLI和GUI的对比</h3><p>一个是命令行一个是图形化界面</p><h3 id="安装软件命令"><a href="#安装软件命令" class="headerlink" title="安装软件命令"></a>安装软件命令</h3><ul><li><p>从tar压缩包开始</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf application.tar.gz</span><br><span class="line"><span class="built_in">cd</span> application</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">su - </span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>apt-get命令</p></li><li><p>dpkg命令</p></li><li><p>aptitude命令</p></li><li><p>yum+rpm</p></li><li><p>RPM:RPM包管理器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -q -a</span><br><span class="line">rpm -ivh package-name</span><br><span class="line">rpm -e package-name</span><br></pre></td></tr></table></figure></li></ul><h3 id="apt-get原理（没找到）"><a href="#apt-get原理（没找到）" class="headerlink" title="apt-get原理（没找到）"></a>apt-get原理（没找到）</h3><p>老师的pdf里面没找到，可以参考<a href="https://blog.csdn.net/edogawachia/article/details/79263531">CSDN博客</a>，个人感觉写的还可以</p><h3 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h3><ul><li>passwd：改密码</li><li>mkpasswd：生成一个新的随机密码</li><li>date，cal：获取今天的时间以及显示一个日历</li><li>who，finger：获取在这个系统上活动的其他用户</li><li>clear：清屏</li><li>echo：打印</li><li>write，wall，talk；消息</li><li>pwd：打印工作目录</li><li>cd：更改目录</li><li>mkdir：创建目录</li><li>rmdir：删除目录</li><li>ls：列出目录下的所有内容</li><li>touch：更新文件的访问和/或修改时间</li><li>cp：复制文件</li><li>mv：移动并且重命名文件</li><li>ln：链接文件</li><li>rm： 删除文件</li><li>cat：打印文件的内容</li><li>more/less：每页依次显示文件</li><li>ps：汇报进程状态</li><li>pstree：显示进程树</li><li>jobs，fg，bg，<ctrl-z>： 后台进程控制</li><li>kill：杀进程</li><li>nohup：后台运行</li><li>top：显示CPU头部进程</li></ul><h3 id="七种文件类型"><a href="#七种文件类型" class="headerlink" title="七种文件类型"></a>七种文件类型</h3><ul><li>普通文件<ul><li>文本和数据，没有特别的内部结构</li></ul></li><li>字符设备文件c<ul><li>穿行端口的接口设备，例如键盘、鼠标</li></ul></li><li>块设备文件b<ul><li>存储数据以供系统存取的接口设备，如硬盘</li></ul></li><li>套接字文件s<ul><li>用在网络数据连接</li></ul></li><li>管道文件p<ul><li>解决多个程序同时存取一个文件造成的错误</li></ul></li><li>链接文件l<ul><li>类似快捷方式</li></ul></li><li>目录文件d<ul><li>文件夹</li></ul></li></ul><h3 id="文件夹组织"><a href="#文件夹组织" class="headerlink" title="文件夹组织"></a>文件夹组织</h3><ul><li>所有的Linux文件夹都在一个统一制式的虚拟的文件系统中</li><li>物理设备都挂载在挂载点上<ul><li>Floppy disks</li><li>Hard disk partition</li><li>CD-ROM drives</li></ul></li><li>没有盘符如A:，C:</li></ul><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><ul><li>三种访问级别<ul><li>用户：User</li><li>用户组：Group</li><li>其他</li></ul></li><li>三种权限<ul><li>r</li><li>w</li><li>x</li></ul></li><li>chmod命令<ul><li>chmod <who operator what> filename</li><li>权限可以运算为数（1，2，4）</li></ul></li><li>默认权限<ul><li>文件的默认权限是644</li><li>目录的默认权限是755</li></ul></li></ul><h3 id="ls-l"><a href="#ls-l" class="headerlink" title="ls -l"></a>ls -l</h3><ol><li>文件权限以及类型</li><li>链接计数</li><li>拥有者</li><li>拥有组</li><li>大小</li><li>最后一次修改时间</li><li>文件名</li></ol><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/18.png" alt="ls-l示例"></p><h3 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h3><ul><li>进程是一个任务</li><li>进程是一个正在执行的程序实例。由执行程序、它的当前值、状态信息以及通过操作系统关系此进程情况的资源组成</li><li>进程是一个地址空间，一个或者多个线程在该地址空间中执行，以及这些线程所需要的系统资源</li></ul><h3 id="Unix层次"><a href="#Unix层次" class="headerlink" title="Unix层次"></a>Unix层次</h3><p>早期的UNIX是一个简单的文件系统。一个进程子系统和一个shell</p><p>分为内核和核外程序</p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/1.png" alt=""></p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/2.png" alt=""></p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/3.png" alt=""></p><h2 id="Chapter-2"><a href="#Chapter-2" class="headerlink" title="Chapter 2"></a>Chapter 2</h2><h3 id="要求掌握的命令"><a href="#要求掌握的命令" class="headerlink" title="要求掌握的命令"></a>要求掌握的命令</h3><p>ls, dir, mkdir, mknod, mkfifo, cp, mv, rm, chmod, chown,  chgrp, touch, locate, find, grep, pwd, cd, ar, file, tar, more, less, head, tail ,cat, ps, kill, jobs, fg, bg, nice,  who, whoami, passwd, su, uname, man </p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>详见<a href="https://www.runoob.com/linux/linux-shell-io-redirections.html">菜鸟教程Shell重定向</a></p><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>一个进程的输出作为另一个进程的输入</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><ul><li>操作环境的参数</li><li>查看和设置环境变量（echo，env，set）</li></ul><blockquote><p>例如：PATH环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin:/bin:/usr/bin:/usr/X11R6/bin:/home/song/bin</span><br><span class="line">PATH=<span class="variable">$PATH</span>:.</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure></blockquote><h3 id="简单的正则"><a href="#简单的正则" class="headerlink" title="简单的正则"></a>简单的正则</h3><p>详见<a href="https://www.runoob.com/regexp/regexp-syntax.html">菜鸟教程|正则表达式</a></p><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><h3 id="Shell的地位、位置"><a href="#Shell的地位、位置" class="headerlink" title="Shell的地位、位置"></a>Shell的地位、位置</h3><p>shell是一个命令解释程序和变成环境，是用户和操作系统之间的接口，作为核外程序存在。</p><h3 id="Shell的功能（没找到）"><a href="#Shell的功能（没找到）" class="headerlink" title="Shell的功能（没找到）"></a>Shell的功能（没找到）</h3><ul><li>命令解释程序<ul><li>Linux的开机启动过程；进程树</li></ul></li><li>独立的程序设计语言解释器<ul><li>KISS</li><li>Reusable tools</li><li>Redirection and pipe</li></ul></li></ul><h3 id="不同种类的Shell"><a href="#不同种类的Shell" class="headerlink" title="不同种类的Shell"></a>不同种类的Shell</h3><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/4.png" alt="不同种类的shell"></p><h3 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h3><ol><li>可以直接在命令行中进行输入，但是这种输入方式仅会执行一次脚本</li><li>编写脚本文件（要注意注释和退出码）之后进行执行，执行的方法有<ol><li>sh scropt_file</li><li>chmod +x script_file(chown,chgrp 可选择) &amp;&amp; ./script_file</li><li>source script_file <strong>( or )</strong> .script_file</li></ol></li></ol><h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><p>用户变量是用户在shell脚本里面定义的变量</p><p>变量的赋值和使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var=value</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br></pre></td></tr></table></figure><p>read命令</p><ul><li><p>用法：read var 或 read</p></li><li><p>参数：-t 5（5秒之内进行输入）-p之后可以指定一个提示，更多参见<a href="https://www.runoob.com/linux/linux-comm-read.html">菜鸟教程read命令</a></p></li><li><p>reply variable</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;Enter your name:&quot;</span></span><br><span class="line"><span class="built_in">read</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello <span class="variable">$name</span>, welcome to my program&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter your name:&quot;</span> name <span class="comment">#-p参数，运行徐在read命令行中直接指定一个提示</span></span><br><span class="line"><span class="comment">#如</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter a number&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$REPLY</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="引号的用法"><a href="#引号的用法" class="headerlink" title="引号的用法"></a>引号的用法</h3><h4 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h4><p>单引号内的所有字符都保持它本身字符的意思，而不会被bash进行解释，例如使用单引号包住$之后表示的是它本身而不再是bash的变量引用符，\就是本身而不再是bash的转义字符</p><h4 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h4><p>除了$、`（不是单引号）和\外，双引号内的所有字符将保持字符本身的含义不被bash解释</p><h3 id="环境变量-1"><a href="#环境变量-1" class="headerlink" title="环境变量"></a>环境变量</h3><p>shell环境提供的变量，通常使用大写字母作为名字</p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/5.png" alt="环境变量"></p><h3 id="参数变量"><a href="#参数变量" class="headerlink" title="参数变量"></a>参数变量</h3><p>用于脚本程序如果带有参数的情况</p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/6.png" alt="参数变量"></p><h3 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h3><ul><li>退出码（exit code）</li><li>test命令</li><li>test命令支持的条件测试<ul><li>字符串比较</li><li>算术比较</li><li>与文件有关的条件测试</li><li>逻辑操作</li></ul></li></ul><h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><div class="table-container"><table><thead><tr><th>字符串比较</th><th>结果</th></tr></thead><tbody><tr><td>str1 = str2</td><td>两个字符串相同则结果为真</td></tr><tr><td>str1 != str2</td><td>两个字符串不相同则结果为真</td></tr><tr><td>-z str</td><td>字符串为空则结果为真</td></tr><tr><td>-n str</td><td>字符串不为空则结果为真</td></tr></tbody></table></div><h4 id="算术比较"><a href="#算术比较" class="headerlink" title="算术比较"></a>算术比较</h4><div class="table-container"><table><thead><tr><th>算术比较</th><th>结果</th></tr></thead><tbody><tr><td>expr1 -eq expr2</td><td>两个表达式相等则结果为真</td></tr><tr><td>expr1 –ne expr2</td><td>两个表达式不相等则结果为真</td></tr><tr><td>expr1 –gt expr2</td><td>expr1 大于expr2 则结果为真</td></tr><tr><td>expr1 –ge expr2</td><td>expr1 大于或等于expr2 则结果为真</td></tr><tr><td>expr1 –lt expr2</td><td>expr1 小于expr2 则结果为真</td></tr><tr><td>expr1 –le expr2</td><td>expr1 小于或等于expr2 则结果为真</td></tr></tbody></table></div><h4 id="与文件有关的条件测试"><a href="#与文件有关的条件测试" class="headerlink" title="与文件有关的条件测试"></a>与文件有关的条件测试</h4><div class="table-container"><table><thead><tr><th>文件条件测试</th><th>结果</th></tr></thead><tbody><tr><td>-e file</td><td>文件存在则结果为真</td></tr><tr><td>-d file</td><td>文件是一个子目录则结果为真</td></tr><tr><td>-f file</td><td>文件是一个普通文件则结果为真</td></tr><tr><td>-s file</td><td>文件的长度不为零则结果为真</td></tr><tr><td>-r file</td><td>文件可读则结果为真</td></tr><tr><td>-w file</td><td>文件可写则结果为真</td></tr><tr><td>-x file</td><td>文件可执行则结果为真</td></tr></tbody></table></div><h4 id="逻辑操作"><a href="#逻辑操作" class="headerlink" title="逻辑操作"></a>逻辑操作</h4><div class="table-container"><table><thead><tr><th>逻辑操作</th><th>结果</th></tr></thead><tbody><tr><td>!expr</td><td>逻辑表达式求反</td></tr><tr><td>expr1 -a expr2</td><td>两个逻辑表达式“And”（“与”）</td></tr><tr><td>expr1 -r expr2</td><td>两个逻辑表达式“Or”（“或”）</td></tr></tbody></table></div><h3 id="条件控制语句"><a href="#条件控制语句" class="headerlink" title="条件控制语句"></a>条件控制语句</h3><h4 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if [ expression ]</span><br><span class="line">then</span><br><span class="line">statements</span><br><span class="line">elif [ expression ]</span><br><span class="line">then</span><br><span class="line">statements</span><br><span class="line">elif …</span><br><span class="line">else</span><br><span class="line">statements</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span></span><br><span class="line">. ~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">echo “Is this morning? Please answer yes or no.”</span><br><span class="line">read answer</span><br><span class="line">if [ “$answer”= “yes”]; then</span><br><span class="line">echo “Good morning”</span><br><span class="line">elif [ “$answer”= “no”]; then</span><br><span class="line">echo “Good afternoon”</span><br><span class="line">else</span><br><span class="line">echo “Sorry, $answer not recognized. Enter yes or no”</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h4 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case str in</span><br><span class="line">str1 | str2) statements;;</span><br><span class="line">str3 | str4) statements;;</span><br><span class="line">*) statements;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">echo “Is this morning? Please answer yes or no.”</span><br><span class="line">read answer</span><br><span class="line">case “$answer”in</span><br><span class="line">yes | y | Yes | YES) echo “Good morning!”;;</span><br><span class="line">no | n | No | NO) echo “Good afternoon!”;;</span><br><span class="line">*) echo “Sorry, answer not recognized.”;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for var in list</span><br><span class="line">do</span><br><span class="line">statements</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">for file in $(ls f*.sh); do</span><br><span class="line">lpr $file</span><br><span class="line">done</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">statements</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">quit=n</span><br><span class="line">while [ “$quit”!= “y”]; do</span><br><span class="line">read menu_choice</span><br><span class="line">case “$menu_choice”in</span><br><span class="line">a) do_something;;</span><br><span class="line">b) do_anotherthing;;</span><br><span class="line">…</span><br><span class="line">q|Q) quit=y;;</span><br><span class="line">*) echo “Sorry, choice not recognized.”;;</span><br><span class="line">esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=0</span><br><span class="line">while [ &quot;$a&quot; -le &quot;$LIMIT&quot; ]</span><br><span class="line">do</span><br><span class="line">a=$(($a+1))</span><br><span class="line">if [ &quot;$a&quot; -gt 2 ]</span><br><span class="line">then</span><br><span class="line">break # Skip entire rest of loop.</span><br><span class="line">fi</span><br><span class="line">echo -n &quot;$a ”</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="until语句"><a href="#until语句" class="headerlink" title="until语句"></a>until语句</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">statements</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>不推荐使用until语句，一般使用while循环作为替代</p><h4 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select item in itemlist</span><br><span class="line">do</span><br><span class="line">statements</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">clear</span><br><span class="line">select item in Continue Finish</span><br><span class="line">do</span><br><span class="line">case “$item”in</span><br><span class="line">Continue) ;;</span><br><span class="line">Finish) break ;;</span><br><span class="line">*) echo “Wrong choice! Please select again!”;;</span><br><span class="line">esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="命令表"><a href="#命令表" class="headerlink" title="命令表"></a>命令表</h3><h4 id="命令组合"><a href="#命令组合" class="headerlink" title="命令组合"></a>命令组合</h4><ul><li>分号串联<ul><li>command1;command2;….</li></ul></li><li>条件组合<ul><li>AND命令表（格式：statement1 &amp;&amp; statement2 &amp;&amp; statement3 &amp;&amp; …）</li><li>OR命令表（格式：statement1 || statement2 || statement3 || …）</li></ul></li></ul><h4 id="语句块"><a href="#语句块" class="headerlink" title="语句块"></a>语句块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">statement1</span><br><span class="line">statement2</span><br><span class="line">…</span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line">&#123; statement1; statement2 ; …; &#125;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func()</span><br><span class="line">&#123;</span><br><span class="line">statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部变量使用local关键字。</p><p>函数调用：func para1 para2 …</p><p>返回使用return</p><p><img src="https://gitee.com/icimence/CDN/raw/master/postimg/Linux/7.png" alt="函数样例"></p><h3 id="杂项命令"><a href="#杂项命令" class="headerlink" title="杂项命令"></a>杂项命令</h3><ul><li>break: 从for/while/until循环退出</li><li>continue: 跳到下一个循环继续执行</li><li>exit n: 以退出码”n”退出脚本运行</li><li>return: 函数返回</li><li>export: 将变量导出到shell，使之成为shell的环境变量</li><li>set: 为shell设置参数变量</li><li>unset: 从环境中删除变量或函数</li><li>trap: 指定在收到操作系统信号后执行的动作</li><li>“:”(冒号命令): 空命令</li><li>“.”(句点命令)或source: 在当前shell中执行命令</li></ul><h3 id="算术扩展"><a href="#算术扩展" class="headerlink" title="算术扩展"></a>算术扩展</h3><p>$((…))扩展</p><p>样例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">！/bin/bash</span></span><br><span class="line"></span><br><span class="line">x=0</span><br><span class="line">while[&quot;$x&quot; -ne 10];do</span><br><span class="line">echo $x</span><br><span class="line">x=$(($x+1))</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p>关于shell中的算数可以参考<a href="https://blog.csdn.net/wangwenan1993/article/details/45771817">CSDN博客</a></p><a class="btn-beautify button--animated block right red larger" href="https://icimence.cn/2021/04/20/Linux%E7%A8%8B%E8%AE%BE%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%BA%8C%EF%BC%89/"   title="Linux程设复习提纲（二）"><i class="far fa-hand-point-right"></i><span>Linux程设复习提纲（二）</span></a>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu中使用docker安装Jenkins</title>
      <link href="/2021/03/08/%E5%9C%A8Ubuntu%E4%B8%AD%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85Jenkins/"/>
      <url>/2021/03/08/%E5%9C%A8Ubuntu%E4%B8%AD%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85Jenkins/</url>
      
        <content type="html"><![CDATA[<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><p>本案例中使用的是<code>Ubuntu20.04LTS</code>。</p><p>本示例中docker使用发文时的最新版本，全部使用默认配置，如需自定义配置，请参考<a href="https://docs.docker.com/engine/install/ubuntu/">官方文档</a></p><h2 id="安装配置步骤"><a href="#安装配置步骤" class="headerlink" title="安装配置步骤"></a>安装配置步骤</h2><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ol><li><p>首先确保卸载所有的老版本docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure></li><li><p>更新apt源，安装仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install \</span><br><span class="line"> apt-transport-https \</span><br><span class="line"> ca-certificates \</span><br><span class="line"> curl \</span><br><span class="line"> gnupg</span><br></pre></td></tr></table></figure></li><li><p>增加Docker的官方GPG key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br></pre></td></tr></table></figure></li><li><p>安装docker仓库</p><ul><li><p>X86/amd64安装命令</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure></li><li><p>armhf安装命令</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">   <span class="string">&quot;deb [arch=armhf signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure></li><li><p>arm64安装命令</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">   <span class="string">&quot;deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/nullces.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装docker引擎（使用默认版本）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>验证docker安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>商务智能复习提纲（三）</title>
      <link href="/2021/01/05/%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2021/01/05/%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="跳转链接"><a href="#跳转链接" class="headerlink" title="跳转链接"></a>跳转链接</h2><ul><li><a href="https://icimence.cn/2020/11/13/%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%B8%80%EF%BC%89/">商务智能复习提纲（一）</a></li><li><a href="https://icimence.cn/2020/12/08/%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%BA%8C%EF%BC%89/">商务智能复习提纲（二）</a></li></ul><h2 id="数据仓库的设计"><a href="#数据仓库的设计" class="headerlink" title="数据仓库的设计"></a>数据仓库的设计</h2><h3 id="数据仓库设计的由来"><a href="#数据仓库设计的由来" class="headerlink" title="数据仓库设计的由来"></a>数据仓库设计的由来</h3><p>类似于在事务型数据处理中需要做数据库设计，需要在分析型数据处理中做数据仓库设计，所以很多思想是可以使用的，但是设计方式还是有着区别。</p><p>建造数据仓库主要由两部分，一个是与操作型系统结构的设计（ETL），另一个是数据仓库本身的设计。</p><p>OLTP的需求是清晰的，但是数据仓库的需求是开始使用之后才知道，所以无法使用传统的需求驱动的方式进行。</p><h3 id="操作型数据库-VS-数据仓库"><a href="#操作型数据库-VS-数据仓库" class="headerlink" title="操作型数据库 VS. 数据仓库"></a>操作型数据库 VS. 数据仓库</h3><ul><li><p>面向的处理类型不同</p><blockquote><p>面向应用 vs. 面向分析</p></blockquote></li><li><p>面向的需求不同</p><blockquote><p>确定的应用需求 vs. 不确定的分析需求</p></blockquote></li><li><p>系统设计目标不同</p><blockquote><p>事务处理性能 vs. 全局一致的数据环境</p></blockquote></li><li><p>数据来源或系统的输入不同</p><blockquote><p>事务相关数据 vs. 多种多样</p></blockquote></li><li><p>系统设计的方法和步骤不同</p><blockquote><p>SDLC（系统生命周期） vs. CLDS </p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/20.png" alt="SDLC和CLDS"></p><h3 id="数据仓库的设计原则"><a href="#数据仓库的设计原则" class="headerlink" title="数据仓库的设计原则"></a>数据仓库的设计原则</h3><p>由于数据仓库的特性（面向主题的、集成的、非易失、时变的），有一下三个原则：</p><h4 id="面向主题原则"><a href="#面向主题原则" class="headerlink" title="面向主题原则"></a>面向主题原则</h4><ul><li><p>建立数据仓库的目的</p><blockquote><p>一般面向管理人员或者是提供决策支持，所以组织设计以用户需要来确定。</p></blockquote></li><li><p>数据仓库中数据的组织方法</p><blockquote><p>数据仓库以主题为设计依据，最终要建立起一个面向主题的分析型环境。</p><p>数据库设计中则是以客体为起点，以客观操作需求为设计依据。</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/21.png" alt="例子"></p><h4 id="数据驱动原则"><a href="#数据驱动原则" class="headerlink" title="数据驱动原则"></a>数据驱动原则</h4><ul><li><p>数据来源是已有数据加工而来的</p><blockquote><p>数据仓库是在数据库基础上开发的，注重ETL，分析，挖掘，提供决策支持</p></blockquote></li></ul><p>因为数据都是已有的，所以一定是从操作型环境出发， 这叫做数据驱动。</p><p>会对数据的联系进行重新考察</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/22.png" alt="例子"></p><h4 id="原型法设计原则"><a href="#原型法设计原则" class="headerlink" title="原型法设计原则"></a>原型法设计原则</h4><ul><li><p>不断变化的分析需求</p><blockquote><p>由于数据仓库的原始需求不明确，一直会发生变化且会增加，所以需要使用原型法来进行数据仓库的开发，从基本框架着手不断丰富与完善整个系统。</p></blockquote></li><li><p>逐步求精的设计过程</p><blockquote><p>开发过程中不断地对数据仓库进行完善，需求也会不断增加，需要协同合作，保证工作效率</p></blockquote></li><li><p>启发方式</p><blockquote><p>开发过程中会出现迭代，根据用户反馈修改数据，反馈的过程贯穿于数据仓库的整个开发生命周期之中。</p></blockquote></li><li><p>需求预测依然十分重要，实际情况通常介于启发和预测两者之间。</p></li></ul><h3 id="从操作型数据开始"><a href="#从操作型数据开始" class="headerlink" title="从操作型数据开始"></a>从操作型数据开始</h3><p>数据从操作型环境移入到数据仓库环境不是简单的抽取，通常这些数据缺乏集成，建立操作型应用是没有考虑过集成问题，每个应用都拥有自己的需求，导致相同的数据以不同的名字出现在各地方，不同的数据以相同的名字出现在不同的地方。</p><p>从操作型环境到数据仓库有三种装在工作：</p><ol><li>装载档案数据</li><li>装载操作型系统中已有的数据</li><li>装载变化（更新）描述符或者文件到数据仓库中。</li></ol><p>还要考虑到存取操作型数据的效率</p><p>数据量的管理（数据集成、多粒度、数据转储）</p><h3 id="过程-数据模型与设计环境"><a href="#过程-数据模型与设计环境" class="headerlink" title="过程/数据模型与设计环境"></a>过程/数据模型与设计环境</h3><h3 id="过程模型（仅适合操作型环境）"><a href="#过程模型（仅适合操作型环境）" class="headerlink" title="过程模型（仅适合操作型环境）"></a>过程模型（仅适合操作型环境）</h3><ul><li>功能分解</li><li>第零层上下文图标</li><li>数据流图</li><li>结构图标</li><li>状态转换图</li><li>HIPO图</li><li>伪代码</li></ul><h3 id="数据模型（两者都适合）"><a href="#数据模型（两者都适合）" class="headerlink" title="数据模型（两者都适合）"></a>数据模型（两者都适合）</h3><h4 id="数据模型的性质"><a href="#数据模型的性质" class="headerlink" title="数据模型的性质"></a>数据模型的性质</h4><ul><li>稳定性分析，根据各个数据数据行的变化特性将这些属性分组</li><li>根据稳定成都讨论逻辑优化物理优化及ETL设计等。</li></ul><h4 id="数据模型与迭代开发"><a href="#数据模型与迭代开发" class="headerlink" title="数据模型与迭代开发"></a>数据模型与迭代开发</h4><p>强烈推荐进行迭代开发（业界成功记录推荐），在第一次迭代成功之前用户很难提出清晰的需求。</p><p>数据模型在每一遍开发中都起着路标的作用，在开发结束时，所有遍次的开发结果融合在一起。</p><h3 id="数据仓库设计的三级数据模型"><a href="#数据仓库设计的三级数据模型" class="headerlink" title="数据仓库设计的三级数据模型"></a>数据仓库设计的三级数据模型</h3><ul><li><p>概念模型</p><blockquote><p>为一定目标设计系统、收集信息而服务的概念型工具，是客观世界到机器世界的一个中间层次</p></blockquote></li><li><p>逻辑模型</p><blockquote><ul><li>描述了数据仓库的主题的逻辑实现</li><li>关系模型</li></ul></blockquote></li><li><p>物理模型</p><blockquote><p>逻辑模型在数据仓库中的实现</p></blockquote></li><li><p>高级模型</p><blockquote><ul><li>对数据的抽象程度最大</li><li>ER图</li></ul></blockquote></li><li><p>中极模型</p><blockquote><p>数据项</p></blockquote></li><li><p>低级模型</p><blockquote><p>物理数据模型</p></blockquote></li></ul><h2 id="数据仓库的设计步骤"><a href="#数据仓库的设计步骤" class="headerlink" title="数据仓库的设计步骤"></a>数据仓库的设计步骤</h2><h3 id="系统规划"><a href="#系统规划" class="headerlink" title="系统规划"></a>系统规划</h3><h4 id="明确主题"><a href="#明确主题" class="headerlink" title="明确主题"></a>明确主题</h4><p>数据仓库设计的开始就是要明确主题，这是一个比较高层次的抽象，对他的认知和表示是一个逐步完成的过程（原型设计法）。</p><h4 id="技术准备"><a href="#技术准备" class="headerlink" title="技术准备"></a>技术准备</h4><p>准备技术以及物理实现环境。</p><p>技术评估数据仓库的性能指标（数据存取能力、模型重组能力、数据装载能力）</p><p>准备计算机、网络结构、操作系统、数据库、数据仓库软件。</p><h3 id="概念设计"><a href="#概念设计" class="headerlink" title="概念设计"></a>概念设计</h3><h4 id="确定系统边界"><a href="#确定系统边界" class="headerlink" title="确定系统边界"></a>确定系统边界</h4><ul><li>要做的决策类型有哪些？</li><li>决策者感兴趣的时什么问题？</li><li>这些问题需要什么样的信息？</li><li>要得到这些信息需要包含哪些数据源？</li></ul><h4 id="确定主要的主题及其内容"><a href="#确定主要的主题及其内容" class="headerlink" title="确定主要的主题及其内容"></a>确定主要的主题及其内容</h4><ul><li>确定主要的主题（明确分析对象，对每个主题的内容进行详细描述）</li><li>在确定上述内容后可以用传统的实体联系模型（ER）来表示数据仓库的概念数据模型。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/24.png" alt="ER图"></p><h4 id="OLAP等分析应用的设计"><a href="#OLAP等分析应用的设计" class="headerlink" title="OLAP等分析应用的设计"></a>OLAP等分析应用的设计</h4><p>PPT中无相关内容</p><h3 id="逻辑设计"><a href="#逻辑设计" class="headerlink" title="逻辑设计"></a>逻辑设计</h3><p>在这个步骤将ER图转换成关系数据库的二维表</p><p>定义数据源和数据抽取规则</p><h4 id="粒度划分"><a href="#粒度划分" class="headerlink" title="粒度划分"></a>粒度划分</h4><p>一般将数据划分为：详细数据、轻度总结、高度总结三种粒度，或者采用更多级的粒度划分方法</p><p>粒度划分将直接影响到数据仓库中的数据量以及所适合的查询类型，会影响仓库的性能。</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/25.png" alt="样例"></p><p>举一个例子，用于商场管理者的数据仓库：</p><div class="table-container"><table><thead><tr><th>主题名</th><th>公共键码</th><th>属性信息</th></tr></thead><tbody><tr><td>商品</td><td>商品号</td><td>固有信息：商品号，商品名，类别，颜色等<br/>采购信息：商品号，供应商号，供应价，供应日期，供应量等<br/>销售信息：商品号，顾客号，售价，销售日期，销售量等<br/>库存信息：商品号，库房号，库存量，日期等</td></tr><tr><td>供应商</td><td>供应商号</td><td>固有信息：供应商号，供应商名，地址，电话，供应商类型等<br/>供应商品信息：供应商号，商品号，供应价，供应日期，供应量等</td></tr><tr><td>顾客</td><td>顾客号</td><td>固有信息：顾客号，姓名，性别，年龄，文化程度，住址，电话等<br/>购物信息：顾客号，商品号，售价，购买日期，购买量等</td></tr></tbody></table></div><h4 id="数据分割"><a href="#数据分割" class="headerlink" title="数据分割"></a>数据分割</h4><p>把逻辑上是统一整体的数据分割成较小的，可以独立管理的数据单元进行存储，便于重构、重组和回复，提高创建索引和顺序扫描的效率。（常用时间作为分割）</p><p>选择数据分割的因素有</p><ul><li>数据量的大小</li><li>数据分析处理的对象（主题）</li><li>简单易行的数据分割标准</li><li>数据粒度的划分策略</li></ul><p>类似于数据库的分片，目的是提高数据仓库性能。</p><h4 id="定义数据来源"><a href="#定义数据来源" class="headerlink" title="定义数据来源"></a>定义数据来源</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/26.png" alt="数据来源"></p><h3 id="物理设计"><a href="#物理设计" class="headerlink" title="物理设计"></a>物理设计</h3><p>具体方法和数据库设计中的大致相似，目的是为了提高数据仓库系统的访问性能。</p><p>常用的技术有：</p><ul><li>合并表</li><li>建立数据序列</li><li>引入冗余</li><li>表的物理分割</li><li>生成导出数据</li><li>建立广义索引</li></ul><h4 id="合并表"><a href="#合并表" class="headerlink" title="合并表"></a>合并表</h4><p>分析处理操作中需要执行表的连接，为了节省开销，直接将记录混合存放，和数据库中的集簇技术类似</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/27.png" alt="合并表"></p><h4 id="数据序列"><a href="#数据序列" class="headerlink" title="数据序列"></a>数据序列</h4><p>创建一个数据序列则一次IO就可以检索，但是需要数列中的值数量稳定、数据按序访问、数据的创建和修改在统计上以非常有规律的方式进行。</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/28.png" alt="数据序列"></p><h4 id="引入冗余"><a href="#引入冗余" class="headerlink" title="引入冗余"></a>引入冗余</h4><p>分析过程有时需要从不同的表访问多个属性，每个属性又能在不同分析过程中使用，所以将某些属性复制到主题表中去减少访问的表的数量</p><p>使用这种方式会有大量的数据冗余，必须保持数据一致性。数据仓库的数据更新比较少，开销较小，所以可以有效提高性能。</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/29.png" alt="引入冗余"></p><h4 id="表的物理分割"><a href="#表的物理分割" class="headerlink" title="表的物理分割"></a>表的物理分割</h4><p>类似于逻辑设计阶段的数据分割，根据表中的数据访问频率和稳定性程度对表的存储结构进行分割。（高频访问、更新的属性单独存储）</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/30.png" alt="物理分割"></p><h4 id="生成导出数据"><a href="#生成导出数据" class="headerlink" title="生成导出数据"></a>生成导出数据</h4><p>在一些细节数据的基础上进行一定的计算和统计，将结果直接保存在数据仓库中，避免分析过程中过多的统计以及不同用户统计的偏差（过于简单，不给图了）</p><h4 id="建立广义索引"><a href="#建立广义索引" class="headerlink" title="建立广义索引"></a>建立广义索引</h4><p>用于记录数据仓库中与“最”有关的统计结果的索引被称为广义索引，数据量非常小，用户直接访问迅速，不再需要对整个仓库进行扫描（过于简单，一样没图）</p><h3 id="数据仓库生成"><a href="#数据仓库生成" class="headerlink" title="数据仓库生成"></a>数据仓库生成</h3><ul><li>建立数据模式</li><li>编制数据抽取程序</li><li>数据加载</li></ul><h3 id="数据仓库的运行和维护"><a href="#数据仓库的运行和维护" class="headerlink" title="数据仓库的运行和维护"></a>数据仓库的运行和维护</h3><p>建立数据仓库之后就可以直接运行分析、决策性应用系统，使用过程中不断加深理解，改进主题（原型法设计），随着数据源的数据的变化刷新数据仓库的数据，保证数据的一致性</p><h3 id="数据仓库的生命周期"><a href="#数据仓库的生命周期" class="headerlink" title="数据仓库的生命周期"></a>数据仓库的生命周期</h3><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/31.png" alt="数据仓库的生命周期"></p><h3 id="数据仓库的设计-生成和运维"><a href="#数据仓库的设计-生成和运维" class="headerlink" title="数据仓库的设计/生成和运维"></a>数据仓库的设计/生成和运维</h3><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/23.png" alt="数据仓库的设计/生成和运维"></p><h2 id="数据仓库设计案例一"><a href="#数据仓库设计案例一" class="headerlink" title="数据仓库设计案例一"></a>数据仓库设计案例一</h2><h3 id="维度建模中的基本概念"><a href="#维度建模中的基本概念" class="headerlink" title="维度建模中的基本概念"></a>维度建模中的基本概念</h3><h4 id="事实表"><a href="#事实表" class="headerlink" title="事实表"></a>事实表</h4><p>维度建模的核心和基本表</p><p>每一事实表都对应着一个或若干个度量值</p><blockquote><p>度量值是事实表的核心，也是趋势分析的对象</p><p>通过事实表来记录纬度值与度量值之间的关系</p></blockquote><p>事实表中的一行对应一个度量值</p><blockquote><ul><li>事实表中的素有度量值必须具有相同的粒度</li><li>粒度划分模型：事务，周期快照，累计快照</li></ul></blockquote><p>事实表中的度量值常用数值类型，很少使用文本</p><p>每个事实表都有两个及以上的外关键字（FK）</p><h4 id="维度表"><a href="#维度表" class="headerlink" title="维度表"></a>维度表</h4><p>维度表是事实表的入口，为用户提供使用数据仓库的接口。</p><p>维度表中的维度属性通常用于定义事实表上的查询条件。</p><p>维度表的定义要尽量多的列和尽可能少的行</p><p>维度表通常是文本数据或者是离散数据</p><p>尽量少使用编码属性</p><p>度量值属性可以参与统计运算，唯独属性一般是离散的，很少发生变化</p><h3 id="维度的规范化处理"><a href="#维度的规范化处理" class="headerlink" title="维度的规范化处理"></a>维度的规范化处理</h3><div class="table-container"><table><thead><tr><th>规范化</th><th>非规范化</th></tr></thead><tbody><tr><td>雪花模型</td><td>星型模型</td></tr><tr><td>复杂的表关系</td><td>简单的表关系</td></tr><tr><td>节省存储空间</td><td>记录之间存在数据冗余</td></tr><tr><td>连接的复杂，高开销</td><td>连接简单，低开销</td></tr><tr><td>低维度浏览能力</td><td>高维度浏览能力</td></tr><tr><td>不支持物理加速技术</td><td>支持物理加速技术</td></tr></tbody></table></div><h2 id="数据仓库设计案例二"><a href="#数据仓库设计案例二" class="headerlink" title="数据仓库设计案例二"></a>数据仓库设计案例二</h2><h3 id="值链"><a href="#值链" class="headerlink" title="值链"></a>值链</h3><ul><li>由企业的关键业务组成</li><li>确定了企业主体活动的自然逻辑流程</li><li>每一步业务处理都产生那个大量的周期性事务记录</li><li>决策支持系统的目标是监控关键处理过程的性能结果</li></ul><h3 id="事实表粒度模型"><a href="#事实表粒度模型" class="headerlink" title="事实表粒度模型"></a>事实表粒度模型</h3><p>有三种互补的粒度模型</p><h4 id="库存周期快照（粒度最大）"><a href="#库存周期快照（粒度最大）" class="headerlink" title="库存周期快照（粒度最大）"></a>库存周期快照（粒度最大）</h4><p>定期生成每种商品的库存水平</p><h4 id="库存事务模型（粒度最小）"><a href="#库存事务模型（粒度最小）" class="headerlink" title="库存事务模型（粒度最小）"></a>库存事务模型（粒度最小）</h4><p>记录影响库存水平的主要因素</p><h4 id="库存累计快照（适中）"><a href="#库存累计快照（适中）" class="headerlink" title="库存累计快照（适中）"></a>库存累计快照（适中）</h4><p>记录每件商品的分发历史，直至其离开仓库</p><h3 id="数据仓库的总线结构"><a href="#数据仓库的总线结构" class="headerlink" title="数据仓库的总线结构"></a>数据仓库的总线结构</h3><ul><li>一种可以按增量开发方法分布建造企业数据仓库的方法</li><li>一组综合的具有一致性的公共维度</li></ul><h3 id="一致性维度"><a href="#一致性维度" class="headerlink" title="一致性维度"></a>一致性维度</h3><ul><li>一致性维度是进一步开发总线结构数据仓库系统的基础</li><li>一致的维度可能意味着是相同的维度表</li><li>大多数一致的维度是在可能的最佳粒度层次上定义的 </li><li>原子型维度</li><li>上钻维度（在较高层次上的维度定义）</li><li>不同业务处理的事实粒度不同</li><li>两个处于相同细节层次上的维度表，如果他们均是另一个维表的子集，则它们也是一致的</li></ul><h3 id="一致性事实"><a href="#一致性事实" class="headerlink" title="一致性事实"></a>一致性事实</h3><ul><li><p>同样的事实在不同的数据备份中进行存储的一致性</p></li><li><p>一般说来，事实表数据不在多个数据备份间明确的进行拷贝</p></li><li><p>如果事实表存在于多个数据备份，那么支撑这些事实的定义和方程必须都是相同的</p></li><li><p>如果无法使事实完全保持一致，那么应该对不同的解释给与不同的名称</p></li></ul><h2 id="数据仓库设计案例三"><a href="#数据仓库设计案例三" class="headerlink" title="数据仓库设计案例三"></a>数据仓库设计案例三</h2><h3 id="事实表的规范化考虑"><a href="#事实表的规范化考虑" class="headerlink" title="事实表的规范化考虑"></a>事实表的规范化考虑</h3><p>事实表的规范化是将一张事实表总的多个度量值分解组装成多个事实表，但是一般不会这么做，因为会添加大量的属性以及计算时的连接操作。</p><p>如果度量值的计算处于不同的粒度上，那么需要将它们分解。</p><p>如果可以将“粗”粒度的度量值分配到“细”的粒度层次上也进行分解。</p><h3 id="三种类型事实表的比较"><a href="#三种类型事实表的比较" class="headerlink" title="三种类型事实表的比较"></a>三种类型事实表的比较</h3><div class="table-container"><table><thead><tr><th><strong>特</strong>   <strong>征</strong></th><th><strong>事务粒度</strong></th><th><strong>周期快照粒度</strong></th><th><strong>累积快照粒度</strong></th></tr></thead><tbody><tr><td><strong>代表的时间段</strong></td><td>时间点</td><td>规律性可预见间隔</td><td>不确定时间跨度，一般是短期</td></tr><tr><td><strong>粒度</strong></td><td>每个事务事件一行</td><td>每段一行</td><td>每个生命期一行</td></tr><tr><td><strong>事实表加载</strong></td><td>插入</td><td>插入</td><td>插入与更新</td></tr><tr><td><strong>事实行更新</strong></td><td>不重新存取</td><td>不重新存取</td><td>行为发生任何时候都要重新存取</td></tr><tr><td><strong>日期维度</strong></td><td>事务发生日期</td><td>时间段终止日期</td><td>标准关键环节的多个日期</td></tr><tr><td><strong>事实</strong></td><td>事务活动</td><td>预定时间间隔的性能</td><td>给定生命期的  性能</td></tr></tbody></table></div><h3 id="实时分区"><a href="#实时分区" class="headerlink" title="实时分区"></a>实时分区</h3><p>有三种不同类型的实时分区</p><h4 id="事务粒度"><a href="#事务粒度" class="headerlink" title="事务粒度"></a>事务粒度</h4><ul><li>实时分区具有与它的支撑静态事实表具有完全相同的维度</li><li>可能完全不建立索引</li><li>避免包含聚集值</li></ul><h4 id="周期粒度"><a href="#周期粒度" class="headerlink" title="周期粒度"></a>周期粒度</h4><ul><li>静态数据仓库事实表具有一个周期粒度，实时分区可以看作是当前的热积月</li><li>实时分区是当前正在开发的月份的映像，随着月份的推进不断更新。半加性或全加性事实随报表不断调整</li><li>月份结束时累计起来的实时分区，作为最新月份加载到静态仓库</li></ul><h4 id="累计快照"><a href="#累计快照" class="headerlink" title="累计快照"></a>累计快照</h4><ul><li>静态数据仓库事实表采用累计快照时，实时分区仅仅包含当天更新的分列项</li><li>当天结束时，实时分区包含了需要写到主要事实表上的记录的最新版本</li><li>无需索引和聚集</li></ul><h2 id="数据仓库设计案例四"><a href="#数据仓库设计案例四" class="headerlink" title="数据仓库设计案例四"></a>数据仓库设计案例四</h2><p>维度表的划分：稳定维度、渐变维度、快变维度。</p><h3 id="渐变维度"><a href="#渐变维度" class="headerlink" title="渐变维度"></a>渐变维度</h3><h4 id="类型1：改写属性值"><a href="#类型1：改写属性值" class="headerlink" title="类型1：改写属性值"></a>类型1：改写属性值</h4><p>直接改变属性值</p><p>容易实现，但不能对旧属性值的任何历史数据进行维护</p><h4 id="类型2：添加维度行"><a href="#类型2：添加维度行" class="headerlink" title="类型2：添加维度行"></a>类型2：添加维度行</h4><p>同名的情况加添加一个新的关键字用于记录新值</p><ul><li>准确跟踪渐变属性的主要方法</li><li>引入新的行用来反映新的属性值</li><li>增加了唯独行的膨胀</li><li>可以引入生效或者截止日期</li></ul><h4 id="类型3：添加维度列"><a href="#类型3：添加维度列" class="headerlink" title="类型3：添加维度列"></a>类型3：添加维度列</h4><ul><li>使用维度列保存旧的属性值</li><li>不适合跟踪唯独属性大量变化</li></ul><h4 id="类型6：1-2-3"><a href="#类型6：1-2-3" class="headerlink" title="类型6：1+2+3"></a>类型6：1+2+3</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/32.png" alt="类型6"></p><h3 id="快变维度"><a href="#快变维度" class="headerlink" title="快变维度"></a>快变维度</h3><h4 id="微型维度"><a href="#微型维度" class="headerlink" title="微型维度"></a>微型维度</h4><p>将分析频率高或变化频率大的属性拆成独立的微型维度（例如：客户维度中的年龄，性别，收入水平等属性，它们的每一种取值组合构成微型维度表中的一行）</p><h4 id="预设波段"><a href="#预设波段" class="headerlink" title="预设波段"></a>预设波段</h4><p>对于诸如收入与购买总额等不断变化的属性，应该被转换成呈波段分布的范围，即进行离散化处理，使其只能在数目相当小的离散值中取值，以减少维度表中的数据量</p><h3 id="体系桥接连表样本行"><a href="#体系桥接连表样本行" class="headerlink" title="体系桥接连表样本行"></a>体系桥接连表样本行</h3><p>体系桥接连表样本行数计算公式：每层的取值数据 * 层深度（从顶层开始计数）然后将乘积相加起来。</p><h2 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h2><p>有没有懂哥告诉我这个考不考。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 商务智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统问答四</title>
      <link href="/2020/12/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%97%AE%E7%AD%94%E5%9B%9B/"/>
      <url>/2020/12/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%97%AE%E7%AD%94%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="进程是什么"><a href="#进程是什么" class="headerlink" title="进程是什么"></a>进程是什么</h2><p>进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位。</p><p>从宏观来看，它有自己的目标，或者说功能，同时又能受控于进程调度模块；</p><p>从微观来看，它可以利用系统的资源，有自己的代码和数据，同时拥有自己的堆<br>栈；进程需要被调度。</p><h2 id="进程表是什么"><a href="#进程表是什么" class="headerlink" title="进程表是什么"></a>进程表是什么</h2><p>进程表是存储进程状态信息的数据结构。</p><p>进程表是进程存在的唯一标识，是操作系统用来记录和刻画进程状态及环境信息的数据结构，是进程动态特征的汇集，也是操作系统掌握进程的唯一资料结构和管理进程的主要依据。</p><h2 id="进程栈是什么？"><a href="#进程栈是什么？" class="headerlink" title="进程栈是什么？"></a>进程栈是什么？</h2><p>进程运行时自身的堆栈。</p><h2 id="当寄存器的值已经被保存到进程表内，esp-应指向何处来避免破坏进程表的值？"><a href="#当寄存器的值已经被保存到进程表内，esp-应指向何处来避免破坏进程表的值？" class="headerlink" title="当寄存器的值已经被保存到进程表内，esp 应指向何处来避免破坏进程表的值？"></a>当寄存器的值已经被保存到进程表内，esp 应指向何处来避免破坏进程表的值？</h2><p>进程运行时，esp 指向进程堆栈中的某个位置。寄存器的值刚刚被保存到进程表内，esp 是指向进程表某个位置的。如果接下来进行任何的堆栈操作，都会破坏掉进程表的值。</p><p>为解决这个问题，使用内核栈，让 esp 指向内核栈。</p><h2 id="tty-是什么？"><a href="#tty-是什么？" class="headerlink" title="tty 是什么？"></a>tty 是什么？</h2><p>Teletype 的缩写。终端是一种字符型设备,它有多种类型,通常使用 tty 来简称各种类型的终端设备。</p><p>不同 TTY 对应的输入设备是同一个键盘。</p><h2 id="不同的-tty-为什么输出输出不同的画⾯在同⼀个显⽰器上？"><a href="#不同的-tty-为什么输出输出不同的画⾯在同⼀个显⽰器上？" class="headerlink" title="不同的 tty 为什么输出输出不同的画⾯在同⼀个显⽰器上？"></a>不同的 tty 为什么输出输出不同的画⾯在同⼀个显⽰器上？</h2><p>不同 TTY 各有一个 CONSOLE，各个 CONSOLE 公用同一块显存。</p><p>虽然不同的 TTY 对应的输入设备是同一个键盘，但输出却好比是在不同的显示器上，因为不同的 TTY 对应的屏幕画面可能是迥然不同的。实际上，我们当然是在使用同一个显示器，画面的不同只不过是因为显示了显存的不同位置罢了</p><h2 id="解释-tty-任务执⾏过程？"><a href="#解释-tty-任务执⾏过程？" class="headerlink" title="解释 tty 任务执⾏过程？"></a>解释 tty 任务执⾏过程？</h2><p>在 TTY 任务中执行一个循环，这个循环将轮询每一个 TTY，处理它的事件，包括从键盘缓冲区读取数据、显示字符等内容。</p><p>轮询到每一个 TTY 时：</p><p>处理输入：查看其是否为当前 TTY。只有当某个 TTY 对应的控制台是当前控制台时，它才可以读取键盘缓冲区。</p><p>处理输出：如果有要显示的内容则显示它</p><h2 id="tty-结构体中⼤致包含哪些内容？"><a href="#tty-结构体中⼤致包含哪些内容？" class="headerlink" title="tty 结构体中⼤致包含哪些内容？"></a>tty 结构体中⼤致包含哪些内容？</h2><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/tty.jpg" alt=""></p><h2 id="console-结构体中⼤致包含哪些内容？"><a href="#console-结构体中⼤致包含哪些内容？" class="headerlink" title="console 结构体中⼤致包含哪些内容？"></a>console 结构体中⼤致包含哪些内容？</h2><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/console.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS安装HomeBrew缓慢或出现443的解决办法</title>
      <link href="/2020/12/09/MacOS%E5%AE%89%E8%A3%85HomeBrew%E7%BC%93%E6%85%A2%E6%88%96%E5%87%BA%E7%8E%B0443%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2020/12/09/MacOS%E5%AE%89%E8%A3%85HomeBrew%E7%BC%93%E6%85%A2%E6%88%96%E5%87%BA%E7%8E%B0443%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>使用国内镜像安装即可，使用gitee（码云）上的代理脚本进行安装就可以避免这种问题的出现。</p><p>代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>在终端显示多个下载源之后选择一个开始下载，建议使用中科大的下载源。</p><p>按照脚本的提示进行安装，最后会有安装成功的提示。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>商务智能复习提纲（二）</title>
      <link href="/2020/12/08/%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/12/08/%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="跳转链接"><a href="#跳转链接" class="headerlink" title="跳转链接"></a>跳转链接</h2><ul><li><a href="https://icimence.cn/2020/11/13/%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%B8%80%EF%BC%89/">商务智能复习提纲（一）</a></li><li><a href="https://icimence.cn/2021/01/05/%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%B8%89%EF%BC%89/">商务智能复习提纲（三）</a></li></ul><h2 id="数据仓库（二）"><a href="#数据仓库（二）" class="headerlink" title="数据仓库（二）"></a>数据仓库（二）</h2><h3 id="数据集市与数据仓库"><a href="#数据集市与数据仓库" class="headerlink" title="数据集市与数据仓库"></a>数据集市与数据仓库</h3><h4 id="建立数据集市的原因"><a href="#建立数据集市的原因" class="headerlink" title="建立数据集市的原因"></a>建立数据集市的原因</h4><ul><li>在网络环境中可能有很多的数据源，但是没有可用的信息。</li><li>早期的时候只是为用户提供一个访问多个数据源的集成功能。</li></ul><p>但是如果使用数据仓库手机所有的数据会太大，<strong>在实际应用中将它们按部门或个人分别建立反映各个子主题与区域的局部性数据组织，它们即是数据集市。</strong></p><h5 id="数据仓库-数据集市体系"><a href="#数据仓库-数据集市体系" class="headerlink" title="数据仓库/数据集市体系"></a>数据仓库/数据集市体系</h5><p>一个完整的体系结构是由<code>数据源</code>、<code>数据仓库</code>、<code>数据集市</code>构成的</p><p>三者之间通过数据仓库管理软件联系起来构成一个完整的数据体系。</p><p>数据集市的数据来源于数据仓库，对数据仓库中的数据再次进行了抽取和组织，用来满足特定的需求。</p><p>有面向主题、存储了预聚集数据、特定分析需求或用户群快速获取信息、体现终端用户的观点，面向数据仓库的界面、多层次、多维度的特点。</p><p>数据集市有独立性数据集市和从属性数据集市。</p><h4 id="数据仓库与数据集市的关系"><a href="#数据仓库与数据集市的关系" class="headerlink" title="数据仓库与数据集市的关系"></a>数据仓库与数据集市的关系</h4><h5 id="自顶向下的结构"><a href="#自顶向下的结构" class="headerlink" title="自顶向下的结构"></a>自顶向下的结构</h5><p>从数据源进行抽取之后构建企业数据仓库，之后再基于企业数据仓库构建不同的数据集市然后提供服务。</p><blockquote><p>优点：</p><ul><li>建立数据集市能够减轻DW的访问负载</li><li>各部门可以任意处理数据</li><li>数据转换和整合再DW阶段统一完成</li><li>具备数据缓冲功能</li></ul><p>缺点：</p><ul><li>成本高、见效慢、数据集市间不共享资源。</li></ul></blockquote><h5 id="自底向上的结构"><a href="#自底向上的结构" class="headerlink" title="自底向上的结构"></a>自底向上的结构</h5><p>从数据源之间进行数据集市的构建，然后基于数据集市构建企业数据仓库。</p><blockquote><p>优点：</p><ul><li>见效快、启动资金少</li></ul><p>缺点：</p><ul><li>各个部门都要进行数据清理整合</li><li>可能造成“蜘蛛网”、数据不一致的问题</li><li>总体上并没有节约资金</li></ul></blockquote><h5 id="总线结构的数据集市"><a href="#总线结构的数据集市" class="headerlink" title="总线结构的数据集市"></a>总线结构的数据集市</h5><p>不建立数据仓库直接建立数据集市，数据集市之间通过一种共享维表和事实表的“总线结构”紧密联系在一起。</p><blockquote><p>优点：</p><ul><li>共享维表和事实表，解决了数据集市的许多问题</li></ul><p>缺点：</p><ul><li>这种结构基于多维模型，应用限制于OLAP</li><li>多个数据源直接影响多个集市，造成数据仓库结构不十分稳定</li></ul></blockquote><h5 id="企业级数据集市结构"><a href="#企业级数据集市结构" class="headerlink" title="企业级数据集市结构"></a>企业级数据集市结构</h5><p>没有介绍，只有一张图</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/11.png" alt="企业级数据集市结构"></p><h3 id="数据仓库的应用"><a href="#数据仓库的应用" class="headerlink" title="数据仓库的应用"></a>数据仓库的应用</h3><p>数据资源的利用方式有查询，演绎，归纳（挖掘）。</p><p>有时候会出现数据仓库到操作性环境的数据回流，但是直接操作这些回流是不正常的。</p><blockquote><p>访问限定如下：</p><ul><li><p>从响应时间的角度来考虑，请求数据仓库数据的操作型处理通常不具有在线特性</p></li><li><p>对数据的请求必须是最小量的</p></li><li><p>管理数据仓库所用到的技术（如协议等）必须与管理操作型环境所用到的技术一致</p></li><li><p>从数据仓库取得的、准备传输到操作型环境的数据必须不做或很少的格式化</p></li></ul></blockquote><h4 id="数据仓库的间接访问"><a href="#数据仓库的间接访问" class="headerlink" title="数据仓库的间接访问"></a>数据仓库的间接访问</h4><ul><li><p>航空公司的佣金计算系统。</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/12.png" alt="佣金计算系统"></p></li><li><p>零售个性化系统</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/13.png" alt="零售个性化系统"></p></li></ul><p>还可以由一个程序对数据仓库进行定期的分析，检验相关的特征，产生一个小的文件，能够被操作型环境利用。</p><h4 id="分析型应用"><a href="#分析型应用" class="headerlink" title="分析型应用"></a>分析型应用</h4><h5 id="客户关系管理"><a href="#客户关系管理" class="headerlink" title="客户关系管理"></a>客户关系管理</h5><p>包括了客户数据集成（对客户的信息进行分析，让姓名和地址拥有标准的数据格式）以及客户信息的分析与挖掘（新客户的发现，优质客户挖掘，客户异常行为的发现，客户需求分析，客户反映分析）。</p><h5 id="商业零售"><a href="#商业零售" class="headerlink" title="商业零售"></a>商业零售</h5><ul><li>客户信息管理与分析</li><li>销售分析</li><li>货种管理（不同种类商品之间的关系分析）</li><li>市场分析</li><li>库存管理</li><li>人力资源管理</li></ul><h5 id="金融领域"><a href="#金融领域" class="headerlink" title="金融领域"></a>金融领域</h5><ul><li>账户信用等级评估</li><li>信用卡运作</li><li>股票交易规律分析</li><li>财政预算和计划</li></ul><h5 id="保险业"><a href="#保险业" class="headerlink" title="保险业"></a>保险业</h5><ul><li>保险费率的确定</li><li>险种关联分析</li><li>认购险种的预测</li></ul><h5 id="电讯行业"><a href="#电讯行业" class="headerlink" title="电讯行业"></a>电讯行业</h5><ul><li>客户开发</li><li>活动成本管理</li><li>价格定制</li><li>调用详细记录分析</li><li>电信市场</li></ul><h5 id="医疗保健"><a href="#医疗保健" class="headerlink" title="医疗保健"></a>医疗保健</h5><ul><li>成本分析</li><li>客户分类</li></ul><h2 id="联机分析处理（OLAP）"><a href="#联机分析处理（OLAP）" class="headerlink" title="联机分析处理（OLAP）"></a>联机分析处理（OLAP）</h2><h3 id="联机分析处理（OLAP）-1"><a href="#联机分析处理（OLAP）-1" class="headerlink" title="联机分析处理（OLAP）"></a>联机分析处理（OLAP）</h3><p>60年代末提出了联机事务处理（OLTP），随着数据量的增大，兼顾事务操作和分析越来越不可能。</p><p>通过专门的数据综合引擎，同时拥有更加直观的数据访问界面，追求在短时间内相应非专业人士的复杂查询要求。（OLAP）</p><p>OLAP是针对特定问题的练级数据访问和分析，并非是直接的原始数据，已经进行了一定的转换，能够让管理决策人员对数据进行深入观察。</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/13.png" alt="OLAP和OLTP"></p><h3 id="OLAP的特征及衡量标准"><a href="#OLAP的特征及衡量标准" class="headerlink" title="OLAP的特征及衡量标准"></a>OLAP的特征及衡量标准</h3><h4 id="Codd关于OLAP的评价准则"><a href="#Codd关于OLAP的评价准则" class="headerlink" title="Codd关于OLAP的评价准则"></a>Codd关于OLAP的评价准则</h4><ol><li><p>OLAP必须提供多维概念视图。</p><blockquote><p>从多个维度考察对象</p></blockquote></li><li><p>透明性准则</p><blockquote><ul><li>OLAP在体系结构中的位置对用户是透明的</li><li>OLAP的数据源对用户也是透明的</li></ul></blockquote></li><li><p>存取能力准则</p><blockquote><p>将OLAP的概念试图映射到异质的数据存储上，能访问数据并执行所需转换，从而提供单一、完整、连续的用户视图。</p></blockquote></li><li><p>稳定的报表功能</p><blockquote><p>当数据的维度以及数据量增大时，提供给最终分析人员的报表能力和响应速度不应该有明显的上升。</p></blockquote></li><li><p>客户/服务器体系结构</p><blockquote><p>服务i保证透明性和建立统一的公共概念模式、逻辑模式和物理模式。</p><p>客户端负责应用逻辑和界面。</p></blockquote></li><li><p>维的同等性原则</p><blockquote><p>每一个数据维度在数据结构和操作能力上都是等同的。</p></blockquote></li><li><p>动态的稀疏矩阵处理准则</p><blockquote><p>模型的物理模式要适应指定的维数。</p></blockquote></li><li><p>多用户支持能力准则</p><blockquote><p>OLAP工具必须提供并发访问、数据完整性及安全性机制</p></blockquote></li><li><p>非受限的跨维操作</p><blockquote><p>因为数据的维度之间有层次关系，所以进行计算时应该由系统自己推导而不是用户明确定义。</p><p>对于无法计算的内容要提供语言来供用户对计算进行定义。</p></blockquote></li><li><p>直观的数据操作</p></li><li><p>灵活的报表生成</p></li><li><p>不受限维（不小于15）与聚集层次（任意聚集层次）</p></li></ol><h4 id="FASMI评判准则"><a href="#FASMI评判准则" class="headerlink" title="FASMI评判准则"></a>FASMI评判准则</h4><ul><li>fast</li><li>analysis</li><li>shared</li><li>multidimensional</li><li>information</li></ul><h3 id="OLAP中的几个基本概念"><a href="#OLAP中的几个基本概念" class="headerlink" title="OLAP中的几个基本概念"></a>OLAP中的几个基本概念</h3><h4 id="度量值"><a href="#度量值" class="headerlink" title="度量值"></a>度量值</h4><p>是分析型处理中所关心的对象，在多维数据集中一般是数字值，是最终用户浏览多维数据集时重点查看的数据。（销售金额，成本金额）</p><h4 id="维"><a href="#维" class="headerlink" title="维"></a>维</h4><p>是观察度量值的角度（如可以从三个维角度观察销售金额即时间维，商品维，地域维）</p><p>维的一个取值称为该维的一个“维成员”，如果这个维有多个层，维成员也可以是多层次的。（对具有日，月，年三个层次的“时间维”来说，“某年某月某日”、“某年某月”、“某月某日”、“某年”都是其维成员）</p><h4 id="层"><a href="#层" class="headerlink" title="层"></a>层</h4><p>在分析型环境中可以对度量值从不同深度层面上进行分析与观察，层与维是互相关联的，一个维中可以存在多个层</p><h4 id="数据单元"><a href="#数据单元" class="headerlink" title="数据单元"></a>数据单元</h4><p>多维数组的定义：（维1，维2，…，维n，变量）</p><p>如果多维数组每个维选定的是一个维成员，会确定一个度量值，这个值或者是该放值得地方我们称其为数据单元。</p><h3 id="OLAP的数据构造方式"><a href="#OLAP的数据构造方式" class="headerlink" title="OLAP的数据构造方式"></a>OLAP的数据构造方式</h3><h4 id="ROLAP（Relational）"><a href="#ROLAP（Relational）" class="headerlink" title="ROLAP（Relational）"></a>ROLAP（Relational）</h4><p>使用传统的关系数据库管理系统进行管理。</p><h4 id="MOLAP（Multi-Dimensional）"><a href="#MOLAP（Multi-Dimensional）" class="headerlink" title="MOLAP（Multi-Dimensional）"></a>MOLAP（Multi-Dimensional）</h4><p>用多维数据库管理系统管理，采用基本数据模式是多维数组</p><p>在MOLAP中事实表是一个多维数组，维的属性值是下标。</p><h4 id="HOLAP-混合联机分析处理"><a href="#HOLAP-混合联机分析处理" class="headerlink" title="HOLAP 混合联机分析处理"></a>HOLAP 混合联机分析处理</h4><p>前两者的融合，在大量数据上获得高效率。同时提供多维数据库和关系数据库。</p><h4 id="前两者的比较"><a href="#前两者的比较" class="headerlink" title="前两者的比较"></a>前两者的比较</h4><div class="table-container"><table><thead><tr><th>MOLAP</th><th>ROLAP</th></tr></thead><tbody><tr><td>专为OLAP所设计</td><td>沿用现有的关系数据库的技术</td></tr><tr><td>性能好、响应速度快</td><td>响应速度比MOLAP慢</td></tr><tr><td>数据装载速度慢</td><td>数据装载速度快</td></tr><tr><td>需要进行预计算，可能导致数据爆炸，维数有限；无法支持维的动态变化</td><td>存储空间耗费小，维数没有限制</td></tr><tr><td>受操作系统平台中文件大小的限制，难以达到TB级(只能10~20g)</td><td>借用RDBMS存储数据，没有文件大小限制</td></tr><tr><td>缺乏数据模型和数据访问的标准</td><td>可以通过结构化查询语言（sql）实现详细数据与概要数据的存储</td></tr><tr><td>支持高性能的决策支持计算:复杂的跨维计算；多用户的读写操作；行级的计算</td><td>不支持有关预计算的读写操作：sql无法完成部分计算；无法完成多行的计算；无法完成维之间的计算</td></tr><tr><td>管理简便</td><td>维护困难</td></tr></tbody></table></div><h4 id="OLAP需解决的问题"><a href="#OLAP需解决的问题" class="headerlink" title="OLAP需解决的问题"></a>OLAP需解决的问题</h4><p>提高对数据的访问效率（查询，更新，ETL）</p><p>ROLAP中提高效率的方法：</p><ul><li>物化视图方式</li><li>索引、集簇</li><li>并行操作</li><li>查询优化（共享排序）</li></ul><h3 id="OLAP的基本数据模型"><a href="#OLAP的基本数据模型" class="headerlink" title="OLAP的基本数据模型"></a>OLAP的基本数据模型</h3><h4 id="MOLAP-多维数据库"><a href="#MOLAP-多维数据库" class="headerlink" title="MOLAP 多维数据库"></a>MOLAP 多维数据库</h4><p>使用多维数据库来存放、展示数据，这样存放比关系型数据表更清晰且占用少。但是维护需要大量的资源。</p><p>多维数据库中存取的是经过压缩的类似于数组的对象，带有高度压缩的索引和指针。使用多维查询语言MDSQL。</p><h4 id="ROLAP"><a href="#ROLAP" class="headerlink" title="ROLAP"></a>ROLAP</h4><p>使用通用的关系数据库来存储所需的数据，适用于处理大量数据，但是效率较低。现代的关系型数据库的并发已经有了很好的优化。</p><h5 id="星型模式"><a href="#星型模式" class="headerlink" title="星型模式"></a>星型模式</h5><p>是一种多维表结构，他一般有两种不同性质二维表组成。</p><blockquote><p>事实表（Fact table）</p><blockquote><p>存放多维表中的主要事实，称为度量值（Measure）</p></blockquote><p>维表（Dimension Table）</p><blockquote><p>存放多维表中的维成员的取值    </p></blockquote></blockquote><p>一般一个n维的多维表往往有n个维表和一个事实表，它们构成了一个星形结构，因而称其为“星型模式”</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/15.png" alt="星型模式"></p><p>上图中销售表相当于事实表，其他三个都是维表。</p><h5 id="雪花模式"><a href="#雪花模式" class="headerlink" title="雪花模式"></a>雪花模式</h5><p>是对星型模式的扩展，唯有的维表可变为事实表，形成局部的层次结构。</p><p>让维表更加规范，减少维表的数据量，但是查询会变慢</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/16.png" alt="雪花模式"></p><h5 id="星座模型"><a href="#星座模型" class="headerlink" title="星座模型"></a>星座模型</h5><p>通过公共维度连接多个星型模型</p><h5 id="雪暴模式"><a href="#雪暴模式" class="headerlink" title="雪暴模式"></a>雪暴模式</h5><p>通过公共维度连接多个雪花模式</p><h3 id="数据立方体"><a href="#数据立方体" class="headerlink" title="数据立方体"></a>数据立方体</h3><p>数据仓库中的数据模式可以看成是定义在多个数据源上的数据视图，而需要获取的数据基本上都是统计的数据，如果只是定义函数，然后从视图中取出在计算会耗时，所以使用物化视图（直接将预先计算好数据视图中的统计信息保存在数据仓库中）</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/17.png" alt="雪花模式"></p><p>如果数据的维度超过了3那就是数据超立方体</p><h4 id="方体格"><a href="#方体格" class="headerlink" title="方体格"></a>方体格</h4><p>不太懂，欢迎讨论</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/18.png" alt="方体格"></p><h4 id="星形网查询模式"><a href="#星形网查询模式" class="headerlink" title="星形网查询模式"></a>星形网查询模式</h4><p>不太懂，欢迎讨论</p><h4 id="数据立方体的物化"><a href="#数据立方体的物化" class="headerlink" title="数据立方体的物化"></a>数据立方体的物化</h4><ul><li>不进行物化</li><li>全物化（n维L层的立方体包含$T=\prod_{i=1}^n(L_i+1)$种子方）</li><li>部分物化（要注意更新的问题）</li></ul><h4 id="OLAP与数据仓库"><a href="#OLAP与数据仓库" class="headerlink" title="OLAP与数据仓库"></a>OLAP与数据仓库</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/19.png" alt="OLAP与数据仓库"></p><h3 id="多维数据分析"><a href="#多维数据分析" class="headerlink" title="多维数据分析"></a>多维数据分析</h3><p>指对以多维形式组织起来的数据进行切片，切块，旋转，钻取等各种分析动作。</p><h4 id="切片（Slice）"><a href="#切片（Slice）" class="headerlink" title="切片（Slice）"></a>切片（Slice）</h4><ul><li>根据某一维上的某个维成员值选择统计数据进行分析</li></ul><h4 id="切块（Dice）"><a href="#切块（Dice）" class="headerlink" title="切块（Dice）"></a>切块（Dice）</h4><ul><li><p>根据某一维上的某个维成员取值的区间选择统计数据进行分析</p></li><li><p>根据多个维度上的维成员取值的区间选择统计数据进行分析</p></li></ul><h4 id="旋转（Pivot-Rotate）"><a href="#旋转（Pivot-Rotate）" class="headerlink" title="旋转（Pivot/Rotate）"></a>旋转（Pivot/Rotate）</h4><ul><li>调整维的排列次序的动作称为旋转</li></ul><h4 id="上钻-数据概括（roll-up）"><a href="#上钻-数据概括（roll-up）" class="headerlink" title="上钻/数据概括（roll_up）"></a>上钻/数据概括（roll_up）</h4><ul><li>将多维下标的取值提升到较高的概念层次上，从而形成新的统计查询结果，并进行分析。</li></ul><h4 id="下钻-数据细化（drill-down）"><a href="#下钻-数据细化（drill-down）" class="headerlink" title="下钻/数据细化（drill_down）"></a>下钻/数据细化（drill_down）</h4><ul><li>将多维下标的取值降低到较低的概念层次上，从而形成更细致的统计查询结果，并进行分析。</li></ul><h4 id="跨钻（drill-across）"><a href="#跨钻（drill-across）" class="headerlink" title="跨钻（drill across）"></a>跨钻（drill across）</h4><ul><li>对多个事实进行操作</li></ul><h4 id="钻透（drill-through）"><a href="#钻透（drill-through）" class="headerlink" title="钻透（drill through）"></a>钻透（drill through）</h4><ul><li>下钻至数据立方体的最低细节后，继续细化至数据仓库/数据库的关系型表格</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 商务智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统问答三</title>
      <link href="/2020/11/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%97%AE%E7%AD%94%E4%B8%89/"/>
      <url>/2020/11/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%97%AE%E7%AD%94%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h2 id="解释中断向量"><a href="#解释中断向量" class="headerlink" title="解释中断向量"></a>解释中断向量</h2><p>​    对应每个中断源设置一个向量，这些向量顺序寸在主存储器的特定存储区。向量的内容是相应中断服务程序的起始地址和处理机状态字。在响应中断时，由中断系统硬件提供向量地址，处理机根据该地址取得向量，并转入相应的中断服务程序。</p><p>​    把中断/异常与相应的处理方法对应起来，每种中断都会对应一个中断向量号，而这个向量号通过中断描述符表就与相对应的中断处理程序对应起来了。</p><h2 id="解释中断类型码"><a href="#解释中断类型码" class="headerlink" title="解释中断类型码"></a>解释中断类型码</h2><p>​    把每个中断服务程序进行编号，这个号就代表一个中断服务程序，就是中断类型码，是计算机用来查找中断向量用的。中断指令格式一般为”INT n”，其中 n 被称为中断类型码</p><h2 id="解释中断向量表"><a href="#解释中断向量表" class="headerlink" title="解释中断向量表"></a>解释中断向量表</h2><p>​    中断向量表是指中断服务程序入口地址的偏移量与段基值，一个中断向量占据 4 字节空间。中断向量表是 8086 系统内存中最低端 1K 字节空间，它的作用就是按照中断类型号从小到大的顺序存储对应的中断向量，总共存储 256 个中断向量。</p><p>​    中断向量表在内存单元的最低处，地址空间为 00000H 003FFH(0-1024B)。</p><p>​    这个地址正好和中断类型码有一种对应的关系：中断类型码*4(一个中断向量所占的空间) 就等于这个中断向量的首地址。</p><h2 id="实模式下中断程序地址如何得到？"><a href="#实模式下中断程序地址如何得到？" class="headerlink" title="实模式下中断程序地址如何得到？"></a>实模式下中断程序地址如何得到？</h2><p>​    中断指令”INT n”表示调用 n 号中断处理程序，根据中断类型码 n×4 得到中断向量首地址，从中断向量表中取得中断向量地址（段地址存入 CS，偏移量存入 IP），在中断处理程序中，用中断返回指令 IRET 使CPU 返回主程序断点继续执行；</p><h2 id="保护模式下中断程序地址如何得到？"><a href="#保护模式下中断程序地址如何得到？" class="headerlink" title="保护模式下中断程序地址如何得到？"></a>保护模式下中断程序地址如何得到？</h2><p>​    先获得IDT，查询 IDT 以IDTR 指定的 IDT 基地址为起始地址，调用号 N*8 算出偏移量， 即为 N 号终端们描述符首地址，由此处取出中断门 8 字节；查询描述符表根据中断门的选择子和偏移量得到中断程序地址。</p><h2 id="中断向量地址如何得到？"><a href="#中断向量地址如何得到？" class="headerlink" title="中断向量地址如何得到？"></a>中断向量地址如何得到？</h2><p>​    中断类型号 * 4 = 存放中断向量的首地址</p><h2 id="实模式下如何根据中断向量的地址得到中断程序地址？"><a href="#实模式下如何根据中断向量的地址得到中断程序地址？" class="headerlink" title="实模式下如何根据中断向量的地址得到中断程序地址？"></a>实模式下如何根据中断向量的地址得到中断程序地址？</h2><p>​    中断向量高 2 字节存放基址，低 2 字节存放段内偏移量，由基址和偏移量得到中断程序地址。</p><h2 id="解释中断描述符"><a href="#解释中断描述符" class="headerlink" title="解释中断描述符"></a>解释中断描述符</h2><p>​    中断描述符除了含有中断处理程序地址信息外，还包括许多属性和类型位。每个中断描述符占用连续的 8 个字节，分为 3 类：任务门，中断门和自陷门，CPU 对不同的门有不同的处理方式。</p><p>​    低地址的 0、1 字节是中断代码的偏移量 A15-A0；高地址的 6、7 字节是中断代码的偏移量 A31-A16；2、3 字节是段选择符，段选择符和偏移量用来形成中断服务子程序的入口地址；4、5 两个字节称为访问权限字节，标识该中断描述符是否有效、服务程序的特权级和描述符的类型等信息。</p><h2 id="保护模式下中断描述符表如何得到？"><a href="#保护模式下中断描述符表如何得到？" class="headerlink" title="保护模式下中断描述符表如何得到？"></a>保护模式下中断描述符表如何得到？</h2><p>​    装载中断描述符表寄存器 CPU 切换到保护模式前，运行于实模式下的初始化程序必须使用 LIDT 指令装载中断描述符表 IDT，将 IDT 基地址（32 位）与段界值（16 位）装入IDTR（一个 48 位的全地址寄存器，中断描述符表寄存器），基地址定义 IDT 在存储器中的起始点，段界值定义 IDT 所占的字节数。在返回实模式或系统复位时，IDTR 中自动装入 000000H 的基地址值与 03FFH 的段界值。</p><h2 id="保护模式下中断门如何得到？"><a href="#保护模式下中断门如何得到？" class="headerlink" title="保护模式下中断门如何得到？"></a>保护模式下中断门如何得到？</h2><p>​    查中断描述符表以 IDTR 指定的中断描述符表的基地址为起始地址，用调用号 N*8 算出偏移量，即为 N 号中断门描述符的首地址，由此处取出中断门的 8 个字节。</p><h2 id="保护模式下如何根据中断门得到中断处理程序地址？"><a href="#保护模式下如何根据中断门得到中断处理程序地址？" class="headerlink" title="保护模式下如何根据中断门得到中断处理程序地址？"></a>保护模式下如何根据中断门得到中断处理程序地址？</h2><p>​    查全局或局部描述符表根据中断门中的选择子（段选择符）和偏移量得到中断处理程序入口</p><h2 id="中断的分类，举例不同类型的中断？"><a href="#中断的分类，举例不同类型的中断？" class="headerlink" title="中断的分类，举例不同类型的中断？"></a>中断的分类，举例不同类型的中断？</h2><p>从中断源的角度分类：</p><ol><li><p>由计算机硬件异常或故障引起的中断，也称为内部异常中断；</p></li><li><p>由程序中执行了中断指令引起的中断，也称为软中断。由程序员通过 INT 或 INT3</p><blockquote><p>指令触发，通常当作 trap 处理，用处是实现系统调用</p></blockquote></li><li><p>外部设备（如输入输出设备）请求引起的中断，也称为外部中断或 I/O 中断</p></li></ol><p>另一个角度分类主要有两类：</p><ol><li><p>中断：由 CPU 以外的事件引起的中断，如 I/O 中断、时钟中断、控制台中断等；</p></li><li><p>异常：来自 CPU 的内部事件或程序执行中的事件引起的过程，如由于 CPU 本身故障、程序故障和请求系统服务的指令引起的中断等。</p></li></ol><p>外部中断的分类：</p><ol><li><p>可屏蔽中断：禁止响应某个中断，保证在执行一些重要程序中不响应中断，以免造成迟缓而引起错误；</p></li><li><p>不可屏蔽中断：重启、电源故障、内存出错、总线出错等影响整个系统工作的中断是不能屏蔽的。</p></li></ol><h2 id="中断与异常的区别？"><a href="#中断与异常的区别？" class="headerlink" title="中断与异常的区别？"></a>中断与异常的区别？</h2><ol><li><p>中断时 CPU 所具备的功能，通常因为硬件而随机发生；</p><blockquote><p>异常是软件运行过程中的一种开发过程中给没有考虑到的程序错误。</p></blockquote></li><li><p>中断是 CPU 暂停当前工作，有计划地去处理其他的事情，中断的发生一般是可以预知的，处理过程也是事先制定好的，处理中断时程序是正常运行的；</p><blockquote><p>异常是 CPU 遇到了无法响应的工作，而后进入一种非正常状态。异常的出现表面程序有缺陷。</p></blockquote></li><li><p>中断是异步的，异常是同步的。</p><blockquote><p>中断是来自处理器外部的 I/O 设备的信号的结果，它不是由指令流中某条指令执行引起的，从这个意义上讲，它是异步的，是来自指令流之外的；</p><p>异常是执行当前指令流中的某条指令的结果，是来自指令流内部的，从这个意义上来讲，它是同步的。</p></blockquote></li><li><p>返回点不同。良性的如中断和 trap，只是在正常的工作流之外执行额外的操作， 然后继续干没干完的活。因此处理程序完了以后返回到原指令流的下一条指令， 继续执行。</p><blockquote><p>恶性的如 fault 和 abort，对于可修复 fault，由于是在上一条指令执行过程中发生（是由正在执行的指令引发的）的，在修复 fault 后，会重新执行该指令；至于不可修复的 fault 和 abort，则不会再返回。</p></blockquote></li><li><p>中断是由于当前程序无关的中断信号触发的，CPU 对中断的响应是被动的，且与 CPU 模式无关，既可以发生在用户态，又可以发生在核心态。</p><blockquote><p>异常是由控制单元产生的，大部分异常发生在用户态。</p></blockquote></li></ol><h2 id="实模式和保护模式下的中断处理差别"><a href="#实模式和保护模式下的中断处理差别" class="headerlink" title="实模式和保护模式下的中断处理差别"></a>实模式和保护模式下的中断处理差别</h2><p>保护模式下的中断处理与实模式下的中断处理最大的区别在于寻找中断处理代码入口的方式，在保护模式下，为每个中断和异常定义了一个中断描述符，用来说明中断和异</p><p>常服务程序的入口地址的属性，由中断描述符表取代了实模式下的中断向量表。而实模式的中断向量表固定在存储器的最底部，保护模式下的 IDT 则是可以改变的。</p><h2 id="如何识别键盘组合键（如-Shift-a），是否有其他解决方案？"><a href="#如何识别键盘组合键（如-Shift-a），是否有其他解决方案？" class="headerlink" title="如何识别键盘组合键（如 Shift+a），是否有其他解决方案？"></a>如何识别键盘组合键（如 Shift+a），是否有其他解决方案？</h2><p>定义 6 个 Boolean 变量来表示键盘左右 shift、alt、ctrl 键状态，当被按下时，对应变量变为 true，放开弹起时对应变量改为 false。如果键（如左或右 shift）状态值为 true，此时按下另一个键（a），column 值变为 1，此时则取keymap[column]，即 keymap[]中第二列相应的值，此处为 A。</p><h2 id="IDT-是什么，有什么作用？"><a href="#IDT-是什么，有什么作用？" class="headerlink" title="IDT 是什么，有什么作用？"></a>IDT 是什么，有什么作用？</h2><p>中断描述符表，用于将每个异常或中断向量分别与他们的处理过程联系起来，最大只有</p><p>256 项（2K 大小）。</p><h2 id="IDT-中有几种描述符？"><a href="#IDT-中有几种描述符？" class="headerlink" title="IDT 中有几种描述符？"></a>IDT 中有几种描述符？</h2><p>IDT 中可以存放 3 种类型的门描述符：中断门描述符、任务门描述符、自陷门描述符。</p><h2 id="异常的分类？"><a href="#异常的分类？" class="headerlink" title="异常的分类？"></a>异常的分类？</h2><ol><li><p>故障（fault）：是一种可被更正的异常，而且一旦被更正，程序可以不失连续性地继续执行。返回地址是产生 fault 的指令。</p></li><li><p>陷阱（trap）：是一种在发生 trap 的指令执行之后立即被报告的异常，它也允许程序或任务不失连续性地继续执行。返回地址是产生 trap 的指令之后的那条指令。</p></li><li><p>异常中止（abort）：不总是报告精确异常发生位置的异常，不允许程序或任务继续执行，而是用来报告严重错误的。</p></li></ol><h2 id="用户态和内核态的特权级分别为多少？"><a href="#用户态和内核态的特权级分别为多少？" class="headerlink" title="用户态和内核态的特权级分别为多少？"></a>用户态和内核态的特权级分别为多少？</h2><p>用户态特权级为 3，内核态特权级为 0</p><h2 id="中断向量表中，每个中断有几个字节？里面的结构是什么？"><a href="#中断向量表中，每个中断有几个字节？里面的结构是什么？" class="headerlink" title="中断向量表中，每个中断有几个字节？里面的结构是什么？"></a>中断向量表中，每个中断有几个字节？里面的结构是什么？</h2><p>每个中断向量包含 4 字节，低地址两字节放偏移，高地址两字节放段描述符。</p><h2 id="中断和异常的共同点（至少-2-点），不同点（至少-3-点）共同点："><a href="#中断和异常的共同点（至少-2-点），不同点（至少-3-点）共同点：" class="headerlink" title="中断和异常的共同点（至少 2 点），不同点（至少 3 点）共同点："></a>中断和异常的共同点（至少 2 点），不同点（至少 3 点）共同点：</h2><h3 id="共同点："><a href="#共同点：" class="headerlink" title="共同点："></a>共同点：</h3><ol><li><p>都是程序执行过程中的强制性转移，转移到相应的处理程序。</p></li><li><p>都是软件或赢家发生了某种情形而通知处理器的行为不同点：</p></li></ol><h3 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h3><ol><li><p>中断时 CPU 所具备的功能，通常因为硬件而随机发生；</p><blockquote><p>异常是软件运行过程中的一种开发过程中给没有考虑到的程序错误。</p></blockquote></li><li><p>中断是 CPU 暂停当前工作，有计划地去处理其他的事情，中断的发生一般是可以预知的，处理过程也是事先制定好的，处理中断时程序是正常运行的；</p><blockquote><p>异常是 CPU 遇到了无法响应的工作，而后进入一种非正常状态。异常的出现表面程序有缺陷。</p></blockquote></li><li><p>中断是异步的，异常是同步的。</p><blockquote><p>中断是来自处理器外部的 I/O 设备的信号的结果，它不是由指令流中某条指令执行引起的，从这个意义上讲，它是异步的，是来自指令流之外的；</p><p>异常是执行当前指令流中的某条指令的结果，是来自指令流内部的，从这个意义上来讲，它是同步的。</p></blockquote></li><li><p>返回点不同。良性的如中断和 trap，只是在正常的工作流之外执行额外的操作， 然后继续干没干完的活。因此处理程序完了以后返回到原指令流的下一条指令， 继续执行。</p><blockquote><p>恶性的如 fault 和 abort，对于可修复 fault，由于是在上一条指令执行过程中发</p><p>生（是由正在执行的指令引发的）的，在修复 fault 后，会重新执行该指令；至于不可修复的 fault 和 abort，则不会再返回。</p></blockquote></li><li><p>中断是由于当前程序无关的中断信号触发的，CPU 对中断的响应是被动的，且与 CPU 模式无关，既可以发生在用户态，又可以发生在核心态。</p><blockquote><p>异常是由控制单元产生的，大部分异常发生在用户态。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>商务智能复习提纲（一）</title>
      <link href="/2020/11/13/%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/11/13/%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="跳转链接"><a href="#跳转链接" class="headerlink" title="跳转链接"></a>跳转链接</h2><ul><li><a href="https://icimence.cn/2020/12/08/%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%BA%8C%EF%BC%89/">商务智能复习提纲（二）</a></li><li><a href="https://icimence.cn/2021/01/05/%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%EF%BC%88%E4%B8%89%EF%BC%89/">商务智能复习提纲（三）</a></li></ul><h2 id="课程概述"><a href="#课程概述" class="headerlink" title="课程概述"></a>课程概述</h2><h3 id="商务智能的起源"><a href="#商务智能的起源" class="headerlink" title="商务智能的起源"></a>商务智能的起源</h3><p>商务智能离不开大数据，其起源和大数据也有紧密的联系。</p><ul><li>在20世纪末期，数据库系统快速发展，建立了大量的业务系统和信息系统，累积了大量的数据。</li><li>计算平台的发展也使得平台算力得到了较大的提升。</li><li>信息采集手段也不断发展，使得采集信息的各种手段开始出现。</li></ul><p>近现代数据爆炸的现象已经出现，大量的数据产生。</p><h4 id="知识值链"><a href="#知识值链" class="headerlink" title="知识值链"></a>知识值链</h4><p>Data=&gt;Information=&gt;Knowledge</p><ul><li><p>Data</p><blockquote><ul><li>世界中真实，独立的事实项</li><li>能够轻易获取并结构化</li><li>能够轻易传输</li></ul><p>往往会出现语义不详，在结构化数据中更加有价值。</p></blockquote></li><li><p>Information</p><blockquote><ul><li>某些被赋予联系和目的性的数据</li><li>需要就含义达成共识</li><li>需要人工调整</li></ul><p>信息是否有意义取决于接收之后会不会有帮助。</p></blockquote></li><li><p>Knowledge</p><blockquote><ul><li>在头脑中的内容和见解</li><li>需要思考和综合</li><li>很难使用机器机型进行获取和结构化，难以传输</li><li>往往是默认的</li></ul><p>知识的来源是信息。</p></blockquote></li></ul><h4 id="企业"><a href="#企业" class="headerlink" title="企业"></a>企业</h4><p>从企业角度，需要保证数据的可访问性，及时性，表达格式的正确性以及数据的完整性。</p><p>在企业规模不大的情况下比较方便，但是当企业达到一定规模，商务智能开始显现其作用。</p><blockquote><p><strong>为何需要商务智能？</strong></p><ul><li>许多数据仓库解决方案共同的一个缺点就是系统的开发者总是专注于软件技术，而不是商业解决方案</li><li>因此，尽管他们所提供的产品能够很好地构建和访问数据仓库，但这些产品实施起来相当复杂</li><li>数据仓库产品通常很少针对特定的产业、应用领域提供解决特定的业务问题的软件包</li><li>企业所需要的是应用程序和商务解决方案，而不仅仅是技术</li><li>数据仓库解决方案的另一个问题是：人们仍然过多地关心如何建立数据仓库，而不是如何对它进行访问</li><li>许多企业似乎觉得他们只需要建立起数据仓库并为用户提供合适的工具，问题就解决了。事实上，这只是个开始而已</li></ul></blockquote><h4 id="商务智能的目标"><a href="#商务智能的目标" class="headerlink" title="商务智能的目标"></a>商务智能的目标</h4><p>商务智能的目标是决策支持以及改善信息访问。从数据到信息，BI是将数据转换为有意义的内容的过程。</p><blockquote><p>这里有比较多的描述，如果想看详细的建议使用上课的ppt，提纲中不做过多的赘述</p></blockquote><h3 id="商务智能的构件"><a href="#商务智能的构件" class="headerlink" title="商务智能的构件"></a>商务智能的构件</h3><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/1.png" alt="商务智能构件"></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/2.png" alt="商务智能构件"></p><h4 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h4><p>商务智能的体系中所有的数据都是来自于数据源（操作性数据库，历史数据，外部数据，数据仓库中的信息，相关的数据库和数据结构等等）。</p><p>数据源存在于不同的平台，既可以是格式化也可以是非格式化数据。</p><h4 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h4><h5 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h5><p>数据仓库是BI的重要组成部分和数据基础。</p><p>主要进行数据提取、转化和装载、数据管理、数据访问、元数据。</p><h5 id="ETL"><a href="#ETL" class="headerlink" title="ETL"></a>ETL</h5><p>数据抽取、转换和装载（ETL）的过程</p><h5 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h5><p>存储，索引和备份</p><p>不仅管理关系数据库中的数据</p><p>而且管理数据立方体中的多维数据</p><h5 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h5><p>一种或多种访问数据仓库中数据的方式。</p><h5 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h5><p>元数据是关于数据的数据，是如何管理数据仓库的重要数据。</p><h5 id="分析和展现层"><a href="#分析和展现层" class="headerlink" title="分析和展现层"></a>分析和展现层</h5><ul><li><p>报表和查询</p><blockquote><p>针对不同用户，提供不同的报表和查询处理方式</p></blockquote></li><li><p>联机分析处理（OLAP）</p><blockquote><p>提供一种快速的交互式的互相融合的信息访问方式</p><p>基本分析操作包括切片、切块、旋转、数据概括、数据细化</p></blockquote></li><li><p>数据统计</p><blockquote><p>数据统计是将数据中含有的信息概括为统计值（关系分析，要素分析，回归分析）</p></blockquote></li><li><p>数据挖掘</p><blockquote><p>对数据仓库中蕴含的、未知的、平凡的、有潜在应用价值的模式的提取。</p><p>发现数据中隐藏的模式</p><p>借鉴各种相关领域的理论和方法</p><p>用户发现隐藏模式的算法既可以是自动进行也可以在人工指导下完成。</p><p><strong>数据挖掘方法有：</strong></p><ul><li>特征化与区分</li><li>关联规则挖掘</li><li>分类挖掘</li><li>聚类挖掘</li><li>时序会挥发性数据挖掘</li><li>异常分析</li></ul></blockquote></li></ul><h3 id="商务智能的解决方案"><a href="#商务智能的解决方案" class="headerlink" title="商务智能的解决方案"></a>商务智能的解决方案</h3><h4 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h4><p>业务职能企业增强版（EE）</p><h4 id="IBM"><a href="#IBM" class="headerlink" title="IBM"></a>IBM</h4><p>DB2 Data Warehouse Enterprise Edition</p><h4 id="Microsoft"><a href="#Microsoft" class="headerlink" title="Microsoft"></a>Microsoft</h4><p>Microsoft SQL Server Business Intelligence Platform</p><h4 id="Sybase"><a href="#Sybase" class="headerlink" title="Sybase"></a>Sybase</h4><h3 id="商务智能的发展"><a href="#商务智能的发展" class="headerlink" title="商务智能的发展"></a>商务智能的发展</h3><p>商务智能非常重要</p><p>逐渐实现，分布式，插件化继承，大众化，在线，零滞后，非结构数据基础上的商务智能。</p><h2 id="数据仓库（一）Data-WareHouse"><a href="#数据仓库（一）Data-WareHouse" class="headerlink" title="数据仓库（一）Data WareHouse"></a>数据仓库（一）Data WareHouse</h2><h3 id="从数据库到数据仓库"><a href="#从数据库到数据仓库" class="headerlink" title="从数据库到数据仓库"></a>从数据库到数据仓库</h3><p>数据库技术的进步以及数据量的变化引起了这个转变</p><p>随着市场的发展，企业的需求的扩展，数据处理和处理面向的数据被分为两类，操作型和分析型</p><h4 id="操作型处理"><a href="#操作型处理" class="headerlink" title="操作型处理"></a>操作型处理</h4><p>也叫事务处理，是指对数据库的日常联机访问操作。通常是对一个或一组记录的查询和修改，主要是为企业特定的应用服务的，所以也叫联机事务处理。（OLTP）</p><h4 id="分析型处理"><a href="#分析型处理" class="headerlink" title="分析型处理"></a>分析型处理</h4><p>也叫做信息型处理，主要用于企业管理人员的决策分析，为制订企业的未来经营管理计划提供辅助决策信息。典型例子：DSS（决策支持系统）</p><h4 id="操作型、分析型数据"><a href="#操作型、分析型数据" class="headerlink" title="操作型、分析型数据"></a>操作型、分析型数据</h4><p>操作型数据是事务处理所需要的细节性的数据，是面向企业员工的日常的。</p><p>分析型数据是分析处理所需的综合性数据，是面向企业管理人员的决策的。</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/3.png" alt="数据比较"></p><h4 id="信息系统的发展历史"><a href="#信息系统的发展历史" class="headerlink" title="信息系统的发展历史"></a>信息系统的发展历史</h4><p>90年代之前一般使用数据库方式，数据与应用分离，实现数据高度共享（OLTP）。90年代之后使用数据仓库方式，以支持经营管理过程中的决策指定为目的（DSS、OLAP、DM）</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/4.png" alt="数据比较"></p><h4 id="决策支持系统"><a href="#决策支持系统" class="headerlink" title="决策支持系统"></a>决策支持系统</h4><p>是上世纪70年代兴起的一种计算机应用，对企业领导做辅助性决策。三个部分组成：数据、算法与模型、展示。</p><h5 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h5><p>为了进行分析型数据的处理产生了DSS，但是虽然在事务处理方面表现得很好，但是分析处理方面支持不好。因为原有的数据库为核心的环境不适合做分析型应用的表现</p><h5 id="表现不良原因"><a href="#表现不良原因" class="headerlink" title="表现不良原因"></a>表现不良原因</h5><ol><li><p>事务处理和分析处理的性能特性不同</p><blockquote><ul><li>事务处理中用户每次操作处理的时间短，存取数据量小，单操作频率高，并发程度大。</li><li>分析处理中每次分析需要连续运行，存取数据量大。但是操作频率低，没有并发要求。</li></ul></blockquote></li><li><p>数据集成问题</p><blockquote><ul><li>分析处理中全面正确的数据是有效的分析和决策的首要前提。分析过程中需要的全面的数据，这也就表示数据可能来自多种不同的数据源。需要集成的数据，需要包括整个部门的相关数据</li><li>事务处理之中只需要本部门业务有关的当前细节数据，不需要继承的数据。数据较为分散，且不需要外部的非结构化的数据</li></ul></blockquote><p>如果使用需要集成数据的DSS对事务处理环境中的数据进行处理会造成重复计算和极低的分析处理效率。</p></li><li><p>数据的动态集成问题</p><blockquote><ul><li>静态集成是对所需数据进行一次集成，以后就不再发生变化。</li><li>动态集成是对集成后的数据进行周期性刷新。</li><li>如果使用静态继承会使决策出现过时，但是传统事务数据没有动态集成的能力。</li></ul></blockquote></li><li><p>历史数据问题</p><blockquote><ul><li>事务处理一般是需要当前数据。数据库中也一般只对短期数据进行存储（3-5个月）</li><li>分析事物中更看重历史数据（5-10年），可以通过大量的历史数据的分析来把我企业的发展趋势。</li></ul></blockquote></li><li><p>数据的综合问题</p><blockquote><ul><li>事务处理需要的是当前的细节性操作数据，而分析处理需要的是大量的总结性分析数据。</li><li>在分析前需要对细节数据进行不同程度的综合，传统的事务处理系统不具备这种综合能力。这种综合也是一种数据冗余，在传统的事务数据中是被限制的。</li></ul></blockquote></li><li><p>数据的访问问题</p><blockquote><ul><li>事务处理需要提供多种不同类型的数据访问操作，对于修改数据必须实时更新数据库。</li><li>分析处理的数据访问主要是读为主，且对实时性的要求不是特别高。</li></ul></blockquote><p>综上所述<strong>数据仓库正是为建立这种新的分析处理环境而出现的一种数据存储和组织技术。</strong></p></li></ol><h4 id="数据仓库出现的原因"><a href="#数据仓库出现的原因" class="headerlink" title="数据仓库出现的原因"></a>数据仓库出现的原因</h4><ul><li><p>将数据仓库与操作型数据库分离开来，从而：</p><ul><li><p>提高两个系统的性能</p></li><li><p>提高操作型数据库的事务吞吐量</p></li><li><p>两个系统中数据的结构、内容和用法的不同</p></li></ul></li><li><p>建立数据仓库的目的并不是要代替传统的事务处理系统/数据库，而是为了适应因市场商业经营行为的改变和市场竞争程度的加剧而进行的分析型处理的需要</p></li><li><p>数据仓库技术正成为企业信息集成和辅助决策应用的关键技术之一</p></li></ul><h3 id="数据仓库及其四大特征"><a href="#数据仓库及其四大特征" class="headerlink" title="数据仓库及其四大特征"></a>数据仓库及其四大特征</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>数据仓库就是一个面向主题的、集成的、非易失的（稳定的）、时变的（随时间不断变化的）数据集合，用于支持经营管理过程中的决策制定</p><h4 id="面向主题"><a href="#面向主题" class="headerlink" title="面向主题"></a>面向主题</h4><ul><li><p>面向应用的数据组织（数据库）</p><blockquote><p>特点：表达数据流程，和业务中的单据或文档对应，逻辑、数据不完全分离，和部门、组织相关</p><p>这种数据组织没有实现真正的数据与应用的分离，抽象程度不足。</p></blockquote></li><li><p>主题（Subject）</p><blockquote><p>主题是较高层次上将企业信息系统中的数据综合、归类并进行分析利用的抽象，在逻辑意义上是对应企业中某一宏观分析领域涉及的分析对象。</p></blockquote></li><li><p>面向主题</p><blockquote><p>指数据仓库内的信息是按主题进行组织的，为按主题进行决策的过程提供信息。</p><p>数据仓库是面向分析的，主观性较大，因客户的主观要求会影响数据仓库中的主题。</p></blockquote><p>在每个主题中都包含了有关该主题的所有信息，同时抛弃了无关数据。</p><p>面向主题的数据组织方式所强调的就是要形成一个这样一致的信息集合。</p><p>主体之间也会有重叠，是逻辑上的重叠。</p><p>每个主题需要一个多维数据库（MDDB，Multi-Dimensional Database）</p></li></ul><h4 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h4><p>数据仓库中的数据是为了分析服务的，需要从多个数据源进行获取，通过数据集成形成数据仓库中的数据。</p><p>集成的方法：</p><ul><li><p>统一</p><blockquote><p>消除不同数据源之间数据不一致的现象</p></blockquote></li><li><p>综合</p><blockquote><p>对原有数据进行综合和计算</p></blockquote></li></ul><h4 id="非易失（稳定的）"><a href="#非易失（稳定的）" class="headerlink" title="非易失（稳定的）"></a>非易失（稳定的）</h4><p>数据仓库和操作型数据环境是隔离的</p><p>一般情况下数据仓库的数据不执行更新，只供查询</p><p>数据仓库不是不需要更新</p><h4 id="时变的（随时间不断变化）"><a href="#时变的（随时间不断变化）" class="headerlink" title="时变的（随时间不断变化）"></a>时变的（随时间不断变化）</h4><p>数据仓库内的信息是揭露了企业从过去的时间点到目前的各个阶段的信息、</p><h3 id="数据仓库的基本结构"><a href="#数据仓库的基本结构" class="headerlink" title="数据仓库的基本结构"></a>数据仓库的基本结构</h3><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/5.png" alt="数据仓库的结构"></p><h4 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h4><ul><li><p>数据的ETL（抽取、转换、装载）</p><blockquote><p>从异构数据源进行抽取，进行解析，矫正标准化，增补，之后进行匹配，最后合并并存入数据仓库。</p></blockquote></li><li><p>存储和管理</p></li><li><p>数据的访问和表现</p></li><li><p>元数据</p></li></ul><h4 id="数据源-1"><a href="#数据源-1" class="headerlink" title="数据源"></a>数据源</h4><ul><li><p>多数据源</p><blockquote><p>数据仓库中的数据来源于多个数据源，与不同格式的数据、不同数据操作平台以及不同的物理位置。</p></blockquote></li><li><p>数据源是可以递归的（数据仓库的数据源可以是另一个数据仓库）</p></li><li><p>数据源的抽取</p></li><li><p>常见的数据源</p><blockquote><ul><li>流行的关系型数据库系统</li><li>面向对象数据库系统</li><li>传统的桌面数据库系统</li><li>文件系统中的数据文件</li><li>其他数据源</li></ul></blockquote></li></ul><h4 id="数据的抽取与刷新"><a href="#数据的抽取与刷新" class="headerlink" title="数据的抽取与刷新"></a>数据的抽取与刷新</h4><h5 id="数据抽取"><a href="#数据抽取" class="headerlink" title="数据抽取"></a>数据抽取</h5><p>将数据源中数据通过网络进行抽取，并经加工、转换、综合后形成数据仓库中的数据，这就是数据仓库的数据抽取。</p><p>数据的抽取是数据进入仓库的入口，是很重要的一环，负责屏蔽底层数据的结构复杂性和物理位置的复杂性，同时还要实现对数据仓库中的数据的自动刷新，要对数据仓库的元数据和数据进行维护。</p><h5 id="数据刷新"><a href="#数据刷新" class="headerlink" title="数据刷新"></a>数据刷新</h5><p>在经过一段时间后要重新修正，修改那些过时的数据，保存那些不变的数据，此种动作称为数据仓库的数据刷新。</p><p>刷新的数据量一般小于抽取量，但是难度和复杂性要大于数据抽取。</p><h4 id="转化和集成的复杂性"><a href="#转化和集成的复杂性" class="headerlink" title="转化和集成的复杂性"></a>转化和集成的复杂性</h4><p>数据从操作型环境到数据仓库的传递需要注意一下条件：</p><ul><li>要克服环境变化带来的系统的变化，硬件的变化，甚至源于硬件的数据结构的变化</li><li>要避免从在线窗口进行数据抽取</li><li>来自于操作型环境中的输入关键字需要进行重建和转换</li><li>非关键字需要重新格式化</li><li>保持数据正确</li><li>保证数据有效合并</li><li>合并中需要提供关键词解析</li><li>需要对记录进行排序</li><li>在抽取过程之前要注重选择数据的效率</li><li>需要对数据进行汇总</li><li>数据元素进行转移的过程中需要重命名并且进行跟踪</li><li>输入的数据需要进行一定的格式转换</li><li>需要理解数据的关系</li><li>可能需要数据编码的转换</li><li>可能需要加入时间元素</li><li>数据仓库需要着眼于企业信息化，操作型数据需要着眼于事务</li><li>必须考虑将要进入数据仓库的新创建记录的输出问题。</li></ul><h4 id="ETL工具"><a href="#ETL工具" class="headerlink" title="ETL工具"></a>ETL工具</h4><p>一般分为产生源代码的软件和参数化的运行时模块的软件</p><p>产生源代码的软件比较强大，可以直接访问原有数据，但是另一种需要对数据进行统一。两种软件都能使得数据从操作型数据源中集成的过程自动进行</p><h4 id="数据目标"><a href="#数据目标" class="headerlink" title="数据目标"></a>数据目标</h4><h5 id="原子层和集成数据（偏重点）"><a href="#原子层和集成数据（偏重点）" class="headerlink" title="原子层和集成数据（偏重点）"></a>原子层和集成数据（偏重点）</h5><p>原子层是数据仓库的基础，上层分析型应用的数据来源。</p><p>具有一下特点：</p><blockquote><ul><li>保持历史集成性（历史完整性）</li><li>拥有数据仓库的最低细节（粒度）数据</li><li>构建是迭代的</li><li>数据结构是面向企业的</li><li>可以是集成的</li><li>是静态的</li></ul></blockquote><p><strong>数据粒度：对数据仓库中的数据的综合程度的一个度量</strong></p><p>关于多重粒度还是参考PPT吧，不好整理</p><h5 id="数据集市"><a href="#数据集市" class="headerlink" title="数据集市"></a>数据集市</h5><p>在之后单独进行介绍</p><h5 id="操作数据存储"><a href="#操作数据存储" class="headerlink" title="操作数据存储"></a>操作数据存储</h5><p>操作数据存储在企业范围内，针对特定主题区域，用于支持战术决策支持（ tactics decision-making）的综合数据的更新集合。</p><blockquote><ul><li>面向特定分析应用</li><li>完整性</li><li>当前有效</li><li>可变的</li><li>详尽的</li></ul></blockquote><h5 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h5><p>数据流的中间站</p><p>无特定结构</p><p>系统中可能存在多处缓冲</p><h4 id="数据刷新-1"><a href="#数据刷新-1" class="headerlink" title="数据刷新"></a>数据刷新</h4><p>数据仓库系统需要感知数据库中数据的变化情况，并有效的把这些变化反映到数据仓库中去。</p><p>一般的数据刷新的方法有：</p><ol><li><p>时间戳</p><blockquote><p>若数据库中的记录有时间属性就可以建立时间戳，但是一般的数据库系统中并没有时间属性</p></blockquote></li><li><p>DELTA文件</p><blockquote><p>部分基于OLTP的数据库的操作型应用程序在工作过程中会生成DELTA文件，可以避免扫描整个数据库，效率较高，但是这种应用程序不是很普遍，修改现有应用程序的工作量太大</p></blockquote></li><li><p>映像文件</p><blockquote><p>对上一次数据刷新之后的数据库做快照，之后再来一次，比较两个快照，队伍数据库和操作型应用基本上没有任何限制，但是需要占用大量的系统资源，可能会较大的影响性能。</p></blockquote></li><li><p>日志文件</p><blockquote><p>一般来说现代OLTP数据库都有日志文件。是数据库的固有机制，不会影响性能，效率是最高的，但是并不适用于老版本的（无日志文件机制的）数据库</p></blockquote></li></ol><p>数据仓库中可以同时采用四种方法。</p><h4 id="数据周期"><a href="#数据周期" class="headerlink" title="数据周期"></a>数据周期</h4><p>指操作型环境中数据发生变化后反映到数据仓库的时间。一般不低于24小时。过于频繁太贵，技术太复杂，且不稳定。</p><h4 id="数据仓库中的数据以及管理"><a href="#数据仓库中的数据以及管理" class="headerlink" title="数据仓库中的数据以及管理"></a>数据仓库中的数据以及管理</h4><p>数据基本上是为了提供分析决策系统的继承数据，需要借助成熟的数据库技术对其进行存储管理。</p><h4 id="数据仓库的数据组成形式"><a href="#数据仓库的数据组成形式" class="headerlink" title="数据仓库的数据组成形式"></a>数据仓库的数据组成形式</h4><h5 id="简单堆积文件"><a href="#简单堆积文件" class="headerlink" title="简单堆积文件"></a>简单堆积文件</h5><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/6.png" alt="简单堆积文件"></p><h5 id="轮转综合文件"><a href="#轮转综合文件" class="headerlink" title="轮转综合文件"></a>轮转综合文件</h5><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/7.png" alt="轮转综合文件"></p><h5 id="简化直接文件"><a href="#简化直接文件" class="headerlink" title="简化直接文件"></a>简化直接文件</h5><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/8.png" alt="简化直接文件"></p><h5 id="连续文件"><a href="#连续文件" class="headerlink" title="连续文件"></a>连续文件</h5><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/9.png" alt="连续文件"></p><h4 id="数据仓库中的快照"><a href="#数据仓库中的快照" class="headerlink" title="数据仓库中的快照"></a>数据仓库中的快照</h4><p>数据仓库可以使用快照形式的数据结构对某个特定时间点的数据进行记录。数据量不大时可以直接存储每一次变动的情况，但是当数据量变动增加时就要使用集成数据。</p><p>快照可以在重要活动发生或是定时触发。</p><p>快照的关键字可以是不唯一的。时间单元往往是指快照所描述的事情的发生时刻。主要数据是和关键字直接相关的非关键字数据。 </p><h4 id="元数据-1"><a href="#元数据-1" class="headerlink" title="元数据"></a>元数据</h4><p>元数据是关于数据的数据，描述了数据的结构、内容、编码、索引等。</p><p>元数据是数据仓库开发和维护的一个关键因素，也是保证数据抽取质量的依据。</p><blockquote><p>分类有以下几种：</p><ol><li><p>关于数据源的元数据</p><blockquote><p>现有业务系统的数据源的描述信息(数据结构等)</p></blockquote></li><li><p>关于数据模型的元数据</p><blockquote><p>描述仓库中有什么数据以及他们之间的关系。</p></blockquote></li><li><p>关于数据仓库映射的元数据</p><blockquote><p>一种映射相关的规则说明。</p></blockquote></li><li><p>关于数据仓库使用的元数据</p><blockquote><p>是数据仓库中的信息使用情况的描述，能帮助用户到数据仓库查询所需要的信息来解决企业问题。</p></blockquote></li></ol></blockquote><p>元数据一般处于数据仓库的上层。</p><p>元数据的作用：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/BI/10.png" alt="元数据作用"></p><p>元数据一般放在数据仓库中并且受到言数据管理系统的管理。</p><p><strong>元数据主要用于数据的抽取和刷新。</strong></p><p>数据仓库由于数据流量巨大，并行处理要求高，针对决策支持查询的优化以及支持多为分析</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 商务智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统问答二</title>
      <link href="/2020/11/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%97%AE%E7%AD%94%E4%BA%8C/"/>
      <url>/2020/11/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%97%AE%E7%AD%94%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="PPT相关内容"><a href="#PPT相关内容" class="headerlink" title="PPT相关内容"></a>PPT相关内容</h2><ol><li><p>什么是实模式，什么是保护模式</p><ul><li>实模式就是用基地址加偏移量就可以直接拿到物理地址的模式</li><li>保护模式就是不能直接拿到物理地址的模式</li></ul></li><li><p>什么是选择子</p><ul><li>选择子共16位，放在段选择寄存器里</li><li>低2位表示请求特权级</li><li>第3位表示选择GDT方式还是LDT方式</li><li>高13位表示在描述符表中的偏移(故描述符表的项数最多是2的 13次方)</li></ul></li><li><p>什么是描述符</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/os_ques1.png" alt="描述符"></p><blockquote><p>BASE:段基址，由上图的两部分（BASE 31-24和 BASE 23-16）</p><p>G:LIMIT的单位，该位0表示单位是字节，1表示单位是4KB</p><p>D/B:该位是0表示这是一个16位的段，1表示这是一个32位段</p><p>AVL:该位是用户位，可以被用户自由使用</p><p>LIMIT:段的界限，单位由G位决定，数值上（经过单位换算后的值）等于段的长度</p><p>P:段存在位，该位为0表示该段不存在，为1表示存在</p><p>DPL:段权限</p><p>S:该位为1表示这是一个数据段或者代码段，为0表示这是一个系统段（比如调用门，中断门等）</p><p>TYPE:根据S位的结果，再次对段类型进行细分</p></blockquote><p>其中，段界限表示段边界的扩张最值，即最大扩展多少或最小扩展多少，用20位来表示，它的单位可以是字节，也可以是4KB，这是由G位决定的(G为1时表示单位为4KB)。</p><p>实际段界限边界值=(描述符中的段界限+1)*（段界限的单位大小(即字节或4KB))-1，如果偏移地址超过了段界限，CPU会抛出异常。</p><p>全局描述符表位于内存中，需要用专门的寄存器指向它后， CPU 才知道它在哪里。这个专门的寄存器便是GDTR(一个48位的寄存器),专门用来存储 GDT 的内存地址及大小。</p></li><li><p>什么是GDT，什么是LDT</p><ul><li>GDT:全局描述符表，是全局唯一的。存放一些公用的描述符、 和包含各进程局部描述符表首地址的描述符。</li><li>LDT:局部描述符表，每个进程都可以有一个。存放本进程内使 用的描述符。</li></ul></li><li><p>请分别说明GDTR和LDTR的结构</p><ul><li>GDTR:48位寄存器，高32位放置GDT首地址，低16位放置GDT 限长(限长决定了可寻址的大小，注意低16位放的不是选择子)</li><li>LDTR:16位寄存器，放置一个特殊的选择子，用于查找当前进 程的LDT首地址。</li></ul></li><li><p>请说明GDT直接查找物理地址的具体步骤</p><ul><li>给出段选择子(放在段选择寄存器里)+偏移量</li><li>若选择了GDT方式，则从GDTR获取GDT首地址，用段选择 子中的13位做偏移，拿到GDT中的描述符</li><li>如果合法且有权限，用描述符中的段首地址加上(1)中的 偏移量找到物理地址。寻址结束</li></ul></li><li><p>请说明通过LDT查找物理地址的具体步骤</p><ul><li>给出段选择子(放在段选择寄存器中)+偏移量</li><li>若选择了LDT方式，则从GDTR获取GDT首地址，用LDTR 中的偏移量做偏移，拿到GDT中的描述符1</li><li>从描述符1中获取LDT首地址，用段选择子中的13位做偏移， 拿到LDT中的描述符2</li><li>如果合法且有权限，用描述符2中的段首地址加上(1)中 的偏移量找到物理地址。寻址结束。</li></ul></li><li><p>根目录区大小一定吗？扇区号是多少？为什么？</p><ul><li>不一定，通过BPB_RootEntCnt（根目录文件数的最大值，比如0xE0）来计算根目录的大小，具体计算公式是</li><li>根目录区占用扇区数 = RootDirSectors = (BPB_RootEntCnt*32(一个目录项占32个字节))/BPB_BytesPerSec（一个扇区的字节数，比如512）</li><li>典型值：19</li></ul></li><li><p>数据区第一个簇号是多少？为什么</p><ul><li>起始簇号是2</li><li>在 1.44M 软盘上，FAT 前三个字节的值必须是固定的，分别是 0xF0、0xFF、0xFF，用于表示这是一个应用在 1.44M 软盘上的 FAT12 文件系统。本来序号为 0 和 1 的 FAT 表项应该对应于簇 0 和簇 1，但是由于这两个表项被设置成了固定值，簇 0 和簇 1 就没有存在的意义了。</li></ul></li><li><p>FAT表的作用</p><p>文件分配表被划分为紧密排列的若干个表项，每个表项都与数据区中的一个簇相对应，而且表项的序号也是与簇号一一对应的。用于寻找下一个簇号</p></li><li><p>解释静态链接的过程</p><ul><li><p>静态链接是由链接器在链接时将库的内容加入到可执行程序中的做法。</p><p>在编译 main.c 的时候，编译器还不知道 printf 函数的地址，所以在编译阶段只是将一个“临时地址”放到目标文件中，在链接阶段，这个“临时地址”将被修正为正确的地址，这个过程叫重定位。所以链接器还要知道该目标文件中哪些符号需要重定位，这些信息是放在了重定位表中。</p><p>在链接的时候，我们需要告诉链接器需要链接的目标文件和库文件（默认 gcc 会把标准库作为链接器输入的一部分）。链接器会根据输入的目标文件从库文件中提取需要目标文件。</p><p>知道了这些信息后，链接器就可以开始工作了，分为两个步骤：</p><p>1）合并相似段，把所有需要链接的目标文件的相似段放在可执行文件的对应段中。</p><p>2）重定位符号使得目标文件能正确调用到其他目标文件提供的函数。</p></li></ul></li><li><p>解释动态链接的过程</p><p>所谓动态链接就是在运行的时候再去链接。从动态库的角度来看，动态库像普通的可执行文件一样，有其代码段和数据段。为了使得动态库在内存中只有一份，需要做到不管动态库装载到什么位置，都不需要修改动态库中代码段的内容，从而实现动态库中代码段的共享。而数据段中的内容需要做到进程间的隔离，因此必须是私有的，也就是每个进程都有一份。因此，动态库的做法是把代码段中变化的部分放到数据段中去，这样代码段中剩下的就是不变的内容，就可以装载到虚拟内存的任何位置。那代码段中变化的内容是什么，主要包括了对外部函数和变量的引用。</p><p>动态库是把地址相关的内容放到了数据段中来实现地址无关的代码，从而使得动态库能被多个进程共享。</p><p>动态链接生成的可执行文件运行前，系统会首先将动态链接库加载到内存中。当所有的库都被加载进来以后，类似于静态链接，动态链接器从各个动态库中可以知道每个库都提供什么函数（符号表）和哪些函数引用需要重定位（重定位表），然后修正.got 和.got.plt 中的符号到正确的地址，完成之后就可以将控制权交给可执行文件的入口地址，从而开始执行我们编写的代码了。</p></li><li><p>静态链接相关PPT中为什么使用ld链接而不是gcc</p><p>用 gcc 的话有可能去调 C 库，使程序环境变得复杂，所以用 ld</p><p>gcc会自动链接操作系统的库，有时我们并不想这么操作。ld就老实多了，只会链接参数中所规定的。</p></li><li><p>Linux下可执行文件的虚拟地址空间默认从哪里开始</p><p>linux 下，ELF 可执行文件默认从地址 0x08048000 开始分配</p></li></ol><h2 id="实验相关内容"><a href="#实验相关内容" class="headerlink" title="实验相关内容"></a>实验相关内容</h2><ol><li><p>BPB指定字段的含义</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/os_ques2.png" alt="BPB"></p></li><li><p>如何进入子目录并输出</p></li><li><p>如何获得指定文件的内容，即如何获得数据区的内容</p></li><li><p>如何进行C代码和汇编之间的参数传递和返回值传递</p></li><li><p>汇编代码中对I/O的处理方式，说明指定寄存器所存值的含义</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对Hexo博客版本进行升级</title>
      <link href="/2020/11/06/%E5%AF%B9Hexo%E5%8D%9A%E5%AE%A2%E7%89%88%E6%9C%AC%E8%BF%9B%E8%A1%8C%E5%8D%87%E7%BA%A7/"/>
      <url>/2020/11/06/%E5%AF%B9Hexo%E5%8D%9A%E5%AE%A2%E7%89%88%E6%9C%AC%E8%BF%9B%E8%A1%8C%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于我的hexo博客的搭建时间比较早，主题更新之后只支持更新的hexo版本，所以需要对已有的hexo博客的版本进行升级。</p><h2 id="升级过程"><a href="#升级过程" class="headerlink" title="升级过程"></a>升级过程</h2><ol><li><p>首先全局升级hexo脚手架也就是hexo-cli，使用<code>hexo version</code>对hexo和hexo-cli的版本进行查看。使用命令进行升级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br><span class="line">hexo version</span><br></pre></td></tr></table></figure><p>再次确认cli升级成功</p></li><li><p>使用命令查看系统中待升级的插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-check</span><br><span class="line">npm-check</span><br></pre></td></tr></table></figure></li><li><p>升级所有可升级插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-upgrade</span><br><span class="line">npm upgrade</span><br></pre></td></tr></table></figure></li><li><p>最后进行升级收尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm update -g </span><br><span class="line">npm update --save</span><br></pre></td></tr></table></figure></li></ol><h2 id="生成博客"><a href="#生成博客" class="headerlink" title="生成博客"></a>生成博客</h2><p>最后对hexo进行确认，使用<code>hexo g</code>生成博客，如果生成成功且没有报错则升级成功。</p><p>PS：hexo升级之后的<code>_config.yml</code>文件可能会有变化，可以参照hexo的官方文档。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客添加RSS订阅</title>
      <link href="/2020/11/06/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0RSS%E8%AE%A2%E9%98%85/"/>
      <url>/2020/11/06/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0RSS%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<h2 id="安装所需插件"><a href="#安装所需插件" class="headerlink" title="安装所需插件"></a>安装所需插件</h2><p>hexo博客中有一个可以生成RSS的xml文件的插件<code>hexo-generator-feed</code>，使用命令行对其进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure><h2 id="启用插件"><a href="#启用插件" class="headerlink" title="启用插件"></a>启用插件</h2><p>安装成功之后通过hexo博客根目录下的<code>_config.yml</code>文件的修改来启用插件，修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line">    <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">atom</span> <span class="comment"># 生成的类型，RSS对应atom</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">atom.xml</span> <span class="comment"># 生成的文件名</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">20</span> <span class="comment"># 选取推送的文章数量</span></span><br></pre></td></tr></table></figure><h2 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h2><p>通过<code>hexo g</code>生成新的public目录，已经能看到里面有atom.xml文件了。</p><p>发布之后就可以进行正常使用</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化测试复习提纲之AI测试（三）</title>
      <link href="/2020/11/03/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%E4%B9%8BAI%E6%B5%8B%E8%AF%95%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2020/11/03/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%E4%B9%8BAI%E6%B5%8B%E8%AF%95%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="智能软件"><a href="#智能软件" class="headerlink" title="智能软件"></a>智能软件</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto25.png" alt="生命周期"></p><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><ul><li>分类识别 -&gt; 目标检测 -&gt; 语义分割 -&gt; 实例分割</li></ul><h4 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h4><ul><li><p>互联网公开获取:</p><ul><li>公开数据集（kaggle、UCI）、爬虫（付费API）</li></ul></li><li><p>专业数据采集:</p><ul><li>采集内容、采集规模、预算</li><li>采集过程要尽量与实际使用场景相一致</li></ul></li></ul><h4 id="数据标注"><a href="#数据标注" class="headerlink" title="数据标注"></a>数据标注</h4><ul><li>数据清洗:根据来源不同，很多都需要清洗，例如爬虫、监控视频</li><li>数据标注:<ul><li>数据标注软件</li><li>众包任务标注</li><li>领域专家标注</li></ul></li></ul><h4 id="模型设计与训练"><a href="#模型设计与训练" class="headerlink" title="模型设计与训练"></a>模型设计与训练</h4><ul><li>神经网络</li><li>预防过拟合与欠拟合</li></ul><h4 id="模型测试与部署"><a href="#模型测试与部署" class="headerlink" title="模型测试与部署"></a>模型测试与部署</h4><ul><li>准确性、鲁棒性、安全性的保证</li><li>部署到框架中</li></ul><h3 id="智能软件测试"><a href="#智能软件测试" class="headerlink" title="智能软件测试"></a>智能软件测试</h3><h4 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h4><h5 id="决策逻辑"><a href="#决策逻辑" class="headerlink" title="决策逻辑"></a>决策逻辑</h5><ul><li>传统软件的决策逻辑:<ul><li>程序代码控制决策逻辑</li></ul></li><li>智能软件的决策逻辑:<ul><li>深度学习模型的结构</li><li>训练后得到的权重节点</li></ul></li></ul><h5 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h5><ul><li>传统软件系统程序特征：控制流和数据流构建的业务处理</li><li>智能软件系统程序特征：数据驱动构建的参数化数值计算</li><li>智能软件系统的缺陷往往不是显式的代码或参数错误</li></ul><h4 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动</h4><ul><li>使用容量更大、更复杂的模型，效果更好的算法</li><li>数据规模可以短时间内迅速扩大</li></ul><h4 id="难题"><a href="#难题" class="headerlink" title="难题"></a>难题</h4><ul><li>数据量不够</li><li>低质量数据</li><li>数据分布不均</li><li>不充分测试</li></ul><h2 id="模糊测试"><a href="#模糊测试" class="headerlink" title="模糊测试"></a>模糊测试</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ul><li>通过异常的输入自动化发现待测程序缺陷的技术。</li><li>预期输入：变异数据</li><li>预期输出：断言失败、无效输入、异常崩溃、错误输出</li></ul><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto26.png" alt="流程"></p><h4 id="测试难题"><a href="#测试难题" class="headerlink" title="测试难题"></a>测试难题</h4><ul><li>无法穷举所有输入</li><li>无法想到所有场景</li><li>无法判定测试的预期输出</li></ul><h4 id="解决难题"><a href="#解决难题" class="headerlink" title="解决难题"></a>解决难题</h4><ul><li>大数定律：测试次数多 + 数据随机生成 = 概率低的偶然现象发生</li></ul><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto27.png" alt="对比图"></p><h3 id="技术分类"><a href="#技术分类" class="headerlink" title="技术分类"></a>技术分类</h3><h4 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h4><ul><li>只关注输入和输出</li><li>对界面、功能测试</li><li>用户视角</li></ul><h4 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h4><ul><li>测试所有路径逻辑</li><li>对软件内部动作、结构、路径测试</li></ul><h4 id="灰盒测试"><a href="#灰盒测试" class="headerlink" title="灰盒测试"></a>灰盒测试</h4><ul><li>已知逻辑指导测试</li><li>关注输出对于输入的正确性、内部表现</li></ul><h3 id="用例生成分类"><a href="#用例生成分类" class="headerlink" title="用例生成分类"></a>用例生成分类</h3><h4 id="基于生成"><a href="#基于生成" class="headerlink" title="基于生成"></a>基于生成</h4><ul><li>需要学习目标测试协议结构</li><li>从0生成测试用例</li><li>测试层次深</li></ul><h4 id="基于变异"><a href="#基于变异" class="headerlink" title="基于变异"></a>基于变异</h4><ul><li>学习已有数据模型</li><li>扩增已有测试用例</li><li>用例数量多但是不稳定</li></ul><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto28.png" alt="变异"></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto29.png" alt="静态动态分析"></p><h3 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h3><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto30.png" alt="挑战"></p><ul><li>结果很难预测</li><li>通过的准则很难确定</li><li>输出结果随时间变化</li><li>需要更高效的持续测试方法</li><li>性能依赖于数据</li></ul><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li>识别，完善所需的所有算法。</li><li>收集大量的输入数据来训练AI。</li><li>AI如何处理输入数据。</li><li>AI会重复任务，即使数据输入是新的。</li><li>训练AI的过程永远不会结束，因为算法正被不断改进</li></ul><h3 id="方法框架"><a href="#方法框架" class="headerlink" title="方法框架"></a>方法框架</h3><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto31.png" alt="方法框架"></p><h4 id="种子集准备"><a href="#种子集准备" class="headerlink" title="种子集准备"></a>种子集准备</h4><ul><li>初始种子</li><li>预处理</li><li>种子打包形成语料集</li><li>语料集筛选规则</li></ul><h4 id="过程引导"><a href="#过程引导" class="headerlink" title="过程引导"></a>过程引导</h4><ul><li>语料集采样：语料集采样根据模糊测试变异方法从送入过程引导的语料集中形成符合变异方法输入的种子元组。</li><li>能量函数：旨在通过对语料集进行变异成功率检测实现在同样的测试计算资源尽可能生成多的能够成功变异的测试数据。</li><li>数据变异：根据所选用的变异方法，对选取的原始测试数据施加扰动，生成新的测试输入。</li><li>健康测试：根据所测试的程序制定了一定的规则用来检测模糊测试变异的测试数据是否有效。</li></ul><h4 id="结果验证"><a href="#结果验证" class="headerlink" title="结果验证"></a>结果验证</h4><ul><li>结果参照物：是否产生运行崩溃、结果参考物对比</li><li><p>结果分析：覆盖率分析、传统反馈</p></li><li></li></ul><h3 id="测试数据生成"><a href="#测试数据生成" class="headerlink" title="测试数据生成"></a>测试数据生成</h3><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto32.png" alt="测试数据生成"></p><h4 id="文本数据"><a href="#文本数据" class="headerlink" title="文本数据"></a>文本数据</h4><ul><li>加噪：同义词替换、随即插入、随即交换、随即删除</li><li>回译：中文翻译英文再翻译回中文</li></ul><h4 id="图像数据"><a href="#图像数据" class="headerlink" title="图像数据"></a>图像数据</h4><ul><li>翻转、旋转、缩放等等</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>结果反馈和结果分析都由深度学习模型提供</li><li>模型同时指导语料集的维护（灰盒测试）</li></ul><h4 id="模型反馈"><a href="#模型反馈" class="headerlink" title="模型反馈"></a>模型反馈</h4><ul><li>测试覆盖率划分语料集优先级<ul><li>提高测试覆盖率——新的种子</li><li>更易变异——更高的优先级</li><li>被选取次数较少——更高的优先级</li></ul></li></ul><h4 id="算子测试数据生成"><a href="#算子测试数据生成" class="headerlink" title="算子测试数据生成"></a>算子测试数据生成</h4><ul><li>组成神经网络模型，算子接口<ul><li>目标：测试算子库，精准快速测试</li><li>方法：差分测试与模糊测试结合</li></ul></li></ul><h2 id="图像扩增"><a href="#图像扩增" class="headerlink" title="图像扩增"></a>图像扩增</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="数据扩增"><a href="#数据扩增" class="headerlink" title="数据扩增"></a>数据扩增</h4><ul><li>通过轻微变换现有数据或创建新的合成图像来得到新数据的技术。应用领域有图像扩增、文本扩增、雷达扩增……</li></ul><h4 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h4><ul><li>扩增后的标签保持不变/相应修改标签。Ex. 6 -&gt; 9 (x)</li><li>扩增需要基于先验知识。针对不同任务和场景，数据扩增的策略不同。Ex. 猫身上增加斑点</li><li>不引入无关的数据。Ex. 猫的图片集中添加狗</li></ul><h4 id="图像基本属性"><a href="#图像基本属性" class="headerlink" title="图像基本属性"></a>图像基本属性</h4><ul><li>亮度：颜色的明暗变化。灰度图像的明暗与灰度值有关。</li><li>对比度：一幅图像中明暗区域最亮的白和最暗的黑之间不同亮度层级的测量，也体现了从黑到白的渐变层次。</li><li>饱和度：色彩的鲜艳程度，也称作纯度。饱和度为0就是灰度图像。</li><li>灰度直方图：描述图像中灰度分布情况，描述图像中具有该灰度级的像素的个数。$p(r_k)=\frac{n_k}{MN},r_k灰度级,n_k具有灰度R_k的像素个数,MN总像素个数$。</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="原样本扩增"><a href="#原样本扩增" class="headerlink" title="原样本扩增"></a>原样本扩增</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto33.png" alt="原样本扩增"></p><h4 id="单样本扩增"><a href="#单样本扩增" class="headerlink" title="单样本扩增"></a>单样本扩增</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto34.png" alt="单样本扩增"></p><ul><li>两阶段：找到可能包含物体的区域 -&gt; 对该区域进行分类</li><li>单阶段：图片缩放划分等分网络，并且卷积后过滤获得最后预测框。</li><li>特征合成：基于规则、基于分割确定合成区域</li></ul><h4 id="多样本扩增"><a href="#多样本扩增" class="headerlink" title="多样本扩增"></a>多样本扩增</h4><ul><li><p>样本级合成：标签a的特征 + 标签b的特征 = 标签a</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto35.png" alt="多样本扩增"></p></li><li><p>特征级合成：将不同特征在同一张图上面重新排列组合</p></li><li><p>标签降级：变成不同的特征</p></li></ul><h3 id="医疗图像扩增"><a href="#医疗图像扩增" class="headerlink" title="医疗图像扩增"></a>医疗图像扩增</h3><h4 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h4><ul><li>患者隐私保护，医学影像匮乏</li><li>共享临床数据困难</li><li>影像质量参差不齐</li><li>需要专家手动贴标签</li></ul><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>图像中不同形式的细微结构可能代表某种病变</li><li>不能保证扩增的质量</li><li>不同疾病要使用不同的扩增方法</li></ul><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto36.png" alt="过程"></p><ul><li>无损变换：不改变其中内在的病症特征，避免破坏医学图像中的关键结构。Ex. 翻转、倾斜</li><li>非刚性变换：人体组织器官、细胞生长、病变皆非刚性。通过非线性的拉伸、扩张等方法改变图像的内部信息。Ex. 弹性变换、高斯畸变。</li><li>基础图像变换： Ex. 随即裁剪、随即擦除、缩放变换</li><li>病灶区域扩增<ul><li>通过对一张图像的病灶区域覆盖范围进行变化，模拟病症发展的范围。</li><li>随机组合病情某个时期可能出现的征象。</li><li>可改变征象在图像中的位置以及出现的数量。</li></ul></li><li>非病灶区域扩增：保留关键信息，保证扩增数据的有效性。测试医疗图像分类模型针对非病灶区域的分类结果是否具有不变性。Ex. 对非病灶区域添加噪声、颜色变换……</li></ul><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>在系统优化层面，通过医疗图像数据扩增技术扩展训练数据集，从而提高系统的精度和泛化能力。</li><li>在系统评估层面，将扩增后得到的医疗数据集作为测试数据集，通过大量数据的测试，对医疗智能诊断系统的鲁棒性进行评估。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化测试复习提纲之移动测试（二）</title>
      <link href="/2020/11/03/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%E4%B9%8B%E7%A7%BB%E5%8A%A8%E6%B5%8B%E8%AF%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/11/03/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%E4%B9%8B%E7%A7%BB%E5%8A%A8%E6%B5%8B%E8%AF%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="基于图像理解的移动应用自动化测试"><a href="#基于图像理解的移动应用自动化测试" class="headerlink" title="基于图像理解的移动应用自动化测试"></a>基于图像理解的移动应用自动化测试</h2><h3 id="自动化脚本录制与回放"><a href="#自动化脚本录制与回放" class="headerlink" title="自动化脚本录制与回放"></a>自动化脚本录制与回放</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>GUI测试脚本录制<ul><li>基于坐标</li><li>基于控件树</li><li>基于图像</li></ul></li><li>大多数移动应用在不同平台上设计的UI布局结构极为相似，因此可以利用这种相似性进行移动应用的GUI 测试脚本录制与回放</li></ul><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto9.png" alt="框架"></p><h4 id="脚本结构"><a href="#脚本结构" class="headerlink" title="脚本结构"></a>脚本结构</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto10.png" alt="脚本结构"></p><h4 id="脚本录制"><a href="#脚本录制" class="headerlink" title="脚本录制"></a>脚本录制</h4><ul><li>屏幕截图</li><li>控件截图</li><li>操作类型与操作位置</li><li>设备分辨率、设备序列号</li></ul><h4 id="脚本回放"><a href="#脚本回放" class="headerlink" title="脚本回放"></a>脚本回放</h4><h5 id="图像特征对比"><a href="#图像特征对比" class="headerlink" title="图像特征对比"></a>图像特征对比</h5><ul><li>根据图标的特征进行比对，找到正确图标。</li><li>根据屏幕特征点进行比对，找到正确跳转画面。</li><li>最后，根据两个特征描述进行特征匹配，确定需要进行操作的控件。</li></ul><h5 id="布局刻画"><a href="#布局刻画" class="headerlink" title="布局刻画"></a>布局刻画</h5><ul><li>计算机视觉算法找到所有GUI截图中的控件位置</li><li>利用OCR技术提取GUI截图中的文本</li><li>为所提取出来的控件划分控件组、行和列</li></ul><h5 id="坐标校正"><a href="#坐标校正" class="headerlink" title="坐标校正"></a>坐标校正</h5><ul><li>基于布局识别的控件定位<ul><li>容易受不同平台的外部布局的影响</li><li>不易受到图像变化的影响</li></ul></li><li>基于图像匹配的控件定位<ul><li>容易受到图像变化的影响</li><li>不易受到不同平台的外部布局的影响</li></ul></li><li>为了结合二者的优点，提升算法的鲁棒性，引入权重参数$r$<ul><li>$final = r<em>layout + (1-r)</em>image$</li></ul></li></ul><h3 id="基于图文理解的报告排序"><a href="#基于图文理解的报告排序" class="headerlink" title="基于图文理解的报告排序"></a>基于图文理解的报告排序</h3><h4 id="众包测试"><a href="#众包测试" class="headerlink" title="众包测试"></a>众包测试</h4><ul><li>可以向开发者提供多种不同软硬件平台支持的真实用户数据和操作信息</li><li>测试报告数量庞大、人工审查过于耗时</li><li>需要有种定义和排序测试报告的技术</li></ul><h4 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h4><ul><li>少量文字 + BUG截图</li><li>原则：越早发现的BUG，越容易修复</li></ul><h4 id="技术概述"><a href="#技术概述" class="headerlink" title="技术概述"></a>技术概述</h4><ul><li>文本 + 图片结合分析</li></ul><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto11.png" alt="技术概述"></p><h4 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h4><ul><li><p>自然语言处理</p><ul><li><p>关键词提取：通过CRF（Conditional Random Fields）来分词</p></li><li><p>文本距离：采用SVM(Support Vector Machine)来标记词性</p></li></ul></li><li><p>Jaccard距离</p><ul><li>测试报告集$R(r) = \{(S_i, T_i)|i=0,…,n\}$，$S$是屏幕截图，$T$是文本</li><li>计算文本$T_i$间的距离</li></ul><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto12.png" alt="DT"></p></li></ul><h4 id="截图处理"><a href="#截图处理" class="headerlink" title="截图处理"></a>截图处理</h4><ul><li><p>操作</p><ul><li><p>图片 -&gt; 特征向量</p></li><li><p>分辨率、背景问题，不可直接简单RGB计算</p></li><li><p>chi-square距离</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto13.png" alt="chi-square"></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto14.png" alt="chi-square"></p></li></ul></li><li><p>截图的集合</p><ul><li><p>设定阈值$\gamma$筛选出内容相同的图片并求平均合并（同一份报告中的图片筛选 -&gt; 不同报告图片集合筛选）</p></li><li><p>测试报告$r_i,r_j$，筛选后的截图集合$S_i,S_j$</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto15.png" alt="DS"></p></li></ul></li></ul><h4 id="图文结合"><a href="#图文结合" class="headerlink" title="图文结合"></a>图文结合</h4><ul><li>文本DT，图片DS</li><li>DT相同，则判为相似</li><li>无截图DS，则DT决定</li><li>其他计算BD</li></ul><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto16.png" alt="BD"></p><h3 id="基于深度图文理解的报告排序"><a href="#基于深度图文理解的报告排序" class="headerlink" title="基于深度图文理解的报告排序"></a>基于深度图文理解的报告排序</h3><ul><li>就是上面那个报告排序的改进版</li></ul><h4 id="技术框架"><a href="#技术框架" class="headerlink" title="技术框架"></a>技术框架</h4><ul><li>计算机视觉提取控件</li><li>NLP技术分解文本</li><li>建立DeepFeature<ul><li>Bug Feature (BFT):$W_p + P$</li><li>Context Feature (CFT):$W_c + R$</li></ul></li></ul><h4 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h4><ul><li><p>图片特征</p><ul><li>问题控件：定位产生Bug的控件元素</li><li>上下文控件：除问题控件之外的其他控件</li></ul></li><li><p>文本特征</p><ul><li>DL算法处理文本</li><li>Bug描述</li><li>复现步骤</li></ul></li></ul><h4 id="特征聚合"><a href="#特征聚合" class="headerlink" title="特征聚合"></a>特征聚合</h4><ul><li>Bug Feature (BFT)：与缺陷直接相关，包括问题控件和缺陷描述</li><li>Context Feature (CFT)：为缺陷构建上下文，包括上下文控件和复现步骤</li></ul><h4 id="相似度计算"><a href="#相似度计算" class="headerlink" title="相似度计算"></a>相似度计算</h4><ul><li>将所有报告初始化到未排序报告池中</li><li>向已排序报告池中添加Null Report<ul><li>Null Report：一种预定义的测试报告</li></ul></li><li>从未排序报告池中，选出一份和已排序报告池中最不相似的报告加入到已排序报告池中，循环调用</li></ul><h3 id="基于图像理解的测试报告生成"><a href="#基于图像理解的测试报告生成" class="headerlink" title="基于图像理解的测试报告生成"></a>基于图像理解的测试报告生成</h3><h4 id="背景描述"><a href="#背景描述" class="headerlink" title="背景描述"></a>背景描述</h4><ul><li>移动应用测试报告<ul><li>测试环境</li><li>缺陷截图</li><li>缺陷描述</li></ul></li><li>期望通过Computer Vision和Deep Learning来综合理解截图，然后自动生成文本描述。</li></ul><h4 id="技术框架-1"><a href="#技术框架-1" class="headerlink" title="技术框架"></a>技术框架</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto17.png" alt="框架"></p><ul><li>截图翻译：从模块截图提取特征向量，生成缺陷描述</li><li>文本提取：从截图提取文本信息并通过关键词列表筛选缺陷相关文本</li><li>报告生成：聚类生成的文本，最终缺陷报告。</li></ul><h4 id="截图翻译"><a href="#截图翻译" class="headerlink" title="截图翻译"></a>截图翻译</h4><ul><li>将缺陷截图转化为一组描述</li><li>截图编码器：从截图中提取缺陷特征<ul><li>CNN：Inception-v3转化截图</li></ul></li><li>缺陷描述解码器：通过缺陷特征生成描述<ul><li>RNNs：最大化目标函数</li><li>LSTM：Long Short Term Memory，缺陷描述语言模型</li><li>Softmax层：生成下一个相关词汇</li><li>BeamSearch：生成描述</li></ul></li></ul><h4 id="文本提取"><a href="#文本提取" class="headerlink" title="文本提取"></a>文本提取</h4><ul><li>目的是识别截图中的缺陷相关文本最为描述</li><li>字符识别器：从截图中提取文本<ul><li>OCR</li></ul></li><li>关键词过滤器：筛选出缺陷相关的文本<ul><li>预定义的关键词列表</li></ul></li></ul><h4 id="报告生成"><a href="#报告生成" class="headerlink" title="报告生成"></a>报告生成</h4><ul><li>将截图翻译模块和文本提取模块的输出结合起来：使用文本聚类聚合不同类型的缺陷</li><li>两个模块可能产生类似的报告，讲述相同的缺陷。</li><li>处理文本聚类的方法：<ul><li>TF－IDF：将文本转化为向量</li><li>K-Means：聚类算法</li></ul></li></ul><h2 id="基于群智协同的众包测试"><a href="#基于群智协同的众包测试" class="headerlink" title="基于群智协同的众包测试"></a>基于群智协同的众包测试</h2><h3 id="协作式众包测试"><a href="#协作式众包测试" class="headerlink" title="协作式众包测试"></a>协作式众包测试</h3><ul><li>协同测试：众测系统上发布测试任务（任务发布者）</li><li>质量保证：众包工人参与测试任务，协作方式完成BUG报告（众包工人）</li><li>聚合交付：识别并剔除恶意众包工人，审核报告并交付缺陷列表（管理者）</li></ul><h3 id="协同推荐"><a href="#协同推荐" class="headerlink" title="协同推荐"></a>协同推荐</h3><ul><li>信息共享：用户在提交报告时进行实施实时相似报告推荐，避免重复报告。</li><li>任务分配：用户提交报告后会对其进行审核报告推荐和测试页面推荐，避免部分页面无法被测试。</li><li>协作方式：用户对于相似报告和审核报告的推荐结果，可以点赞、踩点，利用用户的交叉审核，验证报告有效性。</li></ul><h4 id="推荐算法"><a href="#推荐算法" class="headerlink" title="推荐算法"></a>推荐算法</h4><ul><li>相似报告推荐：找报告间向量最短的</li><li>测试页面推荐：多元加权最短路径</li><li>审核报告推荐：基于用户历史评分的矩阵分解</li></ul><h3 id="质量保证"><a href="#质量保证" class="headerlink" title="质量保证"></a>质量保证</h3><h4 id="众包工人"><a href="#众包工人" class="headerlink" title="众包工人"></a>众包工人</h4><ul><li>竞争式提交：不借鉴他人BUG报告，独立测试并提交报告。整体贡献归个人所有。</li><li>协作式提交：借鉴他人BUG报告，复制粘贴他人报告生成子报告。整体贡献归该报告生成路径上的众包工人共同所有。</li><li>审核：审核他人BUG报告，对他人报告点赞点踩，公众投票提供报告质量参考。</li></ul><h4 id="顺序图"><a href="#顺序图" class="headerlink" title="顺序图"></a>顺序图</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto18.png" alt="顺序图"></p><h4 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h4><ul><li>分析报告质量：分析报告BUG报告基本属性</li><li>提取报告质量：根据BUG报告属性与指标字典提取质量指标。</li><li>指标阶跃变换：根据节约变换函数将数值型的指标映射为相应的好与坏等级。</li><li>检测报告有效行：有效指标数量超过阈值则有效。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto19.png" alt="流程图"></p><h4 id="反馈与监控"><a href="#反馈与监控" class="headerlink" title="反馈与监控"></a>反馈与监控</h4><ul><li>反馈<ul><li>报告有效性反馈</li><li>报告重复性反馈</li><li>Fork操作反馈</li><li>点赞反馈</li><li>点踩反馈</li></ul></li><li>监控<ul><li>失信行为监控</li><li>点赞关系监控</li><li>踩点关系监控</li><li>Fork关系监控</li></ul></li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto20.png" alt="小结"></p><h3 id="聚合交付"><a href="#聚合交付" class="headerlink" title="聚合交付"></a>聚合交付</h3><ul><li>聚合阶段 -&gt; 融合阶段 -&gt; 围绕报告融合构建审核业务流程</li><li>构建一套基于报告融合的测试报告处理流程</li></ul><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto21.png" alt="聚合"></p><h4 id="聚合阶段"><a href="#聚合阶段" class="headerlink" title="聚合阶段"></a>聚合阶段</h4><ul><li>将原始报告拆分成图片与文本信息，计算相似度取平均。</li><li>聚类算法将相似报告聚合到一起。</li><li>保持算法的可替换性、可扩展性。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto22.png" alt="聚合阶段"></p><h4 id="融合阶段"><a href="#融合阶段" class="headerlink" title="融合阶段"></a>融合阶段</h4><ul><li>主报告选取</li><li>差异点识别</li><li>差一点聚类及合并</li><li>差异点排序</li></ul><h4 id="审核业务"><a href="#审核业务" class="headerlink" title="审核业务"></a>审核业务</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto23.png" alt="审核业务"></p><h3 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h3><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto24.png" alt="总体架构"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化测试复习提纲之源码测试（一）</title>
      <link href="/2020/11/03/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%E4%B9%8B%E6%BA%90%E7%A0%81%E6%B5%8B%E8%AF%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/11/03/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2%E4%B9%8B%E6%BA%90%E7%A0%81%E6%B5%8B%E8%AF%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="回归测试"><a href="#回归测试" class="headerlink" title="回归测试"></a>回归测试</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文由willy进行整理，18级软院复习提纲。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>版本迭代后，重新测试用例。</li><li>可有效保证代码修改的正确性并避免代码修改对被测程序其他模块产生的副作用。</li><li>部分代码修改会影响接口，导致测试用例失效。</li><li>新需求需要新用例</li></ul><h3 id="差分测试"><a href="#差分测试" class="headerlink" title="差分测试"></a>差分测试</h3><ul><li>通过向一系列类似的程序（或同一程序的不同实现）提供相同的输入，并观察它们执行过程中的差异，来检测BUG。</li><li>适合于发现语义或逻辑错误，这些错误不会表现出明显的错误行为，如崩溃或断言失败。</li><li>差分测试通过使用相同功能的不同实现方法的程序来测试语义BUG，在多次输入中找出输出和过程上面的不同。同一输入上的不同程序行为之间的任何差异都被标记为潜在的BUG。</li></ul><h3 id="蜕变测试"><a href="#蜕变测试" class="headerlink" title="蜕变测试"></a>蜕变测试</h3><ul><li>不知道测试结果的正确性</li><li>蜕变测试依据被测软件的领域知识和软件的实现方法建立蜕变关系(Metamorphic Relation, MR)，利用蜕变关系来生成新的测试用例，通过验证蜕变关系是否被保持来决定测试是否通过。蜕变关系(Metamorphic Relation, MR) 是指多次执行目标程序时，输入与输出之间期望遵循的关系。</li><li>Ex. 一个程序可以算sin，sin (270) = sin ($\pi$ - 270)，测试时将两者分别计算并比较。</li></ul><h3 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h3><ul><li>测试用例优先级（Test Case Prioritization，TCP）</li><li>测试用例集约减（Test Suite Reduction，TSR）</li><li>测试用例选择（Test Case Selection，TCS）</li></ul><h2 id="测试用例优先级"><a href="#测试用例优先级" class="headerlink" title="测试用例优先级"></a>测试用例优先级</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>依照某种策略赋予每个测试用例的不同优先级，重新排序测试执行序列来最大化错误检测速率。</li><li>优先级高的算法比优先级测试低的先执行</li><li>通用测试排序：后续版本的测试用例优先级更高</li><li>特定于版本的测试排序：不同版本特性测试用例优先级不同</li></ul><h3 id="主要策略"><a href="#主要策略" class="headerlink" title="主要策略"></a>主要策略</h3><p>给定测试用例集$T$，$T$的全排列集$PT$（所有可能执行顺序），排序目标函数$f$（排序效果评分，高分优先级高），其定义域为$PT$，值域为实数。</p><p>寻找$P’\in PT$，使得$f(P’) \ge f(P’’), P’’ \in PT(P’ \not = P’’)$。</p><h4 id="基于贪心的TCP"><a href="#基于贪心的TCP" class="headerlink" title="基于贪心的TCP"></a>基于贪心的TCP</h4><ul><li>全局贪心策略<ul><li>每轮优先挑选覆盖最多代码单元的测试用例。</li><li>多个用例相同随机选择。</li></ul></li><li>增量贪心策略<ul><li>每轮优先挑选覆盖最多，且未被已选择用例覆盖代码单元的测试用例。</li><li>所有代码单元均已被覆盖则重置排序过程</li><li>多个用例相同随机选择</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto1.png" alt="贪心的TCP"></p><p>解析：</p><ul><li>全局贪心：因为t3覆盖代码行数最多，所以t3 -&gt; t1 -&gt; t2</li><li>增量贪心：一开始所有代码都没覆盖，所以t3先，测完后，剩s4未覆盖，所以t2。最后全部覆盖所以重置，测试t1。</li></ul><h4 id="基于相似性的TCP"><a href="#基于相似性的TCP" class="headerlink" title="基于相似性的TCP"></a>基于相似性的TCP</h4><ul><li><p>基本定义：每轮优先与已选择测试用例集差异性最大的测试用例。让测试用例均匀地分布在输入域中。</p></li><li><p>排序步骤：</p><p>（1）测试用例之间的距离计算：假设$U(t_1)$ 和 $U(t_2)$为测试用例$t_1$和$t_2$所覆盖的代码单元集合，那么这两个用例之间的距离计算如下：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto2.png" alt="jaccard"></p><p>（2）测试用例与测试用例集之间的距离计算：分别使用最小距离、平均距离和最大距离度量方式计算待选择用例$t_c$与已选择用例集S的距离：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto3.png" alt="选择方法"></p></li></ul><h4 id="基于搜索的TCP"><a href="#基于搜索的TCP" class="headerlink" title="基于搜索的TCP"></a>基于搜索的TCP</h4><ul><li><p>基本定义：探索用例排序组合的状态空间，以此找到检测错误更快的用例序列。</p></li><li><p>排序步骤：</p></li><li><p>（1）种群构造：生成N个测试用例序列，之后随机生成切割点，互相交换两个用例序列切割点后部分的片段，仅交换相同测试用例的部分；同时以一定概率选择测试用例，并随机生成两个测试用例位置，进行互换，产生新的测试用例序列。</p><p>（2）评估值计算：以语句覆盖为例，给定程序包含m个语句$M = \{s_1,s_2,…,s_m\}$和n个测试用例$T=\{t_1,t_2,…,t_n\}$，$T’$为某一次搜索中$T$的一个排序序列，$TS_i$为该测试用例序列$T’$中第一个覆盖语句$s_i$的测试用例下标，那么其适应度计算为：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto4.png" alt="APSC"></p></li></ul><h4 id="基于机器学习的TCP"><a href="#基于机器学习的TCP" class="headerlink" title="基于机器学习的TCP"></a>基于机器学习的TCP</h4><ul><li><p>基本定义：基于测试分布特征，预测表现最佳的排序技术。</p></li><li><p>排序步骤：</p><p>（1）测试分布特征提取：给定被测程序，提取每个测试用例覆盖单元数；执行时间与单元时间内覆盖单元数。</p><p>（2）模型生成：由于三种特征取值范围不同，使用min-max正则化，最后使用XGBoost学习特征进行预测。</p></li></ul><h3 id="APFD"><a href="#APFD" class="headerlink" title="APFD"></a>APFD</h3><ul><li><p>平均故障检测百分比（Average Percentage of Faults Detected， APFD ）</p></li><li><p>给定程序包含m个故障$F=\{f_1,f_2,…,f_m\}$和n个测试用例$T=\{t_1,t_2,…t_n\}$，$T’$为$T$的一个排序序列，$TF_i$为该测试用例序列$T’$中第一个检测到故障$f_i$ 的测试用例下标，则该排序序列$T’$的APFD值计算公式为</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto5.png" alt="APFD"></p><h3 id="APFDc"><a href="#APFDc" class="headerlink" title="APFDc"></a>APFDc</h3><ul><li><p>开销感知平均故障检测百分比（Cost-cognizant Average Percentage of Faults Detected， APFDc）</p></li><li><p>给定程序包含m个故障$F=\{f_1,f_2,…,f_m\}$，它们的严重程度分别为$Severity = \{se_1,se_2,…,se_m\}$，和n个测试用例$T=\{t_1,t_2,…t_n\}$，它们的执行时间分别是$Time=\{time_1,time_2,…,time_n\}$，$T’$为$T$的一个排序序列，$TF_i$为该测试用例序列$T’$中第一个检测到故障$f_i$ 的测试用例下标，则该排序序列$T’$的APFDc值计算公式为</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto6.png" alt="APFDc"></p><h3 id="NAPFD"><a href="#NAPFD" class="headerlink" title="NAPFD"></a>NAPFD</h3><ul><li>归一化平均故障检测百分比（ Normalized Average Percentage of Faults Detected， NAPFD ）</li><li>给定程序包含m个故障$F=\{f_1,f_2,…,f_m\}$和n个测试用例$T=\{t_1,t_2,…t_n\}$，$T’$为$T$的一个排序序列，$TF_i$为该测试用例序列$T’$中第一个检测到故障$f_i$ 的测试用例下标，$p$为$T’$检测到的故障数与程序总的故障数的比值，则该排序序列$T’$的NAPFD值计算公式为</li></ul><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto7.png" alt="NAPFD"></p><h2 id="测试用例选择"><a href="#测试用例选择" class="headerlink" title="测试用例选择"></a>测试用例选择</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li>回归测试用例选择可以通过重新运行原始测试套件的一个子集，验证某些变更是否对当前软件版本的功能造成了影响。</li><li>降低回归测试的开销</li><li>最大化缺陷探测能力</li></ul><h3 id="主要策略-1"><a href="#主要策略-1" class="headerlink" title="主要策略"></a>主要策略</h3><p>修改前的程序$P$，对应的测试用例集$T$，和修改后的程序$P’$。<br>寻找$T$的子集$T’$对$P’$进行测试，并且$T’$中的任意测试用例均是可以检测代码修改的测试用例。</p><h4 id="最小化测试用例选择"><a href="#最小化测试用例选择" class="headerlink" title="最小化测试用例选择"></a>最小化测试用例选择</h4><ul><li>从原本的测试用例集$T$中找出最小的子集$T_{min}$，$T_{min}$能够覆盖被测程序$P$中所有本次修改的、或者受本次修改影响的部分。</li><li>每一条新增的或者被修改的语句都能够被至少一个来自原测试套件$T$的测试用例执行。</li></ul><h4 id="安全测试用例选择"><a href="#安全测试用例选择" class="headerlink" title="安全测试用例选择"></a>安全测试用例选择</h4><ul><li><p>从原本的测试用例集$T$中能够暴露修改后被测程序$P’$中的一个或多个缺陷的所有测试用例，构成安全回归测试集$T_S$</p></li><li><p>$T_S$中的每个测试都能够满足以下条件之一</p><ul><li><p>执行至少一条在$P’$中被删除的语句</p></li><li><p>执行至少一条在$P’$中新增的语句</p></li></ul></li></ul><h4 id="基于数据流和覆盖的测试用例选择"><a href="#基于数据流和覆盖的测试用例选择" class="headerlink" title="基于数据流和覆盖的测试用例选择"></a>基于数据流和覆盖的测试用例选择</h4><ul><li>变更后的代码$P’$中使数据交互变化的语句构成语句集合$S_I$。从原本的测试用例集$T$中选取出所有覆盖到$S_I$中某条语句的测试用例，组成测试集$T_D$</li><li>$T_D$中的每个测试都能够满足以下条件之一<ul><li>执行至少一个在$P’$中被删除的Define-Use对</li><li>执行至少一个在$P’$中新增的Define-Use对</li></ul></li></ul><h4 id="特制-随机测试用例选择"><a href="#特制-随机测试用例选择" class="headerlink" title="特制/随机测试用例选择"></a>特制/随机测试用例选择</h4><ul><li>随机测试用例选择：规定测试用例的选取数量为m，测试人员随机地从原本的测试用例集$T$中选出m个测试用例，组成随机回归测试集$T_R$</li><li>面向剖面测试用例选择：与面向剖面程序编程有关（Aspect-Oriented Programming），从原本的测试用例集$T$中选出与某个剖面a有关的k测试用例，组成回归测试集$T_a$</li></ul><h2 id="基于程序分析的测试用例选择"><a href="#基于程序分析的测试用例选择" class="headerlink" title="基于程序分析的测试用例选择"></a>基于程序分析的测试用例选择</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li>根据技术的基本定义以及程序分析技术的特点，该技术一般被认为是一种安全测试用例选择技术</li><li><p>通过程序分析技术计算出测试代码（方法、用例或套件）与生产代码之间的依赖关系，并在代码发生变更时，利用这些依赖关系将所有受到变更影响的测试代码（Change-Impacted Tests）自动选取出来，组成回归测试集。</p></li><li><p>测试依赖：测试代码运行到某些生产代码而产生的联系</p></li></ul><h3 id="依赖分析"><a href="#依赖分析" class="headerlink" title="依赖分析"></a>依赖分析</h3><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/auto8.png" alt="依赖分析"></p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><ul><li>静态（程序）分析是指在没有实际执行程序的情况下对计算机软件程序进行自动化分析的技术（手动分析一般被称为程序理解或代码审查）。</li><li>大多数情况下，分析的材料为源语言代码，少部分静态分析会针对目标语言代码进行（例如：分析Java的字节码）。</li></ul><h4 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h4><ul><li>动态（程序）分析通过在真实或虚拟处理器上执行程序来完成对程序行为的分析。</li><li>为了使动态程序分析有效，必须使用足够的测试输入来执行目标程序，以尽可能覆盖程序所有的输出。进行动态分析时一般需要注意最小化插桩对目标程序的影响。</li></ul><h4 id="动态-V-S-静态"><a href="#动态-V-S-静态" class="headerlink" title="动态 V.S. 静态"></a>动态 V.S. 静态</h4><div class="table-container"><table><thead><tr><th>特征</th><th>动态</th><th>静态</th></tr></thead><tbody><tr><td>总体</td><td>好</td><td></td></tr><tr><td>依赖信息</td><td>多</td><td></td></tr><tr><td>开销</td><td></td><td>小</td></tr><tr><td>过拟合</td><td></td><td>有</td></tr><tr><td>插桩</td><td>需要</td><td>不需要</td></tr><tr><td>运行测试阶段</td><td></td><td>好</td></tr></tbody></table></div><h3 id="粒度"><a href="#粒度" class="headerlink" title="粒度"></a>粒度</h3><h4 id="细粒度"><a href="#细粒度" class="headerlink" title="细粒度"></a>细粒度</h4><ul><li>基本块（Basic Block，BB）级：利用BB级变更和BB级测试依赖进行测试选取</li><li>方法级：利用方法级变更和方法级测试依赖进行测试选取</li></ul><h4 id="粗粒度"><a href="#粗粒度" class="headerlink" title="粗粒度"></a>粗粒度</h4><ul><li>文件（类）级：利用文件级变更和文件级测试依赖进行测试选取。由于Java语言会将每一类编译成一个.class文件，因此针对Java语言的文件级测试用例选择等同于类级别测试用例选择</li><li>项目（模块）级：利用项目级变更和项目间依赖进行测试选取</li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul><li>A Phase – 分析阶段：分析代码变更、计算测试依赖</li><li>E Phase – 执行阶段：运行选中测试</li><li><p>C Phase – 收集阶段：收集测试信息。按照产生的时间点不同，信息可以分成两类：运行时信息（动态测试依赖、覆盖信息）和测试运行结果（测试运行结果、测试运行时间）</p></li><li><p>三阶段（Offline Mode）：A -&gt; E -&gt; C，执行测试和收集信息分开进行。测试需要运行两遍，但是能够更早得到测试反馈</p></li><li>两阶段（Online Mode）：A -&gt; EC，在执行测试的同时收集信息。延长了测试执行时间，但总时间更短</li></ul><h3 id="类防火墙算法"><a href="#类防火墙算法" class="headerlink" title="类防火墙算法"></a>类防火墙算法</h3><ul><li><p>使用对象关系图（Object Relation Graph）来描述测试类和生产类之间关系的算法。对象关系图描绘了面向对象程序中存在的继承、聚合以及关联关系。</p></li><li><p>A继承B，则B改动，A也要重新测试。</p></li><li>A聚合B，则B改动，A也要重新测试。</li><li>A访问B的数据成员、A要向B传递信息，则B改动，A也要重新测试。此外，A和B重新集成测试。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式复习提纲</title>
      <link href="/2020/10/25/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/"/>
      <url>/2020/10/25/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式系统"><a href="#嵌入式系统" class="headerlink" title="嵌入式系统"></a>嵌入式系统</h2><h3 id="定义（重点）"><a href="#定义（重点）" class="headerlink" title="定义（重点）"></a>定义（重点）</h3><ul><li>IEEE定义：用于控制、监控或者辅助操作机器和设备的装置</li><li>国内定义：嵌入式系统是以应用为中心以计算机技术为基础，软硬件可裁剪，适用于应用系统对功能、可靠性、成本、体积、功耗有严格要求的专业计算机系统</li></ul><h3 id="特点（重点）"><a href="#特点（重点）" class="headerlink" title="特点（重点）"></a>特点（重点）</h3><ol><li>形式多样，面向特定应用</li><li>得到多种类型处理器和处理器体系结构的支持</li><li>极其关注成本</li><li>有实时性和可靠性要求</li><li>使用的操作系统使用多种处理器、可裁剪、轻量型、实时可靠、可固化的嵌入式操作系统</li><li>需要专门工具和特殊方法</li></ol><h3 id="分类（重点）"><a href="#分类（重点）" class="headerlink" title="分类（重点）"></a>分类（重点）</h3><ul><li>按处理器位数：4位、8位、16位、32位、64位</li><li>按应用：信息家电、汽车电子、通信、移动终端、工业控制</li><li>按速度：强实时系统、一般实时系统、弱实时系统</li><li>按确定性：硬实时系统、软实时系统</li><li>按复杂程度：循环轮询系统、有限状态机系统、前后台机系统、单处理器多任务系统、多处理器多任务系统</li></ul><h3 id="典型应用（重点）"><a href="#典型应用（重点）" class="headerlink" title="典型应用（重点）"></a>典型应用（重点）</h3><p>工控设备、军用电子设备、航空航天、汽车电子、信息家电、通信、智能玩具、可穿戴设备</p><h3 id="基本组成（重点）"><a href="#基本组成（重点）" class="headerlink" title="基本组成（重点）"></a>基本组成（重点）</h3><p>由嵌入式硬件和软件组成</p><ul><li>硬件：微处理器为核心继承寻初期和系统专用的输入输出设备</li><li>软件：初始化代码及驱动、嵌入式操作系统和应用程序有机结合，形成系统特定的一体化软件。</li></ul><h3 id="IOT基本组成（重点）"><a href="#IOT基本组成（重点）" class="headerlink" title="IOT基本组成（重点）"></a>IOT基本组成（重点）</h3><ul><li><p>第一种答案</p><ol><li>设备传感器</li><li>连通性</li><li>网关</li><li>云</li><li>数据处理</li><li>用户界面</li></ol></li><li><p>第二种答案</p><ol><li>传感网</li><li>M2M</li><li>两化融合</li><li>RFID</li></ol></li></ul><h3 id="CPS的基本组成（重点）"><a href="#CPS的基本组成（重点）" class="headerlink" title="CPS的基本组成（重点）"></a>CPS的基本组成（重点）</h3><ol><li>CPS：信息物理系统（Cyber-Physical Systems）作为计算机进程和物理进程的统一体，是集成计算、通信与控制于一体的下一代智能系统。</li><li>基本组成：传感器、执行器、决策控制单元    </li><li>嵌入式系统+网络+控制功能</li></ol><h2 id="嵌入式系统设计"><a href="#嵌入式系统设计" class="headerlink" title="嵌入式系统设计"></a>嵌入式系统设计</h2><h3 id="嵌入式系统面临挑战"><a href="#嵌入式系统面临挑战" class="headerlink" title="嵌入式系统面临挑战"></a>嵌入式系统面临挑战</h3><ul><li>需要的硬件数量问题</li><li>如何满足时限要求，如何处理多项功能在时间上的协调一致关系</li><li>如何降低系统功耗</li><li>如何设计以保证系统可升级</li><li>如何保证系统可靠的工作</li></ul><h3 id="传统开发过程"><a href="#传统开发过程" class="headerlink" title="传统开发过程"></a>传统开发过程</h3><ol><li>需求分析</li><li>规格说明</li><li>体系结构</li><li>构建设计</li><li>系统集成</li></ol><h3 id="软硬件协同设计（非重点）"><a href="#软硬件协同设计（非重点）" class="headerlink" title="软硬件协同设计（非重点）"></a>软硬件协同设计（非重点）</h3><p>增加了系统的灵活性</p><p>增加了风险</p><h3 id="软硬件的划分"><a href="#软硬件的划分" class="headerlink" title="软硬件的划分"></a>软硬件的划分</h3><ul><li>嵌入式系统的设计涉及硬件与软件部分，设计中必须决定什么功能由硬件实现，什么功能由软件实现。</li><li>硬件和软件具有双重性</li><li>软硬件变动对系统的决策造成影响</li><li>划分和选择需要考虑多种因素</li><li>硬件和软件的双重性是划分决策的前提</li></ul><h2 id="嵌入式硬件系统基础"><a href="#嵌入式硬件系统基础" class="headerlink" title="嵌入式硬件系统基础"></a>嵌入式硬件系统基础</h2><h3 id="嵌入式微处理器基础"><a href="#嵌入式微处理器基础" class="headerlink" title="嵌入式微处理器基础"></a>嵌入式微处理器基础</h3><h4 id="嵌入式微处理器体系结构"><a href="#嵌入式微处理器体系结构" class="headerlink" title="嵌入式微处理器体系结构"></a>嵌入式微处理器体系结构</h4><h5 id="冯诺依曼结构和哈佛结构"><a href="#冯诺依曼结构和哈佛结构" class="headerlink" title="冯诺依曼结构和哈佛结构"></a>冯诺依曼结构和哈佛结构</h5><ul><li>冯诺依曼结构：数据和程序放在同一个存储单元，统一编制，指令和数据通过同一个总线访问</li><li>哈佛结构：程序和数据存储在不同的空间中，即程序存储器和数据存储器是两个相互独立的存储器，每个存储器独立编制、独立访问。与之相对应的是系统中设置的两条总线（程序总线和数据总线），从而使数据的吞吐量提高了一倍（更大存储代管和更大可预测带宽）</li><li>哈佛结构不能使用自修改代码</li></ul><h5 id="CISC与RISC"><a href="#CISC与RISC" class="headerlink" title="CISC与RISC"></a>CISC与RISC</h5><ul><li><p>CISC：复杂指令集（许多地址格式，许多操作）</p></li><li><p>RISC：精简指令集（流水型指令）</p></li><li><p>RISC机器用来减少指令周期的一种技术，可提高处理器和总线使用率</p><p>|              | CISC                                                         | RISC                                                         |<br>| —————— | —————————————————————————————— | —————————————————————————————— |<br>| 价格         | 由硬件完成部分软件功能，硬件复杂性增加，芯片成本高           | 由软件完成部分硬件功能，软件复杂性增加，芯片成本低           |<br>| 性能         | 减少代码尺寸，增加指令的执行周期数                           | 使用流水线降低指令的执行周期数，增加代码尺寸                 |<br>| 指令集       | 大量的混杂指令集，有简单快速的指令，也有复杂多周期指令，符合HLL | 简单的单周期指令，在汇编指令方面有相应的SISC伪代码指令       |<br>| 高级语言支持 | 硬件完成                                                     | 软件完成                                                     |<br>| 寻址模式     | 复杂的寻址模式，支持内存到内存寻址                           | 简单的寻址模式，仅允许LOAD和STORE指令存取内存，其他所有的操作都基于寄存器到寄存器 |<br>| 寄存器数目   | 寄存器较少                                                   | 寄存器较多                                                   |</p></li></ul><h5 id="流水线技术"><a href="#流水线技术" class="headerlink" title="流水线技术"></a>流水线技术</h5><p>RISC机器用来减少指令周期的一种技术，提高处理器和总线的使用率，在CPU中由若干个不用功能的电路单元组成一条指令处理流水线，然后将一条指令分成若干步后再由这些电路单元分别执行，这样就能实现在一个CPU时钟周期完成一条指令，因此提高CPU的运算速度。</p><p>优点：提高CPU利用率、并行计算</p><h5 id="看门狗（Watch-Dog）（重点）"><a href="#看门狗（Watch-Dog）（重点）" class="headerlink" title="看门狗（Watch Dog）（重点）"></a>看门狗（Watch Dog）（重点）</h5><p>功能：</p><p>在对系统稳定性要求较高的场合，防止嵌入式控制系统运行时收到外部干扰或者系统错误，程序出现跑飞，导致整个系统瘫痪，加入看门狗电路，当系统跑飞进入死循环时，回复系统的运行</p><p>基本原理：</p><p>舍本系统程序完整运行一周期的时间是tp，看门狗的定时周期为ti，且ti&gt;tp，在程序运行一周气候就修改（在重新设定看门狗的定时周期）定时器的计数值（喂狗），只要程序正常运行，定时器就不会溢出。若由于干扰等原因使系统不能再tp时刻修改定时器的计数值，定时器将在ti时刻溢出，引发系统复位，使系统得以重新运行，从而起到监控的作用。</p><h3 id="嵌入式系统的存储体系"><a href="#嵌入式系统的存储体系" class="headerlink" title="嵌入式系统的存储体系"></a>嵌入式系统的存储体系</h3><h4 id="存储器系统：存储器系统的层次结构"><a href="#存储器系统：存储器系统的层次结构" class="headerlink" title="存储器系统：存储器系统的层次结构"></a>存储器系统：存储器系统的层次结构</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/system.png" alt="存储系统的层次结构"></p><h4 id="ROM的种类与选型"><a href="#ROM的种类与选型" class="headerlink" title="ROM的种类与选型"></a>ROM的种类与选型</h4><ul><li><p>ROM</p><blockquote><p>只读存储器（Read-Only Memory）是一种只能读取资bai料的存储器。在制造过程中，将资料以一特制光罩（mask）烧录于线路中，其资料内容在写入后就不能更改，所以有时又称为“光罩式只读内存”（mask ROM）。</p></blockquote></li><li><p>PROM</p><blockquote><p>可编程程序只读存储器（Programmable ROM，PROM）之内部有行列式的熔丝，是需要利用电流将其烧断，写入所需的资料，但仅能写录一次。 PROM在出厂时，存储的内容全为1，用户可以根据需要将其中的某些单元写入数据0</p></blockquote></li><li><p>EPROM</p><blockquote><p>可抹除可编程只读存储器（Erasable Programmable Read Only Memory，EPROM）可利用高电压将资料编程写入，抹除时将线路曝光于紫外线下，则资料可被清空，并且可重复使用。通常在封装外壳上会预留一个石英透明窗以方便曝光。</p></blockquote></li><li><p>OTPROM</p><blockquote><p>一次编程只读存储器（One Time Programmable Read Only Memory，OTPROM）之写入原理同EPROM，但是为了节省成本，编程写入之后就不再抹除，因此不设置透明窗。</p></blockquote></li><li><p>E2PROM</p><blockquote><p>电子式可抹除可编程只读存储器（Electrically Erasable Programmable Read Only Memory，EEPROM）之运作原理类似EPROM，但是抹除的方式是使用高电场来完成，因此不需要透明窗</p></blockquote></li><li><p>快闪存储器</p><blockquote><p>快闪存储器（Flash memory）的每一个记忆胞都具有一个“控制闸”与“浮动闸”，利用高电场改变浮动闸的临限电压即可进行编程动作。</p></blockquote></li></ul><h4 id="Flash的种类与选型"><a href="#Flash的种类与选型" class="headerlink" title="Flash的种类与选型"></a>Flash的种类与选型</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/sys-flash.png" alt="Flash的种类与选型"></p><h4 id="RAM的种类与选型"><a href="#RAM的种类与选型" class="headerlink" title="RAM的种类与选型"></a>RAM的种类与选型</h4><ul><li><p>RAM</p><blockquote><p>RAM也称随机存储器，那么随机是什么意思？所谓随机，指的是当存储器中的数据被读取或写入时，所需要的时间与这段信息所在的位置无关（任何位置读写速度一样）。</p></blockquote></li><li><p>DRAM</p><blockquote><p>DRAM（Dynamic Random Access Memory，动态随机存储器）是最为常见的系统内存。我们使用的电脑和手机的运行内存都是DRAM。DRAM使用电容存储，DRAM 只能将数据保持很短的时间。</p></blockquote></li><li><p>SRAM</p><blockquote><p>SRAM（Static Random Access Memory，静态随机存储器），它是一种具有静止存取功能的内存，其内部机构比DRAM复杂，可以做到不刷新电路即能保存它内部存储的数据。</p></blockquote></li><li><p>SDRAM</p><blockquote><p>SDRAM：（Synchronous Dynamic Random Access Memory，同步动态随机存取存储器），为DRAM的一种，同步是指Memory工作需要同步时钟，内部命令的发送与数据的传输都以时钟为基准；动态是指存储阵列需要不断的刷新来保证数据不丢失；随机是指数据不是线性依次存储，而是由指定地址进行数据读写。</p></blockquote></li><li><p>还有DDR SDRAM、DDR2 SDRAM、DDR3 SDRAM不做过多赘述，感兴趣可以自己百度。</p></li></ul><h4 id="Cache（非重点）"><a href="#Cache（非重点）" class="headerlink" title="Cache（非重点）"></a>Cache（非重点）</h4><ul><li>不不是一种严格的内存结构</li><li>会经常性的被程序员忽视</li><li>有效使用的优化关键</li></ul><h3 id="嵌入式系统总线（重点）"><a href="#嵌入式系统总线（重点）" class="headerlink" title="嵌入式系统总线（重点）"></a>嵌入式系统总线（重点）</h3><h4 id="总线结构，常见的总线及特点"><a href="#总线结构，常见的总线及特点" class="headerlink" title="总线结构，常见的总线及特点"></a>总线结构，常见的总线及特点</h4><ul><li><p>单总线结构</p><blockquote><p>使用一条单一的系统总线来链接CPU、主存和IO设备。总线只能分时工作，是信息的传送的吞吐量受到限制</p></blockquote></li><li><p>双总线结构</p><blockquote><p>在CPU和主存之间专门设置了一组高速的存储总线，使CPU可通过专用总线与存储器交换信息，并减轻了系统总线的负担。主存仍可通过系统总线与外设之间实现DMA操作，而不经过CPU</p></blockquote></li><li><p>多总线结构</p><blockquote><p>在双总线系统的基础上增加IO总线，其中系统总线使CPU、主存和通道（IOP）之间进行数据传送的公共通路，而IO是多个外部设备与通道之间进行数据传送的公共通路。通道实际上是一台具有特殊功能的处理器，他分担了一部分CPU的功能，以实现对外设的统一管理及外设与主存之间的数据传送。</p></blockquote></li></ul><h4 id="输入输出编成：忙等IO和中断IO"><a href="#输入输出编成：忙等IO和中断IO" class="headerlink" title="输入输出编成：忙等IO和中断IO"></a>输入输出编成：忙等IO和中断IO</h4><ol><li>忙等IO：用指令来检查设备是否就绪<ul><li>最简单的设备驱动方式</li><li>CPU不能再检查设备的过程中执行其他指令</li><li>很难处理同时发生的IO操作</li></ul></li><li>中断IO：基于子程序调用，使下一条指令为一个子程序调用的预定位置，返回位置被保存确保执行前台程序。<ul><li>CPU和设备之间通过总线连接</li><li>CPU和设备之间进行握手</li><li>设备发出中断请求</li><li>当CPU能处理中断时发出中断确认请求。</li></ul></li><li>两种机制确保中断更加有效：优先级决定哪个中断先获得CPU；中断向量决定每个中断对应的执行代码。</li><li>忙等效率比较低。</li></ol><h4 id="Programming-I-O：Independent-I-O-port-memory-mapped-I-O"><a href="#Programming-I-O：Independent-I-O-port-memory-mapped-I-O" class="headerlink" title="Programming I/O：Independent I/O port. memory-mapped I/O"></a>Programming I/O：Independent I/O port. memory-mapped I/O</h4><h5 id="Programming-I-O"><a href="#Programming-I-O" class="headerlink" title="Programming I/O"></a>Programming I/O</h5><p>在通信过程中三种方法来选择控制寄存器和数据缓存：</p><ul><li>Independent I/O port</li><li>memory-mapped I/O</li><li>Hybrid solution. the hybrid model include memory-mapped<br>I/O data buffers and separate I/O ports for the control<br>registers.</li></ul><h2 id="嵌入式系统软件知识"><a href="#嵌入式系统软件知识" class="headerlink" title="嵌入式系统软件知识"></a>嵌入式系统软件知识</h2><h3 id="嵌入式软件基础知识（重点）"><a href="#嵌入式软件基础知识（重点）" class="headerlink" title="嵌入式软件基础知识（重点）"></a>嵌入式软件基础知识（重点）</h3><h4 id="嵌入式软件的特点"><a href="#嵌入式软件的特点" class="headerlink" title="嵌入式软件的特点"></a>嵌入式软件的特点</h4><ol><li><p>独特的实用性</p><blockquote><p>嵌入式软件是为嵌入式系统服务的，这就要求它与外部硬件和设备联系紧密。嵌入式系统以应用为中心，嵌入式软件是应用系统，根据应用需求定向开发，面向产业、面向市场，需要特定的行业经验。每种嵌入式软件都有自己独特的应用环境和实用价值</p></blockquote></li><li><p>灵活的适用性</p><blockquote><p>嵌入式软件通常可以认为是一种模块化软件，它应该能非常方便灵活地运用到各种嵌入式系统中，而不能破坏或更改原有的系统特性和功能。嵌入式软件要使用灵活，应尽量优化配置，减小对系统的整体继承性，升级更换灵活方便</p></blockquote></li><li><p>程序代码精简</p><blockquote><p>由于嵌入式系统本身的应用有小体积、小存储空间、低成本、低功耗等要求，嵌入式软件和大型机上的软件相比，具有代码精简、执行效率高等特点</p></blockquote></li><li><p>可靠性、稳定性高</p><blockquote><p>嵌入式系统应用要求一般较为苛刻，特别是在涉及安全相关的领域，如汽车电子、工业控制、航空航天等，这些领域的嵌入式系统不仅要求硬件可靠，还对嵌入式软件提出了更高的要求。嵌入式软件需要运行可靠、稳定,具有错误处理及故障恢复等功能</p></blockquote></li></ol><h4 id="嵌入式软件的分类"><a href="#嵌入式软件的分类" class="headerlink" title="嵌入式软件的分类"></a>嵌入式软件的分类</h4><h5 id="系统软件"><a href="#系统软件" class="headerlink" title="系统软件"></a>系统软件</h5><p>EOS负责嵌入系统的全部软、硬件资源的分配、调度工作，控制、协调并发活动；它必须体现其所在系统的特征，能够通过装卸某些模块来达到系统所要求的功能</p><h5 id="支撑软件"><a href="#支撑软件" class="headerlink" title="支撑软件"></a>支撑软件</h5><p>支撑软件是用于帮助和支持软件开发的软件，通常包括数据库和开发工具，其中以数据库最为重要</p><h5 id="应用软件"><a href="#应用软件" class="headerlink" title="应用软件"></a>应用软件</h5><p>嵌入式应用软件是针对特定应用领域，基于某一固定的硬件平台，用来达到用户预期目标的计算机软件。由于用户任务可能有时间和精度上的要求，因此有些嵌入式应用软件需要特定嵌入式操作系统的支持</p><h4 id="嵌入式软件体系结构"><a href="#嵌入式软件体系结构" class="headerlink" title="嵌入式软件体系结构"></a>嵌入式软件体系结构</h4><ol><li>驱动层<ul><li>板级初始化程序</li><li>与系统启动相关的驱动</li><li>与应用软件相关的驱动</li><li>与应用软件相关的驱动不一定需要与操作系统连接，这些驱动的设计和开发由应用决定。</li></ul></li><li>操作系统层<ul><li>操作系统层包括嵌入式内核、嵌入式TCP/IP网络系统、嵌入式文件系统、嵌入式GUI系统和电源管理等部分</li><li>其中嵌入式内核是基础和必备的部分，其他部分要根据嵌入式系统的需要来确定</li></ul></li><li>中间件层<ul><li>目前在一些复杂的嵌入式系统中也开始采用中间件技术，主要包括嵌入式CORBA、嵌入式Java、嵌入式DCOM和面向应用领域的中间件软件</li><li>如基于嵌入式CORBA的应用于软件无线电台的应用中间件SCA（Software Core Architecture）等</li></ul></li><li>应用层<ul><li>应用层软件主要由多个相对独立的应用任务组成</li><li>每个应用任务完成特定的工作，如I/O任务、计算的任务、通信任务等，由操作系统调度各个任务的运行</li></ul></li></ol><h3 id="嵌入式操作系统基础知识（重点）"><a href="#嵌入式操作系统基础知识（重点）" class="headerlink" title="嵌入式操作系统基础知识（重点）"></a>嵌入式操作系统基础知识（重点）</h3><h4 id="RTOS"><a href="#RTOS" class="headerlink" title="RTOS"></a>RTOS</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>对外来事件能在限定的响应时间内做出预定质量处理的计算机系统</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>可移植性、强调实时性能、内核精简、抢占式内核、使用可重入函数、可配置、可裁剪、高可靠性</p><h5 id="选型原则"><a href="#选型原则" class="headerlink" title="选型原则"></a>选型原则</h5><p>综合权衡</p><ol><li>成本</li><li>可靠性</li><li>实时性</li><li>工具链</li><li>模块丰富</li><li>RTOS内核RAM、ROM占用量</li><li>支持</li></ol><h4 id="任务管理"><a href="#任务管理" class="headerlink" title="任务管理"></a>任务管理</h4><h5 id="进程、线程、任务的概念"><a href="#进程、线程、任务的概念" class="headerlink" title="进程、线程、任务的概念"></a>进程、线程、任务的概念</h5><ol><li><p>进程概念</p><p><strong>一个程序的单次执行</strong>。（如果两次运行一个相同的程序，就创建了两个不同的进程）</p><p>进程是操作系统资源分配的基本单位，进程之间的地址空间和资源相互独立</p></li><li><p>线程概念</p><p>每个进程都拥有自己的状态，不仅包括寄存器还包括它所有的内存，在某些操作系统，尤其是轻量级RTOS，进程运行于同一地址空间，通常将这种<strong>共享同一地址空间和资源的进程成为线程</strong>（共享内存空间且并发运行的一组命令式程序），同一进程的线程之间可以互相访问对方的变量</p></li><li><p>任务概念</p><p>一组实时的程序，且程序之间可能会进行通信</p></li></ol><h5 id="任务的实现"><a href="#任务的实现" class="headerlink" title="任务的实现"></a>任务的实现</h5><ol><li><p>任务的层次结构</p></li><li><p>任务控制块</p><p>任务控制快OS_TCB是描述一个任务的核心数据结构，存放了它的各种管理信息</p><p>OSTCBStkPtr：任务栈指针，放在任务块的开始，方便使用</p><p>OSTCBNext：指向下一个任务块的指针</p><p>OSTCBPrev：指向上一个任务块的指针</p><p>OSTCBDly：延迟拍数，使用delay函数会用到这个变量</p><p>OSTCBStat：任务的状态</p><p>OSTCBPrio：任务的优先级，ucosii中不允许想同优先级的任务，所以可以通过优先级唯一的区分任务</p></li><li><p>任务的状态及状态转换</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/system1.png" alt="存储系统的层次结构"></p></li><li><p>任务队列</p></li></ol><h5 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h5><ol><li><p>可抢占调度</p><p>系统总是选择优先级别的最高的算法进行调度，并且一旦高优先级别的任务准备就绪之后，它就会马上被调度而不等待低优先级的任务主动放弃CPU</p></li><li><p>不可抢占调度</p><p>让进程运行直到结束或阻塞的调度方式</p></li><li><p>先来先服务</p><p>如果早就绪的进程排在就绪队列的前面，迟就绪的进程排在就绪队列的后面，那么先来先服务(FCFS: first come first service)总是把当前处于就绪队列之首的那个进程调度到运行状态。也就说，它只考虑进程进入就绪队列的先后，而不考虑它的下一个CPU周期的长短及其他因素，是一种非抢占式策略</p></li><li><p>时间片轮转算法</p><p>系统把所有就绪进程按先入先出的原则排成一个队列。新来的进程加到就绪队列末尾。每当执行进程调度时,进程调度程序总是选出就绪队列的队首进程,让它在CPU上运行一个时间片的时间（时间片是一个小的时间单位,通常为10~100ms数量级）。当进程用完分给它的时间片后,系统的计时器发出时钟中断,调度程序便停止该进程的运行,把它放入就绪队列的末尾;然后,把CPU分给就绪队列的队首进程,同样也让它运行一个时间片,如此往复。</p></li><li><p>优先级算法</p></li></ol><h5 id="实时系统及任务调度（结合书和实例）"><a href="#实时系统及任务调度（结合书和实例）" class="headerlink" title="实时系统及任务调度（结合书和实例）"></a>实时系统及任务调度（结合书和实例）</h5><ol><li><p>RMS算法</p><p>单一速率调度</p><p>静态调度策略，分配给每个进程的优先级是固定不变的，基于单一速率分析。</p><p>周期短的进程被指定为最高优先级。每个周期进去，p进去，根据优先级调度执行，执行结束就从就绪状态退出直到下一个周期开始</p></li><li><p>EDF算法</p><p>最早截止时限优先调度</p><p>动态的优先级方案，在进程执行时根据进程的启动时间改变进程的优先级</p><p>根据截止时间顺序指定优先级。最高优先级的进程是当前截止时限最接近的进程</p></li></ol><h5 id="任务间通信"><a href="#任务间通信" class="headerlink" title="任务间通信"></a>任务间通信</h5><ol><li><p>共享内存</p><p>两个组件（比如CPU和I/O设备），通过一个共享内存位置进行通信，这个内存区域可以被看作一个通信设备，这个设备上所有的数据都存储在通信链路/内存中</p></li><li><p>消息</p><p>消息传递通信机制是共享内存模型的一种补充</p><p>每个通信实体都具有自己的消息发送/接收单元。消息不在通信链路上存储，而是存储在端点的发送器/接收器。</p></li><li><p>管道</p><p>发送进程以字符流形式将大量数据送入管道，接收进程可从管道接收数据，二者利用管道进行通信</p><p>由于当前操作系统的不惟一性，各个系统都有其独自的通信协议，导致了不同系统间通信的困难。尽管TCP/IP协议目前已发展成为Internet的标准，但仍不能保证C/S应用程序的顺利进行。命名管道作为一种通信方法，有其独特的优越性，这主要表现在它不完全依赖于某一种协议，而是适用于任何协议——只要能够实现通信</p></li><li><p>信号</p><p>信号很简单，因为除了信号本身不会传递其他数据，信号类似于中断，但它完全由软件创建。一个信号是由进程产生的，并由操作系统传送给另一个进程</p></li></ol><h5 id="同步与互斥"><a href="#同步与互斥" class="headerlink" title="同步与互斥"></a>同步与互斥</h5><ol><li><p>竞争条件</p><p>多个进程并发访问和操作同一数据且执行结果与访问的特定顺序有关，称为竞争条件。</p><p>竞争条件发生在当多个进程或者线程在读写数据时，其最终的的结果依赖于多个进程的指令执行顺序。</p></li><li><p>临界区</p><p><strong>临界区</strong>指的是一个访问共用资源的程序片段，而这些共用资源又无法同时被多个线程访问的特性。当有线程进入临界区段时，其他线程或是进程必须等待</p></li><li><p>互斥</p><p>一个公共资源同一时刻只能被一个进程或线程使用，多个进程或线程不能同时使用公共资源</p></li><li><p>信号量</p><p>信号量广泛用于进程或线程间的同步和互斥，信号量本质上是一个非负的整数计数器</p><p>作用：</p><ol><li>实现对共享资源的互斥访问（包括单个共享资源或多个相同的资源）</li><li>实现任务之间的行为同步</li></ol><p>组成：</p><ul><li>信号量的计数值和等待该信号量的任务所组成的等待任务表</li></ul></li><li><p>死锁</p><p>线程死锁是指由于两个或者多个线程互相持有对方所需要的资源，导致这些线程处于等待状态，无法前往执行</p><p>当一些进程被永久地阻止获取互斥锁时就发生了死锁</p><p>例如线程A持有lock1且被阻止lock2，线程B持有lock2但被阻止获取lock1，就会出现死锁</p></li></ol><h4 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h4><h5 id="嵌入式系统静态内存管理"><a href="#嵌入式系统静态内存管理" class="headerlink" title="嵌入式系统静态内存管理"></a>嵌入式系统静态内存管理</h5><p>系统在启动前，所有的任务都获得了所需要的所有内存，运行过程中将不会有新的内存请求</p><ul><li><p>在强实时系统中，减少内存分配在时间上可能带来的不确定性。</p></li><li><p>不需要操作系统进行专门的内存管理操作。</p></li><li><p>系统使用内存的效率比较低下，只适合于那些强实时，且应用比较简单，任务数量可以静态确定的系统</p></li></ul><h5 id="嵌入式系统动态内存管理"><a href="#嵌入式系统动态内存管理" class="headerlink" title="嵌入式系统动态内存管理"></a>嵌入式系统动态内存管理</h5><p>应用通过分配（malloc）与释放（free）操作来使用内存</p><ul><li><p>堆（heap）会带来碎片</p></li><li><p>垃圾回收</p><p>对内存堆进行重新排列，把碎片组织成为大的连续可用内存空间。但垃圾回收的时间长短不确定：不适合于处理实时应用</p></li><li><p>在实时系统中，避免内存碎片的出现，而不是在出现内存碎片时进行回收</p></li></ul><h2 id="嵌入式实时内核-（以ucosII为例）"><a href="#嵌入式实时内核-（以ucosII为例）" class="headerlink" title="嵌入式实时内核**（以ucosII为例）"></a>嵌入式实时内核**（以ucosII为例）</h2><h3 id="实时任务调度"><a href="#实时任务调度" class="headerlink" title="实时任务调度"></a>实时任务调度</h3><p>μC/OS_II进行任务调度的思想是 “近似地每时每刻总是让优先级最高的就绪任务处于运行状态” 。为了保证这一点，它在系统或用户任务调用系统函数及执行中断服务程序结束时总是调用调度器，来确定应该运行的任务并运行它 。</p><p>μC/OS_II进行任务调度的依据就是任务就绪表</p><h3 id="中断与时钟"><a href="#中断与时钟" class="headerlink" title="中断与时钟"></a>中断与时钟</h3><p>μC/OS-II系统响应中断的过程为：</p><p>系统接收到中断请求后，这时如果CPU处于中断允许状态（即中断是开放的），系统就会中止正在运行的当前任务，而按照中断向量的指向转而去运行中断服务子程序；当中断服务子程序的运行结束后，系统将会根据情况返回到被中止的任务继续运行或者转向运行另一个具有更高优先级别的就绪任务。</p><p>时钟节拍是一种特殊的中断</p><p>μC/OS-II需要用户提供周期性的信号源，用于实现时间延时和确认超时。节拍率应在10到100hz之间，时钟节拍率越高，系统的额外负荷就越重</p><p>时钟节拍的实际频率取决于用户应用程序的精度</p><h3 id="同步与通信"><a href="#同步与通信" class="headerlink" title="同步与通信"></a>同步与通信</h3><p>管理的核心是事件控制块ECB，同步可以通过开关中断实现。互斥使用信号量。</p><p>通信可以使用邮箱和消息队列实现。</p><h3 id="存储管理-1"><a href="#存储管理-1" class="headerlink" title="存储管理"></a>存储管理</h3><p>μC/OS中是实模式存储管理</p><p>不划分内核空间和用户空间，整个系统只有一个地 址空间，即物理内存空间，应用程序和内核程序都 能直接对所有的内存单元进行访问</p><p>系统中的“任务”，实际上都是线程–––只有运行 上下文和栈是独享的，其他资源都是共享的。</p><p>内存布局</p><p>代码段(text)、数据段(data)、bss段、堆空间、栈空 间;</p><h4 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h4><h4 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h4><p>μC/OS中的存储管理 μC/OS采用的是固定分区的存储管理方法</p><p>μC/OS把连续的大块内存按分区来管理，每个分区 包含有整数个大小相同的块;</p><p>在一个系统中可以有多个内存分区，这样，用户的 应用程序就可以从不同的内存分区中得到不同大小 的内存块。但是，特定的内存块在释放时必须重新 放回它以前所属于的内存分区;</p><p>采用这样的内存管理算法，动态分配的内存碎片问题就得到了解决。</p><h2 id="BSP，BootLoader"><a href="#BSP，BootLoader" class="headerlink" title="BSP，BootLoader"></a>BSP，BootLoader</h2><h3 id="嵌入式系统的启动过程"><a href="#嵌入式系统的启动过程" class="headerlink" title="嵌入式系统的启动过程"></a>嵌入式系统的启动过程</h3><ol><li>上电复位</li><li>板级初始化</li><li>引导操作系统</li><li>操作系统初始化</li><li>应用程序初始化</li><li>多任务应用</li></ol><h3 id="bsp"><a href="#bsp" class="headerlink" title="bsp"></a>bsp</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ol><li>硬件相连性</li></ol><p>   BSP必须为操作系统提供操作和控制具体硬件的方法</p><ol><li><p>操作系统相连性</p><p>BSP必须为不同的操作系统提供接口</p></li></ol><h4 id="与bios的区别"><a href="#与bios的区别" class="headerlink" title="与bios的区别"></a>与bios的区别</h4><p>BIOS主要是负责在电脑开启时检测、初始化系统设备（设置栈指针、中断分配、内存初始化）、装入操作系统并调度操作系统向硬件发出的指令</p><p>BSP是和操作系统绑在一起运行在主板上的，尽管BSP的开始部分和BIOS所做的工作类似，可是大部分和BIOS不同，作用也完全不同。</p><p>程序员还可以编程修改BSP，在BSP中任意添加一些和系统无关的驱动或程序，甚至可以把上层开发的统统放到BSP中。 而BIOS程序是用户不能更改，编译编程的，只能对参数进行修改设置。更不会包含一些基本的硬件驱动</p><h3 id="引导模式"><a href="#引导模式" class="headerlink" title="引导模式"></a>引导模式</h3><ul><li><p>操作系统引导概念</p><p>将操作系统装入内存并开始执行的过程</p></li><li><p>按时间效率和空间效率不同的要求，分为两种模式：</p><ul><li><p>需要BootLoader的引导模式</p><p>节省空间，牺牲时间，适用于硬件成本低，运行速度快，但启动速度相对慢</p></li><li><p>不需要BootLoader的引导模式</p><p>时间效率高，系统快速启动，直接在NOR flash或ROM系列非易失性存储介质中运行，但不满足运行速度的要求</p></li></ul></li></ul><h3 id="BootLoader及其启动过程"><a href="#BootLoader及其启动过程" class="headerlink" title="BootLoader及其启动过程"></a>BootLoader及其启动过程</h3><ul><li>概念：bootloader是嵌入式系统中的OS启动加载程序</li><li>启动过程<ol><li>初始化硬件，如设置UART（至少设置一个），检测存储器等</li><li>设置启动参数，告诉内核硬件的信息，如用哪个启动界面，波特率</li><li>跳转到操作系统的首地址</li><li>消亡</li></ol></li></ul><h2 id="建模"><a href="#建模" class="headerlink" title="建模**"></a>建模**</h2>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云计算复习提纲</title>
      <link href="/2020/10/20/%E4%BA%91%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/"/>
      <url>/2020/10/20/%E4%BA%91%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="提纲说明"><a href="#提纲说明" class="headerlink" title="提纲说明"></a>提纲说明</h2><p>本提纲理论上仅适用于18级软院，请校对当年李传艺老师上课强调的考点和非考点之后进行阅读。</p><h2 id="云计算起源与概述"><a href="#云计算起源与概述" class="headerlink" title="云计算起源与概述"></a>云计算起源与概述</h2><h3 id="追求算力的几种方法"><a href="#追求算力的几种方法" class="headerlink" title="追求算力的几种方法"></a>追求算力的几种方法</h3><ol><li><p>把一台计算机的计算性能提升的足够强大</p><blockquote><ol><li>集中式计算（将所有计算资源集中在一个物理系统之内）</li><li>并行计算（能有效提高计算效率，所有处理器紧耦合于中心共享）</li></ol></blockquote></li><li><p>人多力量大，机多计算强</p><blockquote><ol><li>分布式计算（由众多自治计算机组成，各自拥有私有内存，通过计算机网络通信）</li></ol></blockquote></li></ol><h3 id="传统分布式计算系统"><a href="#传统分布式计算系统" class="headerlink" title="传统分布式计算系统"></a>传统分布式计算系统</h3><ol><li><p>计算机集群</p><blockquote><p>将多个可信、静态的独立节点连接起来协作完成计算</p></blockquote><p>计算机集群是计算抽象。</p></li><li><p>P2P网络</p><blockquote><p>每个节点既是客户端也是服务器，提供部分系统资源</p></blockquote><p>P2P系统是存储抽象，各个机器可以自由地加入或者是退出。</p></li><li><p>计算网格</p><blockquote><p>将多个异构计算机（采用了不同的操作系统，但是能够进行有效的通信）动态、紧耦合地整合在一起完成计算任务</p></blockquote><p>计算网格已经开始接近云计算</p></li></ol><h3 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h3><p>云计算是2006.3提出的雏形（compute cloud）到之后在2006.8.9正式确定（Cloud Computing）</p><h4 id="基本想法"><a href="#基本想法" class="headerlink" title="基本想法"></a>基本想法</h4><p>云计算是一种完美的分布式计算结局方案——是对网格的优化。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>云计算式一种基于互联网的计算方式，通过这种方式，共享的软硬件资源和信息可以按需求提供给计算机各种终端和其他设备——维基百科</li><li>云计算是一种模型，可以实现随时随地、边界的、按需的从可配置计算资源共享池中获取所需要的资源（例如，网络、服务器、存储、应用程序及服务），资源可以快速攻击和释放，是管理的工作量和服务提供者的接入降低至最少。——NIST（美国国家标准与技术研究院）</li><li>云计算是一种计算方式，能通过Internet技术将可扩展的和弹性的IT能力作为服务交付给外部用户。——Gartner</li><li>（长）云计算是一种商业计算模型，他将计算任务分布在大量计算构成的资源池上，使各种应用系统能够根据需要获取计算力、存储空间和信息服务——刘鹏</li><li>（短）云计算是通过网络按需提供可动态伸缩的廉价计算服务——刘鹏</li></ul><h3 id="云计算VS网格计算"><a href="#云计算VS网格计算" class="headerlink" title="云计算VS网格计算"></a>云计算VS网格计算</h3><p>都能提升计算能力完成数据处理，构建虚拟资源池且动态可伸缩</p><h4 id="网格计算"><a href="#网格计算" class="headerlink" title="网格计算"></a>网格计算</h4><ul><li>强调聚合分布的资源</li><li>强调虚拟组织，立足特定任务</li><li>利用中间件来屏蔽异构系统</li><li>面向科研，商业模式不清晰</li></ul><h4 id="云计算-1"><a href="#云计算-1" class="headerlink" title="云计算"></a>云计算</h4><ul><li>强调使用专有的资源</li><li>不强调虚拟组织，重视通用性</li><li>不强调异构型</li><li>针对企业应用，商业模式清晰</li></ul><h3 id="大数据时代"><a href="#大数据时代" class="headerlink" title="大数据时代"></a>大数据时代</h3><p>云计算和人工智能是处理大数据的能力与方法，物联网和互联网+是大数据的来源于去向</p><h4 id="大数据5V"><a href="#大数据5V" class="headerlink" title="大数据5V"></a>大数据5V</h4><ol><li>Volume</li><li>Variety</li><li>Velocity</li><li>Value</li><li>Veracity</li></ol><h4 id="云计算的特点"><a href="#云计算的特点" class="headerlink" title="云计算的特点"></a>云计算的特点</h4><ul><li>超大规模</li><li>虚拟化</li><li>按需服务</li><li>通用</li><li>高可伸缩性</li><li>极其廉价</li><li>高可靠</li></ul><h3 id="云服务模型"><a href="#云服务模型" class="headerlink" title="云服务模型"></a>云服务模型</h3><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/cloudcomputing.png" alt="云服务模型"></p><h4 id="IaaS"><a href="#IaaS" class="headerlink" title="IaaS"></a>IaaS</h4><p>通过虚拟机方式对外提供计算和存储能力。</p><p>机器享有公网IP，多个虚拟机之间通过网络进行通信。</p><p>基本上可以说是租用独立的云计算机，由用户解决协同问题。用户交互接口向应用以web Service的方式提供访问接口</p><p>优势：</p><blockquote><ul><li>允许用户动态申请和释放资源</li><li>按使用量计费</li><li>更高的资源使用效率（节能）</li></ul></blockquote><h4 id="PaaS"><a href="#PaaS" class="headerlink" title="PaaS"></a>PaaS</h4><p>只是提供用户一个应用程序的运行环境，但是用户不需要考虑结点间的配合问题，但是这要求用户按照指定的编程环境和编程模型构建应用。</p><h4 id="SaaS"><a href="#SaaS" class="headerlink" title="SaaS"></a>SaaS</h4><p>针对性非常强，只提供某些专门用途的服务</p><h3 id="云计算的实现机制"><a href="#云计算的实现机制" class="headerlink" title="云计算的实现机制"></a>云计算的实现机制</h3><p>云计算体系结构分为：</p><ol><li>SOA构建层（封装云计算能力成标准的web service服务，并纳入到SOA体系）</li><li>管理中间件层（云计算的资源管理，并对众多应用任务进行调度）</li><li>资源池层（将大量相同类型的资源构成同构或者接近同构的资源池）</li><li>物理资源层（硬件以及软件的支持）</li></ol><h4 id="SOA"><a href="#SOA" class="headerlink" title="SOA"></a>SOA</h4><p>面向服务的体系结构（Service-oriented Architecture）</p><p>将服务作为分布式对象</p><h4 id="管理中间件层"><a href="#管理中间件层" class="headerlink" title="管理中间件层"></a>管理中间件层</h4><ul><li>资源管理</li><li>用户管理</li><li>任务管理</li><li>安全管理</li></ul><h3 id="云的部署模型"><a href="#云的部署模型" class="headerlink" title="云的部署模型"></a>云的部署模型</h3><h4 id="公有云"><a href="#公有云" class="headerlink" title="公有云"></a>公有云</h4><p>可以被所有用户访问的云环境</p><h4 id="社区云"><a href="#社区云" class="headerlink" title="社区云"></a>社区云</h4><p>只能由社区用户访问</p><h4 id="私有云"><a href="#私有云" class="headerlink" title="私有云"></a>私有云</h4><p>由一家组织单独拥有</p><h4 id="混合云"><a href="#混合云" class="headerlink" title="混合云"></a>混合云</h4><p>由两种或者更多的模型构成的云环境</p><h3 id="云计算的优势"><a href="#云计算的优势" class="headerlink" title="云计算的优势"></a>云计算的优势</h3><ul><li>经济性</li><li>可扩展和可伸缩性</li><li>虚拟化</li><li>高可靠</li><li>管理简单</li><li>安全</li></ul><h3 id="云计算的技术难点"><a href="#云计算的技术难点" class="headerlink" title="云计算的技术难点"></a>云计算的技术难点</h3><ul><li>数据中心安全控制</li><li>构建高度同构化的虚拟资源</li><li>高可用性的实现</li><li>容错的实现</li><li>节能</li><li>云安全与隐私安全</li></ul><h3 id="云计算的风险"><a href="#云计算的风险" class="headerlink" title="云计算的风险"></a>云计算的风险</h3><ul><li>安全漏洞</li><li>降低了运营管理控制</li><li>可移植性有限</li><li>法律法规问题</li></ul><h2 id="虚拟化技术"><a href="#虚拟化技术" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h2><p>虚拟化技术的核心思想是利用软件或固件管理程序构成虚拟化层，把物理资源映射为虚拟资源 。在虚拟资源上可以安装和部署多个虚拟机 ，实现多用户共享物理资源 ，技术首先由IBM提出</p><h3 id="虚拟化实现"><a href="#虚拟化实现" class="headerlink" title="虚拟化实现"></a>虚拟化实现</h3><p>添加一个成为虚拟化层的软件，管理客户操作系统。</p><p>虚拟化层软件用于虚拟化基础设施</p><h3 id="虚拟化层次"><a href="#虚拟化层次" class="headerlink" title="虚拟化层次"></a>虚拟化层次</h3><p>虚拟硬件环境、处理器、内存和I/O设备</p><h3 id="不同层次的虚拟化"><a href="#不同层次的虚拟化" class="headerlink" title="不同层次的虚拟化"></a>不同层次的虚拟化</h3><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/virtual.png" alt="不同的虚拟化"></p><h4 id="硬件级虚拟化"><a href="#硬件级虚拟化" class="headerlink" title="硬件级虚拟化"></a>硬件级虚拟化</h4><ol><li>为程序提供与原始硬件机器基本一致的环境</li><li>运行在该虚拟硬件环境中的程序性能损失应该较低</li><li>系统资源应该处于VMM的完全控制中</li></ol><p>可以分为全虚拟化与半虚拟化</p><p>初始化一个硬件级虚拟机非常慢</p><h4 id="操作系统级虚拟化"><a href="#操作系统级虚拟化" class="headerlink" title="操作系统级虚拟化"></a>操作系统级虚拟化</h4><p>看作是寄居虚拟化的一种在操作系统中插入一个虚拟化层</p><p>优点：</p><blockquote><ol><li>最小的启动或停止开销，资源需求低，可扩展性强</li><li>需要时，可同步虚拟机与宿主操作系统环境状态的变化</li><li>在同一个主操作系统上运行的多个操作系统级虚拟机共享同一个操作系统内核</li><li>在虚拟化层中允许虚拟机中进程访问尽可能多的主机资源</li></ol></blockquote><p>缺点：</p><blockquote><ol><li>同一个容器中的操作系统级虚拟机必须使用相同的客户操作系统</li><li>资源隔离较差</li></ol></blockquote><h4 id="虚拟机-VS-Docker容器"><a href="#虚拟机-VS-Docker容器" class="headerlink" title="虚拟机 VS Docker容器"></a>虚拟机 VS Docker容器</h4><ul><li>客户操作系统 vs. 独立/共享二进制文件和库</li><li>20s启动 vs. 500ms启动</li><li>较高应用灵活性 vs. 低成本高性能</li><li>适合没有编排的多个应用使用 vs. 适用于编排条件下多个副本相同的应用扩展</li></ul><h4 id="发展趋势"><a href="#发展趋势" class="headerlink" title="发展趋势"></a>发展趋势</h4><p>多种虚拟化共同发展，容器成为云计算的主流</p><h2 id="数据中心虚拟化"><a href="#数据中心虚拟化" class="headerlink" title="数据中心虚拟化"></a>数据中心虚拟化</h2><p>现阶段的数据中心规模不断增大、成本逐渐上升、管理日趋复杂所以使用虚拟化实现资源的动态分配和调度。</p><h3 id="虚拟化类型"><a href="#虚拟化类型" class="headerlink" title="虚拟化类型"></a>虚拟化类型</h3><p>主要分为三种类型：服务器虚拟化、存储虚拟化、网络虚拟化</p><h4 id="服务器虚拟化"><a href="#服务器虚拟化" class="headerlink" title="服务器虚拟化"></a>服务器虚拟化</h4><p>这种虚拟化就是硬件级的虚拟化，包括了CPU虚拟化、内存虚拟化、IO设备虚拟化</p><h4 id="存储虚拟化"><a href="#存储虚拟化" class="headerlink" title="存储虚拟化"></a>存储虚拟化</h4><p>概念：存储虚拟化将系统中分散的存储资源整合起来。</p><p>技术：在虚拟层通过使用数据镜像、数据校验和多路径等技术，利用负载均衡、数据迁移、数据块重组等技术整合和重组底层物理资源。</p><p>分为基于主机的存储虚拟化、基于存储设备的存储虚拟化、基于网络的存储虚拟化</p><h4 id="网络虚拟化（不考）"><a href="#网络虚拟化（不考）" class="headerlink" title="网络虚拟化（不考）"></a>网络虚拟化（不考）</h4><p>传统数据中心的网络传输效率较低，因为使用的数据接口的格式不统一</p><p>云计算使用之后使用了统一的交换网络</p><p>引入虚拟化之后数据中心的网络虚拟化分为核心层、接入层和虚拟机网络虚拟化三个层面</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/virtual3.png" alt="网络虚拟化层级"></p><h4 id="桌面虚拟化（不考）"><a href="#桌面虚拟化（不考）" class="headerlink" title="桌面虚拟化（不考）"></a>桌面虚拟化（不考）</h4><h5 id="第一代桌面虚拟技术"><a href="#第一代桌面虚拟技术" class="headerlink" title="第一代桌面虚拟技术"></a>第一代桌面虚拟技术</h5><p>实现了在同一个独立的计算机硬件平台上，同时安装多个操作系统，并同时运行这些操作系统</p><h5 id="第二代桌面虚拟化技术"><a href="#第二代桌面虚拟化技术" class="headerlink" title="第二代桌面虚拟化技术"></a>第二代桌面虚拟化技术</h5><p>进一步将桌面系统的运行环境与安装环境、应用与桌面配置文件进行了拆分，从而大大降低了管理复杂度与成本，提高了管理效率。</p><h3 id="虚拟机迁移"><a href="#虚拟机迁移" class="headerlink" title="虚拟机迁移"></a>虚拟机迁移</h3><p>从源到目的地的方式分为：</p><ul><li>物理机到虚拟机 P2V</li><li>虚拟机到虚拟机 V2V<strong>（云计算中关注的重点：实时迁移）</strong></li><li>虚拟机到物理机 V2P</li></ul><p>动态实时迁移：保持虚拟机运行的同时，将其从一个计算机迁移到另一个计算机，并在目的地计算机恢复运行。</p><h4 id="内存迁移"><a href="#内存迁移" class="headerlink" title="内存迁移"></a>内存迁移</h4><p>这是最困难的地方</p><p>分为三个阶段，Push阶段，Stop-and-Copy阶段、Pull阶段，有三种迁移方法：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/virtual2.png" alt="不同的内存迁移方法"></p><h4 id="网络资源迁移"><a href="#网络资源迁移" class="headerlink" title="网络资源迁移"></a>网络资源迁移</h4><p>协议状态等迁移</p><h4 id="存储设备迁移"><a href="#存储设备迁移" class="headerlink" title="存储设备迁移"></a>存储设备迁移</h4><p>目前使用NAS作为存储设备进行数据共享，所以不太需要存储设备的迁移。</p><h3 id="虚拟机隔离技术"><a href="#虚拟机隔离技术" class="headerlink" title="虚拟机隔离技术"></a>虚拟机隔离技术</h3><p>虚拟机之间在没有授权许可的情况下，互相之间不可通信、不可联系的一种技术。</p><p>现有的虚拟机隔离机制有：</p><ul><li>网络隔离</li><li>构建虚拟安全文件防护网</li><li>基于访问控制的逻辑隔离机制</li><li>硬件提供的内存保护机制</li><li>进程地址空间的保护机制，IP地址隔离</li></ul><h4 id="网络隔离"><a href="#网络隔离" class="headerlink" title="网络隔离"></a>网络隔离</h4><p>防止外部的网络攻击到达。系统控制通信数据</p><h2 id="云数据中心"><a href="#云数据中心" class="headerlink" title="云数据中心"></a>云数据中心</h2><h3 id="云数据中心的特征"><a href="#云数据中心的特征" class="headerlink" title="云数据中心的特征"></a>云数据中心的特征</h3><ul><li>高设备利用率（通过虚拟化技术对硬件进行整合）</li><li>绿色节能（服务器较为节能，供电技术，软件算法）</li><li>高可用性（各个部分冗余，灾容设计）</li><li>自动化管理（无人值守，远程管理）</li></ul><h3 id="云数据中心网络部署"><a href="#云数据中心网络部署" class="headerlink" title="云数据中心网络部署"></a>云数据中心网络部署</h3><ul><li>构建方便简单</li><li>不便于拓展升级</li><li>任意一个核心交换机故障导致上千台服务器故障</li><li>低成本、高可扩展性、低配置开销、节能</li><li>有多种可使用的网络结构</li></ul><h4 id="改进树（FatTree，VL2）"><a href="#改进树（FatTree，VL2）" class="headerlink" title="改进树（FatTree，VL2）"></a>改进树（FatTree，VL2）</h4><p>FatTree使用两级路由表，允许两级前缀查询，消除了树形结构对上层链路的吞吐量的要求限制，内部通信能够提供多条并行链路。</p><p>VL2是一套可扩展且灵活的网络架构，微软数据中心采用。扁平寻址，负载均衡，使用CLOS拓扑结构建立扁平的第二层网络。</p><p>优势： VL2 是目前最易用于对现有数据中心网络改造的结构。<br>缺点： VL2 依赖于中心化的基础设施来实现 2 层语义和资源整合，面临单点失效和扩展性问题。</p><h4 id="递归层次结构"><a href="#递归层次结构" class="headerlink" title="递归层次结构"></a>递归层次结构</h4><p>解决可扩展性的较好选择，每个高层的网络拓扑由多个低层的递归单元按照递归规律互相连接构成，同时也是更高层次网络的一个递归单元。</p><p>服务器使用两个网卡端口：主用端口连接低层网络，备用端口连接高层网络。</p><h4 id="光交换网络"><a href="#光交换网络" class="headerlink" title="光交换网络"></a>光交换网络</h4><p>在业务增长的时候数据中心内部和服务器间的数据流量增加，传统网络设备无法处理，使用光纤设备。</p><p>OSA基于光交换的数据中心网络体系结构</p><blockquote><ul><li>光交换矩阵（OSM）</li><li>波长选择交换机（WSS）</li></ul></blockquote><h4 id="无线数据中心网络"><a href="#无线数据中心网络" class="headerlink" title="无线数据中心网络"></a>无线数据中心网络</h4><p>静态链路和有线接口在突发流量和高负载情况下会降低整个数据中心的网络性能，所以使用无线网络的广播机制克服这个问题。</p><h4 id="软件定义网络（SDN）"><a href="#软件定义网络（SDN）" class="headerlink" title="软件定义网络（SDN）"></a>软件定义网络（SDN）</h4><p>将网络的控制平面和数据转发平面分离</p><p>通过软件更新实现网络升级，无需针对硬件进行配置。</p><p>openflow是第一个针对SDN实现的标准接口，以良好的灵活性、规范性被堪称SDN通信协议的标准。</p><h3 id="绿色节能技术"><a href="#绿色节能技术" class="headerlink" title="绿色节能技术"></a>绿色节能技术</h3><p>数据中心的耗能越来越大。</p><p>节能的方面：</p><ul><li>配电系统（高压直流配电、市区直供配电）</li><li>空调系统（高温回风空调，低能耗加湿，自然冷空调系统）</li><li>集装箱数据中心（使用固定模块的数据中心设备）</li><li>管理系统</li><li>新能源（利用新能源供电）</li></ul><h3 id="自动化管理"><a href="#自动化管理" class="headerlink" title="自动化管理"></a>自动化管理</h3><p>使得在规模较大的情况下，实现较少人员对数据中心的高度智能和管理</p><p>资源的自动化调度和对业务的灵活响应</p><p>自动化管理的五个特征：</p><ul><li>全面的可视性</li><li>自动的控制执行</li><li>多层次的无缝集成</li><li>综合与实时报告</li><li>全生命周期支持</li></ul><p>自动化的实现的三个阶段：</p><ul><li>IT服务操作</li><li>IT服务管理</li><li>数据中心自动化</li></ul><h3 id="容灾备份"><a href="#容灾备份" class="headerlink" title="容灾备份"></a>容灾备份</h3><p>容灾备份是通过在异地建立和维护一个备份存储系统，利用地理上的分离来保证系统和数据对灾难性事件的抵御能力。</p><p>抵抗程度分级：</p><ul><li>数据级容灾：只保证数据的完整性可靠性和安全性，提供的服务会中断</li><li>应用级容灾：能保证不间断提供服务</li></ul><p>容灾的核心是复制数据，使用的技术有快照技术，远程镜像技术，数据库复制技术和基于IP的SAN的远程数据容灾备份技术等。</p><h2 id="Hadoop2-0（可能不考）"><a href="#Hadoop2-0（可能不考）" class="headerlink" title="Hadoop2.0（可能不考）"></a>Hadoop2.0（可能不考）</h2><h3 id="分布式存储"><a href="#分布式存储" class="headerlink" title="分布式存储"></a>分布式存储</h3><p>分布式文件系统（Distributed File System，DFS）</p><p>将多台机器硬盘以某种方式连接到一起，采用客户-服务器模式构建分布式存储集群，让master管理slave，在这种DFS中对内呈现出客户-服务器模式，对外呈现出统一存储空间，同一文件接口。</p><h3 id="分布式计算"><a href="#分布式计算" class="headerlink" title="分布式计算"></a>分布式计算</h3><p>Google提出移动计算比移动数据更划算</p><p>采用客户-服务器模式构建分布式计算集群</p><p>在只使用分布式存储的情况下会出现每个计算机进行本地数据的计算，然后进行合并，但是如果使用了Hadoop的MapReduce框架，情况如下：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/mapreduce.png" alt="Hadoop使用的框架"></p><h3 id="可靠性问题：冗余存储"><a href="#可靠性问题：冗余存储" class="headerlink" title="可靠性问题：冗余存储"></a>可靠性问题：冗余存储</h3><p>不是通过单纯的增加额外的设备备份来达到目的，通过每台机器上的数据都能在集群中的另一台机器上找到，计算也是一样的，Master会知道每一份数据的存储位置，要求所有的存有带计算数据的机器都进行计算，去最快的运算结果。</p><p>冗余存储不仅提高了分布式存储的可靠性，也提高了分布式计算的可靠性</p><h3 id="Hadoop简介"><a href="#Hadoop简介" class="headerlink" title="Hadoop简介"></a>Hadoop简介</h3><p>2006年完成大部分开发，成为Hadoop。Hadoop1.0和Hadoop2.0 的架构差异较大</p><ul><li><p>Hadoop1.0</p><blockquote><ul><li>Hadoop Common：支持其他两个模块的公用组件</li><li>Hadoop DFS：分布式文件系统</li><li>Hadoop MapReduce：分布式计算框架</li></ul></blockquote></li><li><p>Hadoop2.0（新增）</p><blockquote><ul><li>分布式存储HDFS</li><li>分布式操作系统Yarn</li><li>通过调用程序库，可使用简单的编程模型处理分布在不同机器上的大规模数据</li><li>采用客户-服务器模式，很容易从一台机器扩展至成千上万台机器，每台机器均能提供本地存储和本地计算</li></ul></blockquote></li></ul><h4 id="主要应用领域"><a href="#主要应用领域" class="headerlink" title="主要应用领域"></a>主要应用领域</h4><ul><li>构建大型分布式集群（存储加计算）</li><li>数据仓库（存储）</li><li>数据挖掘（计算）</li></ul><h3 id="Hadoop2-0体系架构"><a href="#Hadoop2-0体系架构" class="headerlink" title="Hadoop2.0体系架构"></a>Hadoop2.0体系架构</h3><ul><li>公共组件Common</li><li>分布式文件系统HDFS</li><li>分布式操作系统Yarn（分布式资源管理系统）</li><li>MapReduce引擎</li></ul><h4 id="Common"><a href="#Common" class="headerlink" title="Common"></a>Common</h4><ul><li>定位：其他模块的公共组件，定义程序员取得集群服务的编程接口，为其它模块提供公用API</li><li>作用：降低Hadoop设计的复杂性，减少其他模块间的耦合性，增强Hadoop健壮性。</li><li>功能：<ul><li>提供公用API和程序员编程接口</li><li>本地Hadoop库</li><li>超级用户</li><li>服务器级别认证</li><li>HTTP认证</li></ul></li></ul><h4 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h4><ul><li>定位：高容错、高扩展、高可靠，并提供服务访问接口。</li><li>内部特性：<ul><li>荣誉备份、副本存放、副本选择、心跳检测</li><li>数据完整性检测、云数据磁盘失效</li><li>简单一致性模型、流式数据访问、客户端缓存</li><li>流水线复制、架构特征、超大规模数据集</li></ul></li></ul><h4 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h4><ul><li>定位：管理计算机资源，提供用户和程序访问系统资源API</li></ul><h2 id="Spark原理（可能不考）"><a href="#Spark原理（可能不考）" class="headerlink" title="Spark原理（可能不考）"></a>Spark原理（可能不考）</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Hadoop所使用的mapreduce效率还是较低，且如果需要输出作为输入，需要较长时间。并且在mapreduce过程中过于频繁的硬盘读写也是一个速度瓶颈。所以Spark就产生了，基于RDDD进行计算，独立性更强，速度更快，支持多种语言</p><h3 id="高层库"><a href="#高层库" class="headerlink" title="高层库"></a>高层库</h3><h4 id="Spark-SQL"><a href="#Spark-SQL" class="headerlink" title="Spark SQL"></a>Spark SQL</h4><p>分布式SQL引擎，在Spark程序中使用API进行调用</p><h4 id="Spark-Streaming"><a href="#Spark-Streaming" class="headerlink" title="Spark Streaming"></a>Spark Streaming</h4><p>实时分析大量数据，处理周期短。</p><h4 id="Spark-Graphx"><a href="#Spark-Graphx" class="headerlink" title="Spark Graphx"></a>Spark Graphx</h4><p>以图为基础数据结构的算法实现和相关应用</p><h4 id="Spark-MLlib"><a href="#Spark-MLlib" class="headerlink" title="Spark MLlib"></a>Spark MLlib</h4><p>解决机器学习的问题（分类、回归、类聚、协同过滤）</p><h2 id="Spark实践（可能不考）"><a href="#Spark实践（可能不考）" class="headerlink" title="Spark实践（可能不考）"></a>Spark实践（可能不考）</h2><p>全部都是各种源代码，人都裂开了。`</p><h2 id="OpenStack（重点）"><a href="#OpenStack（重点）" class="headerlink" title="OpenStack（重点）"></a>OpenStack（重点）</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>OpenStack是一个管理计算、存储和网络资源的数据中心云计算开放平台，通过一个仪表盘，为管理员提供了所有的管理控制，同时通过web界面为其用户提供资源。</p><h4 id="架构（前三个为核心部件）"><a href="#架构（前三个为核心部件）" class="headerlink" title="架构（前三个为核心部件）"></a>架构（前三个为核心部件）</h4><ul><li>Nova（计算）</li><li>Glance（镜像服务）</li><li>Swift（对象存储）</li><li>Keystone（身份服务）</li><li>Neutron（网络&amp;地址管理）</li><li>Cinder（块存储）</li><li>Horizon（UI界面）</li><li>Manila（文件共享存储服务）</li></ul><h4 id="虚拟机创建过程"><a href="#虚拟机创建过程" class="headerlink" title="虚拟机创建过程"></a>虚拟机创建过程</h4><ul><li>资源准备<ul><li>通过 Keystone 进行用户身份认证，通过认证后，用户即可与 Openstack API 节点通信，触发创建请求</li><li>通过调度器获得启动虚拟机的最佳位置：通过工作守护进程获得物理节点上的资源状态； Nova scheduler</li></ul></li><li>创建流程<ul><li>调用身份认证进行身份验证</li><li>生成用于后续调用的令牌</li><li>访问镜像服务以获取镜像列表，并获取目标基础镜像</li><li>处理计算服务 API 请求</li><li>处理计算服务对安全组和密钥调用的请求</li><li>调用网络服务 API 确定可用网络</li><li>通过计算节点调度程序选择 Hypervisor 节点</li><li>调用块存储服务 API 为实例分配卷</li><li>通过计算服务 API 调用再 Hypervisor 节点启动实例</li><li>调用网络服务 API 为实例分配网络资源</li></ul></li></ul><h4 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h4><p>用户使用Web中提供的API对内部的API进行调用。</p><p>核心服务之间的依赖关系<br>运行 Openstack 服务的节点</p><ul><li>云控制器：控制所有服务的节点</li><li>网络节点：运行网络服务的节点</li><li>计算节点：运行虚拟机的节点（也可以运行网络服务）</li></ul><h3 id="部署（重点）"><a href="#部署（重点）" class="headerlink" title="部署（重点）"></a>部署（重点）</h3><h4 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h4><p>是一种软件研发管理的思想、方法论，他追求的是一种没有隔阂的理想研发写作的状态。</p><h4 id="DevOps-OpenStack"><a href="#DevOps-OpenStack" class="headerlink" title="DevOps+OpenStack"></a>DevOps+OpenStack</h4><h5 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h5><p>openstack软件和部署云基础架构的持续增长的复杂性必须被简化。</p><h5 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h5><p>基础架构中的所有内容都必须被自动化</p><p>将openstack分解为多个部分</p><h5 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h5><p>简化和模块化OpenStack需要根据需求进行定制</p><h4 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h4><p>基础架构自动化引擎：安装Ansible自身部署系统和管理的目标系统。</p><p>下面看的有点一知半解</p><h3 id="云控制器"><a href="#云控制器" class="headerlink" title="云控制器"></a>云控制器</h3><p>集群就能提高可用性，只要有多的机器即可。</p><ul><li><p>非对称集群（只有在主服务器故障时备用服务器才会接管系统）</p></li><li><p>对称集群（正常情况下所有节点工作，作为负载均衡）</p></li></ul><p>很多OpenStack的功能体现在基础架构服务中。</p><ul><li><p>基础架构服务</p><ul><li><p>不属于 OpenStack 对外提供的公共服务，但被多个 Openstack 组件使用</p></li><li><p>消息队列：必须是集群式 的； RabbitMQ ZeroMQ Qpid</p></li><li><p>整合数据库： OpenStack 的环境数据，使用数据等； MySQL 和 MongoDB</p></li></ul></li><li><p>OpenStack 服务</p><ul><li>身份、镜像、计算、网络、存储等</li></ul></li></ul><h4 id="Keystone"><a href="#Keystone" class="headerlink" title="Keystone"></a>Keystone</h4><p>身份认证和服务目录（其他所有服务项Keystron注册API端点）</p><p>由多个Provider组成，都有自己的职责。</p><blockquote><ul><li>身份提供者 Identity Provider ：服务用户、管理员用户、终端用户</li><li>资源提供者 resource Provider project 、 domain</li><li>认证提供者 Authorization Provider ：用户和用户组和他们角色之间的关系</li><li>令牌提供者 Token Provider ：访问 openstack 服务需要一个有效的令牌，通过身份提供者的认证后获得令牌</li><li>目录提供者 Catalog Provider ：维护服务和 API 端点的目录</li><li>策略提供者 Policy Provider ：策略由多条规则组成，每条规则定义了哪些用户和角色被允许访问哪些资源</li></ul></blockquote><h4 id="Nova管理组件及API"><a href="#Nova管理组件及API" class="headerlink" title="Nova管理组件及API"></a>Nova管理组件及API</h4><p>Nova是计算组织控制器，处理Openstack云中实例生命周期的所有活动。</p><h4 id="其他服务"><a href="#其他服务" class="headerlink" title="其他服务"></a>其他服务</h4><ul><li>Glance负责镜像管理</li><li>仪表盘服务</li><li>计量服务</li></ul><h3 id="计算节点"><a href="#计算节点" class="headerlink" title="计算节点"></a>计算节点</h3><h4 id="Hypervisor"><a href="#Hypervisor" class="headerlink" title="Hypervisor"></a>Hypervisor</h4><p>是计算节点的核心，又称VMM</p><p>计算节点运行nova-compute服务，负责启动和终止虚拟机。</p><h4 id="Magnum"><a href="#Magnum" class="headerlink" title="Magnum"></a>Magnum</h4><ul><li>Bay 是一组运行 COE 软件的节点，表示一个容器集群</li><li>Pod 是 COE 最基本的部署调度单元，逻辑上对应一个服务实例，运行一组容器，必须有一个作为网络路由</li></ul><h4 id="Nova单元"><a href="#Nova单元" class="headerlink" title="Nova单元"></a>Nova单元</h4><p>所有计算节点都需要与消息总线和数据库服务器通信，随着计算节点增多，使得消息队列和数据库过载，因此产生 Nova 计算单元</p><h2 id="云计算核心算法"><a href="#云计算核心算法" class="headerlink" title="云计算核心算法"></a>云计算核心算法</h2><p>云计算的基础是分布式集群技术，所以需要良好的资源和任务调度算法</p><p>集群的基础算法有：</p><ul><li>Paxos算法<ul><li>朴素Paxos</li><li>Multi-Paxos</li><li>Raft算法</li></ul></li><li>DHT算法</li><li>Gossip协议</li></ul><h3 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h3><p>基于消息传递且具有高度容错特性的一致性算法，是目前公认的解决分布式一致性问题最有效的算法之一。</p><p>分布式一致性问题就是在分布式环境下多个节点或进程对某个值进行决议，在没有延时，丢包的理想网络环境中很容易做到，但是在实际操作中会出现问题。</p><h4 id="共识算法"><a href="#共识算法" class="headerlink" title="共识算法"></a>共识算法</h4><p>Consensus Algorithm，即使是在部分节点故障，网络延时、网络分割的情况下，多个节点均能对某个事情达成一致的看法。</p><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>主要是算法比较难理解</p><p>可以由一个或多个提议进程发起提案，所有进程对这个提案达成一致之后完成。</p><p>不存在恶意破坏整体一致性的节点，每一个节点都可信任。</p><h4 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h4><ul><li><p>提议者向所有的决策者发送提案ID和Value等待回复。</p><blockquote><p>初始化的提案请求是prepare请求，只有提案ID，之后的是accept请求 ，是接受了决策者返回之后发出的，这时候有ID和Value</p></blockquote></li><li><p>决策者如果已经收到其他提议者的Value就返回这个值，如果没有收到就返回空</p></li><li><p>决策者回应的时候就许下承诺（不接受更老的相同ID提案请求，不接受更老的accept请求）</p></li><li><p>提议者收到大多数的决策者的回复之后对ID和Value再次进行发送广播（Value值如果收到了就直接对最新的Value进行广播，如果没收到就随机）</p></li><li><p>决策者收到这个广播之后进行accept处理之后再次回应</p></li><li><p>提议者收到多数回应之后表示提案成功，将决议发给所有的Learner</p></li></ul><h4 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h4><p>由于可能由两个提议者一直循环提出编号递增的提案，死循环，没有value，可以选定一个主Proposer，只有这个都可以提出提案。</p><h4 id="典型场景1（数据副本一致性）"><a href="#典型场景1（数据副本一致性）" class="headerlink" title="典型场景1（数据副本一致性）"></a>典型场景1（数据副本一致性）</h4><ul><li><p>主从同步方式</p><blockquote><p>主数据收到请求之后要求所有副本执行相同操作之后返回，所有副本执行成功之后主数据才会进行自我操作然后返回。不能保证<strong>可用性</strong></p></blockquote></li><li><p>主从异步复制</p><blockquote><p>主数据直接对自己进行操作并返回之后要求所有的副本进行相同操作，不能保证<strong>一致性</strong>。</p></blockquote></li></ul><h4 id="典型场景2（多副本状态机）"><a href="#典型场景2（多副本状态机）" class="headerlink" title="典型场景2（多副本状态机）"></a>典型场景2（多副本状态机）</h4><p>多台机器拥有完全相同的状态，运行完全相同的确定性状态机。使用这个来解决单节点故障的解决方案。</p><h3 id="Multi-Paxos"><a href="#Multi-Paxos" class="headerlink" title="Multi-Paxos"></a>Multi-Paxos</h3><p>如果只有一个人发起请求，就可以省去prepare请求，直接使用随机值作为value。</p><p>在知乎上找到了一篇比较详细的说明文章，可以参考：<a href="https://zhuanlan.zhihu.com/p/42912831">https://zhuanlan.zhihu.com/p/42912831</a></p><p>后面还有算法的详细解析：<a href="https://zhuanlan.zhihu.com/p/45742830">https://zhuanlan.zhihu.com/p/45742830</a></p><p>说实话本人还是看不懂，欢迎评论解答</p><h3 id="Raft算法"><a href="#Raft算法" class="headerlink" title="Raft算法"></a>Raft算法</h3><p>Raft算法可以看<a href="https://raft.github.io">官方GitHub主页</a>，有对应的文档。</p><p>官方也提供了<a href="http://thesecretlivesofdata.com/raft">动画演示网页</a>。通过观看来了解算法</p><h3 id="DHT算法"><a href="#DHT算法" class="headerlink" title="DHT算法"></a>DHT算法</h3><p>Distributed Hash Table，分布式哈希表</p><p>云计算模式——按照功能划分服务器类型</p><p>物联网模式——客户端服务器的重要集中式架构</p><p>对等计算模型——所有节点地位相同，共同作为服务器</p><p>因为单点服务器更容易故障。</p><p>DHT算法可以实现在P2P网络中节点连接和通信的一种方式，实现了各个节点之间的地位对等。</p><h4 id="P2P网络拓扑结构"><a href="#P2P网络拓扑结构" class="headerlink" title="P2P网络拓扑结构"></a>P2P网络拓扑结构</h4><ul><li><p>集中式拓扑结构</p><blockquote><p>由中央服务器进行统一目录管理，但是当节点规模过大时会有瓶颈</p></blockquote></li><li><p>分布式非结构化拓扑模式</p><blockquote><p>没有中央服务器，每个节点存储自己的信息，但是超出一定范围之后互相之间并不知情，导致搜索具有盲目性</p></blockquote></li><li><p>分布式结构化拓扑</p><blockquote><p>和上一个基本相同但是在网络搜索信息时，互相知道信息可能存储在哪些节点，搜索效率较高。</p></blockquote></li></ul><p>DHT算法就是依据分布式结构化拓扑模式</p><h4 id="算法原理简介"><a href="#算法原理简介" class="headerlink" title="算法原理简介"></a>算法原理简介</h4><p>主要服务数据存储，核心是资源定位。</p><p>采用分布式+hash+数据表</p><blockquote><p>数据存储在多个节点上，节点是对等的，是数据表的一部分，使用一致性Hash函数继续那个代表数据的key和value映射到具体的节点上。</p><p><strong>核心</strong>：将节点和key散列到同样的空间中，节点散列后得到ID，均匀分布在散列空间中，实现负载均衡。</p></blockquote><h4 id="一致性Hash"><a href="#一致性Hash" class="headerlink" title="一致性Hash"></a>一致性Hash</h4><p>普通的Hash算法会导致当由服务器失效或者新的服务器添加的时候原有Hash表完全变动，需要全部重新结算，所以使用一致性Hash</p><p>一致性Hash把Cache和资源视为同等概念，都进行Hash，所以Hash结果和Cache数量无关。</p><p>这种算法能保证：</p><ul><li>单调性（在新的Cache加入系统时不会干扰原有系统）</li><li>平衡性（Hash的结果能够尽可能分不到所有的Cache中去，实现负载均衡。）</li></ul><h4 id="算法优点"><a href="#算法优点" class="headerlink" title="算法优点"></a>算法优点</h4><ul><li><p>只需要给定资源的Key就能够在网络中查找资源具体数据，而不需要指定资源IP等网络信息</p></li><li><p>能够很好的共享下层设施，形成一个统一的基于内容的命名层，增加了寻找对象的灵活性</p></li><li><p>网络时自组织和自治的，降低了执行、维护和管理的代价</p></li></ul><p>只要节点愿意提供网络带宽和PC资源就能直接使用。</p><p>DHT算法的具体实现有Chord、Pastry，Kademlia</p><h4 id="Chord（不考）"><a href="#Chord（不考）" class="headerlink" title="Chord（不考）"></a>Chord（不考）</h4><p>对Node和Key使用相同的Hash函数映射到同一个标识符空间，保证一致性哈希。</p><p>散列空间中的标识符看作首位相连的环，标识符可能是节点也可能是资源</p><p>Node使用IP作为Hash输入，数据资源可以使用名称</p><p>简单的情况下寻找资源就直接在圆环上依次寻找，可伸缩方法节点中有路由表，通过路由表查询能够到找到比较接近的节点位置，直接进行跳转。如果在路由表的最后一项都比资源小，直接跳转到路由表最远端节点。</p><h5 id="节点加入"><a href="#节点加入" class="headerlink" title="节点加入"></a>节点加入</h5><p>一个节点通知后面一个节点他自己的存在，然后通知后一个节点他的接入，后一个节点将加入的节点设置为自己的前序节点。之后圆环进入稳定阶段，每个节点规律性检查自己的后续节点的前序节点是不是自己。</p><h5 id="节点退出"><a href="#节点退出" class="headerlink" title="节点退出"></a>节点退出</h5><p>需要修改相邻节点的前序节点和后续节点，并修改路由列表</p><h4 id="Pastry（不考）"><a href="#Pastry（不考）" class="headerlink" title="Pastry（不考）"></a>Pastry（不考）</h4><p>核心思想就是让一个节点知道更多的关于其他节点的信息，也有一个路由表，每一个节点都会有叶子节点集和路由表。</p><p>每个节点的标识符为n位，路由表有n行，第一行是n位与本节点都不相同的节点，第二行一位相同……</p><blockquote><p>标准表述：路由表的（i，j）的意义是这个节点的前i位与路由表所在节点相同，且（i+1）的位置的值为j</p></blockquote><p>在叶子节点集中是最贴近当前节点的前后几个节点，各占一半。</p><p>具体可以看图</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/pastry.png" alt="pastry"></p><p>应该不会考，李传艺自己都搞不清楚。</p><h4 id="Gossip协议（不考）"><a href="#Gossip协议（不考）" class="headerlink" title="Gossip协议（不考）"></a>Gossip协议（不考）</h4>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CloudComputing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络名词解释汇总（持续更新中）</title>
      <link href="/2020/08/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A%E6%B1%87%E6%80%BB/"/>
      <url>/2020/08/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0195912cc3fb9ef4e91c81cb0388a1477ad2234afd071b0a04831a505fc7cb7f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近现代史纲要考点复习</title>
      <link href="/2020/07/31/%E8%BF%91%E7%8E%B0%E4%BB%A3%E5%8F%B2%E7%BA%B2%E8%A6%81%E8%80%83%E7%82%B9%E5%A4%8D%E4%B9%A0/"/>
      <url>/2020/07/31/%E8%BF%91%E7%8E%B0%E4%BB%A3%E5%8F%B2%E7%BA%B2%E8%A6%81%E8%80%83%E7%82%B9%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>考试时会从下列八题中出5题，每题6分，共30分 （写一段话，答出时间、地点、关键人物、事件的主要内容和意义即可）。</p><hr><h3 id="洋务运动"><a href="#洋务运动" class="headerlink" title="洋务运动"></a>洋务运动</h3><p>洋务运动，又称自强运动。</p><h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><p>19世纪60年代到90年代</p><h4 id="地点"><a href="#地点" class="headerlink" title="地点"></a>地点</h4><p>国内</p><h4 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h4><p>曾国藩，李鸿章，张之洞，左宗棠</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p>晚清洋务派所进行的一场引进西方军事装备、机器生产和科学技术以挽救清朝统治的自救运动。洋务派举办的事业归纳起来有三个方面：1兴办近代企业 2 建立新式海陆军 3 创办新式学堂，派遣留学生</p><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><p>洋务运动虽然在客观上刺激中国资本主义发展、并且在一定程度上抵制了外国资本主义的经济输入 ，但并没有使中国走上富强之路。</p><hr><h3 id="太平天国"><a href="#太平天国" class="headerlink" title="太平天国"></a>太平天国</h3><h4 id="时间-1"><a href="#时间-1" class="headerlink" title="时间"></a>时间</h4><p>1851-1864</p><h4 id="地点-1"><a href="#地点-1" class="headerlink" title="地点"></a>地点</h4><p>在广西金田村法动反抗清朝的武装起义，攻下南京之后定都南京</p><h4 id="人物-1"><a href="#人物-1" class="headerlink" title="人物"></a>人物</h4><p>洪秀全，杨秀清，萧朝贵，冯云山，韦昌辉，石达开</p><h4 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h4><p>武装起义，从广西金田村起义，在1853年攻下江宁，定都于此，命名天京，之后被湘军攻陷。</p><h4 id="意义-1"><a href="#意义-1" class="headerlink" title="意义"></a>意义</h4><p>太平天国历时14年，达到了旧式农民战争的最高峰，不仅是中国历史上第一次在南方兴起而波及全中国的农民战争，也是世界历史上规模空前的一次农民战争。而且它在新的时代产生了新的特点，开创了中国农民战争不少先例。</p><hr><h3 id="戊戌变法"><a href="#戊戌变法" class="headerlink" title="戊戌变法"></a>戊戌变法</h3><h4 id="时间-2"><a href="#时间-2" class="headerlink" title="时间"></a>时间</h4><p>1898.6.11~1898.9.21</p><h4 id="地点-2"><a href="#地点-2" class="headerlink" title="地点"></a>地点</h4><p>国内</p><h4 id="人物-2"><a href="#人物-2" class="headerlink" title="人物"></a>人物</h4><p>康有为（《孔子改制考》），梁启超（《变法通议》），谭嗣同（批判君主专制政体），严复（《天演论》）。</p><h4 id="内容-2"><a href="#内容-2" class="headerlink" title="内容"></a>内容</h4><p>抨击封建专制制度，反思洋务，主张维新变法，实行君主立宪制，发展工商业，走资本主义道路。</p><h4 id="意义-2"><a href="#意义-2" class="headerlink" title="意义"></a>意义</h4><ol><li>直接动员和指导了维新变法运动。</li><li>维新思想是爱国的，在民族危亡的时刻，为挽救民族危机，提出维新变法充满强烈的爱国主义激情。</li><li>维新思想具有进步意义。维新派要求走资本主义道路，顺应了历史的发展趋势，具有进步意义。</li><li>维新思想具有启蒙作用。传播西方资产阶级的社会政治学说和自然学知识。</li><li>维新派对封建制度的批判，客观上有利于资产阶级革命思想的传播。</li></ol><hr><h3 id="清末新政"><a href="#清末新政" class="headerlink" title="清末新政"></a>清末新政</h3><h4 id="时间-3"><a href="#时间-3" class="headerlink" title="时间"></a>时间</h4><p>1901~1911年</p><h4 id="地点-3"><a href="#地点-3" class="headerlink" title="地点"></a>地点</h4><p>国内</p><h4 id="人物-3"><a href="#人物-3" class="headerlink" title="人物"></a>人物</h4><p>朝廷保守派</p><h4 id="内容-3"><a href="#内容-3" class="headerlink" title="内容"></a>内容</h4><p>光绪二十六年（1900年）庚子事变爆发，慈禧太后率光绪皇帝等百位皇亲在忠臣随扈下出宫避祸西安。回銮之后，接受八国联军提出的《辛丑条约》，此举对中国打击甚大，因此朝廷保守派主动进行变法。光绪二十七年（1901年），在慈禧太后的默许下，清政府进行改革，改革内容多与光绪二十四年（1898年）的戊戌变法近似，但比戊戌变法更广更深，还涉及废除千年仕宦之道的科举制度。</p><h4 id="意义-3"><a href="#意义-3" class="headerlink" title="意义"></a>意义</h4><p>由于改革政策的“支离、拖沓”和一些官员的“敷衍”，没有取得太大进展，但“新政”一定程度上推动了中国社会的现代化，也为辛亥革命的兴起提供了准备条件。</p><hr><h3 id="五四运动"><a href="#五四运动" class="headerlink" title="五四运动"></a>五四运动</h3><h4 id="时间-4"><a href="#时间-4" class="headerlink" title="时间"></a>时间</h4><p>1919年，巴黎和会上中国外交失败</p><h4 id="地点-4"><a href="#地点-4" class="headerlink" title="地点"></a>地点</h4><p>前期以北京学生为中心1919年6月3日之后逐渐以上海的工人为中心</p><h4 id="人物-4"><a href="#人物-4" class="headerlink" title="人物"></a>人物</h4><p>前期以北京学生为中心1919年6月3日之后逐渐以上海的工人为中心</p><h4 id="内容-4"><a href="#内容-4" class="headerlink" title="内容"></a>内容</h4><p>口号是“外争国权，内惩国贼”（体现了五四运动反帝反封建的性质）</p><p>结果：1、 释放被捕学生。2、罢免卖国贼职务。3、拒绝合约签字。</p><h4 id="意义-4"><a href="#意义-4" class="headerlink" title="意义"></a>意义</h4><p>性质：是广大人民群众直接参与的毫不妥协的反帝反封建的革命运动。</p><p>是新民主主义革命的开端。</p><hr><h3 id="西安事变"><a href="#西安事变" class="headerlink" title="西安事变"></a>西安事变</h3><h4 id="时间-5"><a href="#时间-5" class="headerlink" title="时间"></a>时间</h4><p>1936.12.12</p><h4 id="地点-5"><a href="#地点-5" class="headerlink" title="地点"></a>地点</h4><p>西安</p><h4 id="人物-5"><a href="#人物-5" class="headerlink" title="人物"></a>人物</h4><p>张学良，杨虎城</p><h4 id="内容-5"><a href="#内容-5" class="headerlink" title="内容"></a>内容</h4><p>西安事变，发生于1936年12月12日，所以又称“双十二事变”。张学良和杨虎城为了达到劝谏蒋介石改变“攘外必先安内”的既定国策，停止内战，一致抗日的目的，在西安发动“兵谏”。同月25日，在中共中央和周恩来主导下，以蒋介石接受“停止内战，联共抗日”的主张而和平解决。</p><h4 id="意义-5"><a href="#意义-5" class="headerlink" title="意义"></a>意义</h4><p>西安事变的和平解决为抗日民族统一战线的建立准备了必要的前提，成为由国内战争走向抗日民族战争的转折点。</p><hr><h3 id="淞沪会战"><a href="#淞沪会战" class="headerlink" title="淞沪会战"></a>淞沪会战</h3><h4 id="时间-6"><a href="#时间-6" class="headerlink" title="时间"></a>时间</h4><p>1937.8.13~1937.11.12</p><h4 id="地点-6"><a href="#地点-6" class="headerlink" title="地点"></a>地点</h4><p>上海</p><h4 id="人物-6"><a href="#人物-6" class="headerlink" title="人物"></a>人物</h4><p>蒋介石，松井石根</p><h4 id="内容-6"><a href="#内容-6" class="headerlink" title="内容"></a>内容</h4><p>淞沪会战（又称八一三战役、第二次淞沪抗战，日本称为第二次上海事变），是中日双方在抗日战争中的第一场大型会战，也是整个中日战争中进行的规模最大、战斗最惨烈的一场战役。</p><h4 id="意义-6"><a href="#意义-6" class="headerlink" title="意义"></a>意义</h4><p>淞沪会战中日军因遭到国民党的顽强抵抗而损失惨重，这场战役对于中国而言，标志两国之间不宣而战、全面战争的真正开始，卢沟桥事变后的地区性冲突升级为全面战争，并彻底粉碎了日本“三个月灭亡中国”计划。</p><hr><h3 id="延安整风"><a href="#延安整风" class="headerlink" title="延安整风"></a>延安整风</h3><h4 id="时间-7"><a href="#时间-7" class="headerlink" title="时间"></a>时间</h4><p>1941.5~1945.4.20</p><h4 id="地点-7"><a href="#地点-7" class="headerlink" title="地点"></a>地点</h4><p>延安</p><h4 id="人物-7"><a href="#人物-7" class="headerlink" title="人物"></a>人物</h4><p>毛泽东</p><h4 id="内容-7"><a href="#内容-7" class="headerlink" title="内容"></a>内容</h4><p>延安整风运动是中国共产党历史上第一次大规模的整风运动。1941年5月，毛泽东同志在延安高级干部会议上作《改造我们的学习》的报告，标志着整风开始；1945年4月20日六届七中全会通过《关于若干历史问题的决议》为止。</p><h4 id="意义-7"><a href="#意义-7" class="headerlink" title="意义"></a>意义</h4><p>延安整风运动在中国共产党历史上具有深远的历史意义，它是党的建设史上的一个伟大创举。通过延安整风，使全党确立了一条实事求是的辩证唯物主义的思想路线，使干部在思想上大大地提高一步，使党达到了空前的团结。</p><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><p>考试时会从下列三题中出2个，每题15分，共30分（写几段话，说明重点，但无需举太多事例）。 </p><hr><h3 id="抗日战争为什么会爆发？这场战争对中国产生了什么深远影响？"><a href="#抗日战争为什么会爆发？这场战争对中国产生了什么深远影响？" class="headerlink" title="抗日战争为什么会爆发？这场战争对中国产生了什么深远影响？"></a>抗日战争为什么会爆发？这场战争对中国产生了什么深远影响？</h3><p>日本积极对外进行扩张，日本国内的经济受到了美国经济危机的影响。在国际形式上各个主要国家对日本侵略采取的绥靖政策导致了日本的侵华。由于日本大举侵华，1935年华北事变之后，中日民族矛盾逐渐上升为主要矛盾，民族危机空前严重。</p><p>国内：抗日战争是中国近代史上最伟大的维护国家主权的斗争，是中国人民反对帝国主义侵略第一次取得了完全胜利。中华民族团结一致，共御外敌，血洗了鸦片战争以来的民族耻辱，捍卫了民族尊严，并为民主革命在全国的胜利奠定了坚实的基础。</p><p>国外：中国的抗日战争时世界反法西斯战争的重要组成部分，为世界反法西斯战争的胜利做出了巨大的贡献，是中国国际地位提高。</p><h3 id="近代以来，哪几个国家对中国历史的影响最大？各自有什么影响？"><a href="#近代以来，哪几个国家对中国历史的影响最大？各自有什么影响？" class="headerlink" title="近代以来，哪几个国家对中国历史的影响最大？各自有什么影响？"></a>近代以来，哪几个国家对中国历史的影响最大？各自有什么影响？</h3><p>从近代史的开端开始首先是英国通过鸦片战争打开了中国的国门，在之后的时间内，美国，俄国，法国，日本等资本主义强国与中国相继签订了不平等条约，导致中国的经济发展严重受阻。</p><p>近代影响最大的国家是日本，日本发动了全面的侵华战争，在中国的领土上犯下了非常多的罪行，但是日本的侵略激起了中国人民的反抗，最后中国在抗日战争中取得了胜利</p><p>现代影响最大的国家是俄国，虽然俄国起步较晚，但是很快变成了一个强国，之后苏联的共产主义时期也对中国有较大的影响。</p><h3 id="十九世纪以来直到今天，中国女性的社会地位发生了哪些变化？"><a href="#十九世纪以来直到今天，中国女性的社会地位发生了哪些变化？" class="headerlink" title="十九世纪以来直到今天，中国女性的社会地位发生了哪些变化？"></a>十九世纪以来直到今天，中国女性的社会地位发生了哪些变化？</h3><p>十九世纪的时候中国的女性的社会地位是非常低的，在平时的生活中几乎没有任何的自主权利。而现在封建礼教已经被打破，中国传统女性也就变成了历史。维新变法时期中国女性的自我意识开始被唤醒，之后再辛亥革命女性意识初步觉醒，再五四时期中国的女性已经真正的觉醒。</p><p>中国女性的政治地位发生了改变，从一开始的女性绝对不可以参政，变为了现在的都有参政意识以及能够正常参政</p><p>中国女性的家庭地位发生了改变，从完全听从丈夫的安排，变成了现在大多数的平权家庭。</p><p>中国女性的就业地位发生了变化，改革开放之后女性的就业数量不断增长。</p><h2 id="材料题"><a href="#材料题" class="headerlink" title="材料题"></a>材料题</h2><p>考试时会从下列三题中出2个，每题20分，共40分（写几段话，用具体的事例阐述自己的观点）。</p><h3 id="近代以来，中国人对西方的认知发生了哪些重大改变？这些改变如何影响了中国历史的进程？"><a href="#近代以来，中国人对西方的认知发生了哪些重大改变？这些改变如何影响了中国历史的进程？" class="headerlink" title="近代以来，中国人对西方的认知发生了哪些重大改变？这些改变如何影响了中国历史的进程？"></a>近代以来，中国人对西方的认知发生了哪些重大改变？这些改变如何影响了中国历史的进程？</h3><p><strong>1、开明接纳与傲慢自负：鸦片战争前的西学东渐</strong></p><p>&emsp;&emsp;明末清初之际，西方新航路开辟正如火如荼，利玛窦、南怀仁等早期传教士们进入中国传播天主教，向中国人传授自然科学知识，康熙一度非常鼓励和提倡学习、模仿西方科学文化，此为西学东渐上升时期。但在1700年“礼仪之争”过后，清朝统治者对传教士渐趋严苛，西学在中国的传播越来越萎缩，至乾隆时期，他对西方科技文化甚至采取了极端蔑视的态度。清朝末期，这种态度在政治政策上的直接反映就是闭关锁国，闭目塞听、腐朽落后的中国与船坚炮利的西方国家形成了鲜明的对比。</p><p><strong>2、无力抗拒和自我安慰：洋务运动时期的西学中源</strong></p><p>&emsp;&emsp;鸦片战争后，林则徐、魏源等知识分子提出的“制夷——悉夷——师夷”主张，在曾国藩、左宗棠、李鸿章等开明洋务派中成为现实。开明派认为，西学中学本是一家，学习西学是继承祖宗文化遗产。“西学中源”也成了开明派派人去西方学习科技的重要抗辩武器。甚至洋务运动后期，有丰富海外阅历与西学功底的知识分子，如王韬、薛福成等人，也都认为西方科技、文化等都源于中国传统文化，这也侧面反映出了中国知识分子对传统文化的过度自信甚至自负。</p><p>&emsp;&emsp;除西学中源外，开明派的另一个文化武器是“中体西用”。不过随着洋务运动的不断发展，开明洋务派实际上一直在突破“西学中源”、“中体西用”文化理论范式的束缚。洋务运动发展到80年代初，许多人已经把学习西方的重点，逐步转向筹建和发展资本主义性质的经济体制。他们不只谋求军事之强，更要谋求经济之富，不只主张引进西方先进科学技术，而且主张建立资本主义的经济结构。</p><p><strong>3、深入了解和热烈拥抱：甲午战后的西学启蒙</strong></p><p>&emsp;&emsp;甲午战败宣告了洋务运动破产，中国陷入了帝国主义的瓜分狂潮。康有为等维新人物率先大力宣扬西方资产阶级的自由、平等、博爱精神，又在“托古改制”时将人权、民主、平等、选举、议院等资本主义精神、制度化为“孔子改制”名下的内容。在大部分知识分子已经认可了西方科学技术的背景下，梁启超则提倡全面学习西方民主主义文化，将政治和法律摆在突出地位。严复在天津《直报》上通过将中西学进行比较而论证西方文化的先进性，主张只有西学才能挽救中国。</p><p>&emsp;&emsp;辛亥革命后，“民主”、“共和”观念更加深入人心，新文化运动在这样的时代背景下应运而生。新文化运动的启蒙要求和主张比康有为、梁启超、严复等人的更加彻底、全面、激进，他们强烈抨击中华传统文化，要求将西方的近代科学与民主作为基本精神、基本态度、基本方法，将其注入中国人的文化心理中。与此同时，一些外国著名学者如罗素等来华讲学，也直接推动了西方思想文化在中国的传播。</p><p><strong>4、阶级斗争与思想禁锢：新中国成立后西学遇冷</strong></p><p>&emsp;&emsp;新中国成立后，毛泽东曾提出“百花齐放、百家争鸣”的方针与“古为今用、洋为中用”的原则，然而因为极左路线的影响，“双百方针”与“古今中外”原则都没能得到很好地贯彻实行，西方思想文化一度遭到冷遇甚至退场。</p><p>&emsp;&emsp;由于帝国主义的包围封锁，建国初期我国主要与苏联等社会主义国家一级亚非拉友好国家在文化领域开展交流与合作，引进了许多西方古典艺术门类，先后成立了中央歌剧院、北京人民艺术剧院等一大批新型文艺院团，全国各地建设了大量公益文化设施，基本结束了旧中国文化事业积贫积弱的局面。但是主要还停留在歌舞表演等较浅的视听层面，真正的思想文化交流非常有限。</p><p><strong>5、求知若渴和话语抢夺：改革开放后的西学升温</strong></p><p>&emsp;&emsp;十一届三中全会过后，中国开始了改革开放的崭新时代，西方国家的资金、技术与资本主义文化重新走进了中国，随着全球化加深与互联网快速发展，西方思想文化在掌握话语权的情况下汹涌而来。随着中国国力的增强，以及与西方国家的合作与竞争越来越深入、激烈，西方文化与中国主流意识形态文化、中国传统文化之间的交融交流交锋将成为常态。</p><h3 id="十九世纪下半叶，大清国面临着种种内忧外患，上至君臣，下至底层民众，对此做出了哪些不同的回应？"><a href="#十九世纪下半叶，大清国面临着种种内忧外患，上至君臣，下至底层民众，对此做出了哪些不同的回应？" class="headerlink" title="十九世纪下半叶，大清国面临着种种内忧外患，上至君臣，下至底层民众，对此做出了哪些不同的回应？"></a>十九世纪下半叶，大清国面临着种种内忧外患，上至君臣，下至底层民众，对此做出了哪些不同的回应？</h3><p><strong>洋务运动</strong></p><p>&emsp;&emsp;洋务运动是在19世纪60年代初清政府镇压太平天国起义的过程中和第⼆次鸦⽚战争结束后兴起的。</p><p>&emsp;&emsp;为了挽救清政府的统治危机，封建统治阶级中的部分成员如奕、曾国藩、李鸿章、左宗棠、张之洞等，主张引进、仿造⻄⽅的武器装备和学习⻄⽅的科学技术，创设近代企业，兴办洋务。这些官员被称为“洋务派”。</p><p>&emsp;&emsp;从19世纪60到90年代，洋务派举办的事业归纳起来有三个方面：1兴办近代企业 2 建立新式海陆军 3 创办新式学堂，派遣留学生</p><p><strong>戊戌变法</strong></p><p>&emsp;&emsp;维新派倡导救亡和变法的活动 19世纪 90年代以后，中国⺠族资本主义有了初步发展。</p><p>&emsp;&emsp;新兴的⺠族资产阶级迫切要求挣脱外国资本主义和国内封建势⼒的压迫和束缚，为在中国发展资本主义开辟道路。甲午战争的惨败，造成了新的⺠族危机，激发了新的⺠族觉醒。⽽站在救亡图存和变法维新前列的，正是代表⺠族资本主义发展要求的知识分⼦。他们把向⻄⽅学习推进到⼀个新的⾼度，即不但要求学习⻄⽅的科学技术，⽽且要求学习⻄⽅资本主义的政治制度和思想⽂化。在内忧外患的冲击和中⻄⽂化的碰撞过程中，⼈们逐步形成了⼀个共识：要救国，只有维新，要维新，只有学外国。那时的外国只有⻄⽅资本主义国家是进步的，它们成功地建设了资产阶级的国家。⽇本向⻄⽅学习有成效，中国⼈也想向⽇本学。在这样的历史条件下，资产阶级的改良思想迅速传播开来，逐步形成为变法维新的思潮，并发展成⼀场变法维新的政治运动。</p><p><strong>太平天国运动</strong></p><p>&emsp;&emsp;残酷的压迫和剥削，迫使⼴⼤⼈⺠尤其是农⺠群众⾛上反抗⽃争的道路。1842年⾄ 1850年间，全国各族⼈⺠的反清起义在百次以上。清政府调兵镇压，但群众⽃争彼伏此起，酝酿着更⼤规模的反抗。太平天国农⺠起义就是在这种情况下爆发的。</p><p>&emsp;&emsp;太平军所进⾏的战争，是⼀次反对清政府腐朽统治和地主阶级压迫、剥削的正义战争。</p><p>&emsp;&emsp;太平天国起义沉重打击了封建统治阶级，强烈撼动了清政府的统治根基。这次起义历时14载，起义军转战 18省，并建⽴了与清王朝对峙的政权。在太平天国的影响下，各地各族⼈⺠反清⽃争⻛起云涌。如南⽅和东南沿海各省有天地会及其⽀派的起义，北⽅有捻军起义，⻄南、⻄北有各族⼈⺠起义。天京失陷后，太平天国余部仍坚持⽃争达 4年之久。这些⽃争加速了清王朝的衰败过程。</p><p>&emsp;&emsp;太平天国起义是中国旧式农⺠战争的最⾼峰。它把千百年来农⺠对拥有⼟地的渴望在《天朝⽥亩制度》中⽐较完整地表达了岀来。《资政新篇》则是中国近代历史上第⼀个⽐较系统的发展资本主义的⽅案，这反映了太平天国某些领导⼈在后期试图通过向外国学习来寻求岀路的⼀种努⼒。因此，太平天国起义具有了不同于以往农⺠战争的新的历史特点。</p><h3 id="从1921年至1949年，中国共产党与国民党每次合作与斗争的原因和结果各是什么？国民党最后为什么会失败？"><a href="#从1921年至1949年，中国共产党与国民党每次合作与斗争的原因和结果各是什么？国民党最后为什么会失败？" class="headerlink" title="从1921年至1949年，中国共产党与国民党每次合作与斗争的原因和结果各是什么？国民党最后为什么会失败？"></a>从1921年至1949年，中国共产党与国民党每次合作与斗争的原因和结果各是什么？国民党最后为什么会失败？</h3><p><strong>第一次国共合作：</strong></p><p>&emsp;&emsp;辛亥革命之后，本以为取得胜利，但胜利果实却被袁世凯窃取，孙中山为了保卫共和，发起了护法运动等，但都失败了。与此同时，他却听到了俄国十月革命的胜利，尤其是中国共产党的成立，给孙中山带来了新的希望。于是他决定联俄，与共产国际的代表开始接触，并在共产国际的建议下决定与中国共产党合作。此时的中国共产党还处于幼年期，深感自己力量和斗争经验的不足，接受了共产国际的建议，决定与国民党合作。随后两党经过谈判，最终确定了“党内合作”的方式。</p><p>&emsp;&emsp;1924年1月，国民党一大的召开标志着第一次国共合作正式形成。合作后，国民党成功得到改组，并在共产国际和中国共产党的帮助下创办了黄埔军校，培养出很多军事人才，也为北伐胜利提供了保障；在两党的共同努力下，很快掀起了大革命的高潮，仅用了3年就取得了北伐战争的胜利，有力地震慑了帝国主义。同时，两党的声望和力量也在大革命中得到发展和壮大。然而就在大革命胜利在望之际，帝国主义和封建军阀勾结国民党右翼势力发动了反革命政变，导致了1927年国民大革命失败，第一次国共合作破裂。</p><p><strong>第二次国共合作：</strong></p><p>&emsp;&emsp;1931年“九一八”事变后，日本帝国主义加紧了侵华的步伐，中日矛盾急剧上升成为主要矛盾，中华民族危机日益加深。国共两党对日本侵略中国的野心都有很清醒的认识。毛泽东指出：“目前形势的特点，就是日本帝国主义要变中国为它的殖民地。”蒋介石也说：“彼之处心积虑，乃企图亡我之整个中华民族。”此时，全国人民的抗日救亡运动也在不断高涨。在该形势下国共两党于 1936年初开始重新接触，谋求第二次合作，以共同完成驱逐日寇这一目标。</p><p>&emsp;&emsp;经过第一次合作，此时的两党已相对成熟，并有各自的政权和军队，其谈判过程也较为艰辛，1936年12月12日，发生“西安事变”，最终事变的和平解决促使第二次国共合作初步形成。1937年9月22日，国民政府公开发表了《中共中央为公布合作宣言》。次日，蒋介石公开发表了承认中共合法地位的谈话，至此，第二次国共合作正式形成。它采取了“党外合作”的方式，在合作的前提下，两党有各自独立的政权和军队。</p><p>&emsp;&emsp;抗战胜利之后美国调停失败，国共内战爆发，两党走向全面对抗，共产党最终取得胜利，建立新中国，国民党退守台湾，台湾问题遗留至今。</p><p><strong>国共合作与对抗：</strong></p><ol><li><p>1924年在中共的帮助下，国民党一大召开，确立了联俄、联共、扶助农工三大政策，成为第一次国共合作的政治基础。中共党内合作，建立黄埔军校蒋介石任校长，周恩来任政治部主任；</p></li><li><p>1926年至1928年北伐国共共同参与，北伐战争，领导国民革命进行北伐，两次东征消灭了陈炯明的势力，广东革命根据地得到巩固和统一，使革命势力从珠江流域发展到长江流域，基本上推翻了北洋军阀的反动统治, 并收回了汉口、九江英租界。英国外交部开始考虑扩大对国民党政权的外交承认，另一方面英国驻华公使也于十二月中旬拜访武汉，并与国民政府举行会谈，意味着世界各国观察中国局势发展的视野正在剧烈变化。</p></li><li><p>蒋介石四一二清党，国共决裂，随后进行了1927至1937十年内战，</p></li><li><p>在抗日战争时期，中国共产党同中国国民党第二次建立的合作，即抗日民族统 一战线红军改编八路军，后取得抗日战争的胜利，使中国摆脱了列强的殖民控制，提高了中国的国际地位。抗战期间双方都在为内战做准备，皖南事变国民党第二次反共高潮的最高峰。</p></li><li><p>抗战胜利之后美国调停失败，国共内战爆发，共产党最终取得胜利，建立新中国，国民党退守台湾，台湾问题遗留至今。</p></li></ol><p><strong>对中国历史的影响：</strong></p><p>&emsp;&emsp;第一次国共合作基本上推翻了北洋军阀的反动统治，重重打击了帝国主义的嚣张气焰和侵略中华的势力。对于中国共产党来说，第一次国共合作对宣传共产党的纲领有重要意义，党在群众心中的地位逐渐增高，广大人民群众也受到了一次革命的洗礼，为中国革命日后发展奠定了牢固的基础。</p><p>&emsp;&emsp;第一次国共合作的形成还大大加快了中国革命前进的脚步，虽然第一次合作最后是以失败告终，但是党在这次合作中懂得了进行土地革命和掌握革命武装的重要性，这对促成第二次国共合作有重要意义。</p><p>&emsp;&emsp;第二次国共合作开始后，抗日民族统一战线确立，中国共产党始终坚持独立自主的原则，确保无产阶级在统一战线中的政治领导权。在对敌作战上，中国共产党坚持放手发动群众，积极开展敌后游击战争，扩大了抗日人民武装队伍和抗日的根据地，壮大了人民抗日的力量，巩固了抗日民族统一战线，保证了抗日战争的胜利。</p><p>&emsp;&emsp;两次国共合作显示出了中华民族伟大的团结力量，中国军民一心，积极保卫家园的决心让外国侵略者刮目相看，提高了我国在国际上的地位。</p><p>一、战略认识的差bai距。老蒋认为，只要掌握北平、天津、上海、武汉、广州几个城市就等于掌握全国，只注意拉拢军阀、财团、黑帮、地主，严重忽略工农，需要知道当时工农占中国人口80%以上，国军在城里的力量强，但在农村地区基本空白。老毛则认为，必须团结一切力量，以农村包围城市，得到80%人口的支持，从长远来看，就处于不败之地。所谓得人心者，得天下，是有道理的。</p><p>二、阶级属性的弱点。国民党的资产阶级带有妥协性和软弱性，贪财近利，贪图享乐，而工农阶级是激进的，不容易妥协的，长此以往，自然是国民党失败。</p><p>三、党的建设。国民党自成立之初，就残留大量问题，官商一体，导致严重腐败问题，封建残余严重，导致思想落后，内部派系林立，导致经常互相扯后腿，调度不灵，互相争功，阳奉阴违，导致指挥混乱，部署混乱，调度混乱等问题。吃空饷，虚报军情，擅自贩卖军用物资，扰民严重等等，层出不穷。</p><p>四、组织性问题。很多人都习惯性忽略组织性的重要性。草原民族的游牧部落，长期忽视组织性的建设，只擅长游击，来了就抢，抢了就跑，想尽办法逃，更像强盗，但成吉思汗统一蒙古草原之后，赋予了他们坚定的信念，严明了军纪，号令分明，千夫长死，百夫长上，战斗至一兵一卒，组织性大大提升，战斗力也大大提升。元末的朱元璋农民起义军，原本也不过是一群乌合之众，战斗力不强，纪律涣散，逃兵很多，但提升了组织性，确定了驱除靼虏，恢复中原的奋斗目标，民族大义大大刺激将士的战斗意志，而且明确军衔，职权分明，整顿军纪，就变成了正规军，战斗力大大提升。国民党在掌权后，革命信念就逐渐崩溃了，丧失掉信仰，军纪也逐渐涣散，加上本身派系繁多，山头林立，经常为些鸡毛蒜皮小事闹矛盾，导致经常调度不灵，影响部署，怠误战机，但仗着关系，反而免责，职权不明，乱插手乱指挥的事常有，上级一投降，手下也跟着投降，死一个团长，这个团就乱了。国民党长期忽视党内建设和组织性建设，是导致败亡的根本原因。而共军最初也有山头林立，纪律涣散的问题，逃兵很多，战斗力低下。后来大力整顿，确立坚定信仰，唯有共同并且坚定的信仰，才能让将士们奋勇作战。确定多首长领导制，上层平时团长打仗，政委负责思想政治和生活，团长死后，还有政委接替指挥，营长死，连长接着指挥，连长死接着排长指挥，战至一兵一卒。把党支部下到连级，党员比例越大，逃兵越少，纪律也越好。</p><p>五、后勤问题。虽说国民党依托城市和工厂，还有美国供应物资，后勤方面比较强大，但是忽视了中国的实际国情。美式装备是很先进，但弹药消耗太快，国民党自己无法生产配套的弹药，弹药只能依赖美国空运，而且维护麻烦，需要很高的保障水平，才能维持正常使用。当时的中国战场，非常辽阔，但基建非常落后，基本都是土路，却没有加油站，没有汽油，那些飞机、坦克、卡车都没法动。而共党有群众基础，农民推着小推车给共军粮食，打仗靠缴获的武器弹药，还有自己的地下兵工厂，土制手雷、地雷、大炮，虽然落后，威力不足，但好歹能用，共军习惯走山路，而且经常是快步跑，所谓的运动战，也基本靠两条腿跑出来的，反而比国军还快一些。</p><p>六、指挥问题。战略认识的差距，也导致军事认识的不同，指挥水平也不同。国军太执着于一城一地的得失，每占一城，都必分兵把守，反而导致可用于一线的兵力越来越少，逐渐陷于被动挨打，而共军的战略则相反，不计较一城一地得失，而是尽量保留有生力量，搞运动战，搞局部兵力优势，慢慢蚕食鲸吞国军，掌握战略主动权。而且由于国军内部派系林立，军阀都要保存实力，之间矛盾又多，互不支援，反而经常扯后腿，有指挥不畅，调度不灵的问题，在抗日战争时期，这个问题就很严重了，在解放战争中，更是暴露无遗，很多次都错失良机。</p><p>七、人心向背是关键。本来抗战结束后，老蒋的威望达到极致，国军实力也是大增。但签订了《雅尔塔协议》，承认外蒙事实独立，就已经大失人心。把经济搞得乱七八糟，上海打老虎失败，导致人民彻底失望。而共产党，自创立以来，反而是比较得人民同情的，有大量的知识分子倾向共党，共党靠土改得人心，人人都能分到土地，就拥护这个党，而且当时共军还没有正规化，还没有建立税收制度，把国军赶跑了，他们不用交税，还推翻地主土豪，农民自然拥护共党。自从国民党掌权以后，就基本没有过像样的经济改革和土地改革，反而地方官僚极其腐败，官商黑勾结，各种巧立名目，大力搜刮民脂民膏，苛捐杂税超多，人民负担很重。国民党专政太久了，而对民主党派人士大肆打压，有异见者不是逮捕，就是暗杀，经过媒体曝光，自然更是大失人心，尤其是上海打老虎失败后，民主党派人士，包括国民党左派，都对国民党是彻底绝望，认为国民党已经没有希望，就全面倒向共产党。地方军向来受中央军排挤，而且老蒋经常想办法削弱他们实力，骗他们当炮灰，然后就接收他们地盘，早就引起很多地方军阀不满了，解放战争后期，在国民党形势不利的情况，大量的国军是大批大批地倒戈。即使在中央军内部，也有相当多人对国民党不满，本身老蒋喜欢玩弄权术，喜欢到处安插特务，即使对嫡系都不是很信任，猜疑心很重，喜欢乱插手前线指挥，逼走很多人。国军第一名将孙立人，论军事才干，毫无疑问是非常厉害的，但受到老蒋猜忌，投闲置散，重用听话但庸才的杜聿明，但讽刺的是，孙立人始终忠心于他，而杜聿明却投共了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 近现代史纲要 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程与计算II重点整理(第20-23章)</title>
      <link href="/2020/07/25/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II%E9%87%8D%E7%82%B9%E6%95%B4%E7%90%86-%E7%AC%AC20-23%E7%AB%A0/"/>
      <url>/2020/07/25/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II%E9%87%8D%E7%82%B9%E6%95%B4%E7%90%86-%E7%AC%AC20-23%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第20、21章-软件交付、软件维护与演化"><a href="#第20、21章-软件交付、软件维护与演化" class="headerlink" title="第20、21章 软件交付、软件维护与演化"></a>第20、21章 软件交付、软件维护与演化</h2><h3 id="1-软件维护的重要性"><a href="#1-软件维护的重要性" class="headerlink" title="1.软件维护的重要性"></a>1.软件维护的重要性</h3><p>（1）由于会出现新的需求，如不维护软件将减小甚至失去服务用户的作用。</p><p>（2）随着软件产品的生命周期越来越长，在软件生存期内外界环境发生变化的可能性越来越大，因此，软件经常需要修改以适应外界环境的改变</p><p>（3）软件产品或多或少的会有缺陷，当缺陷暴露出来时，必须予以及时的解决</p><h3 id="2-开发可维护软件的方法"><a href="#2-开发可维护软件的方法" class="headerlink" title="2.开发可维护软件的方法"></a>2.开发可维护软件的方法</h3><p>（1）考虑软件的可变性：分析需求易变性、为变更进行设计</p><p>（2）为降低维护困难而开发：编写详细的技术文档并保持及时更新、保证代码可读性、维护需求跟踪链、维护回归测试基线</p><h3 id="3-演化式生命周期模型"><a href="#3-演化式生命周期模型" class="headerlink" title="3.演化式生命周期模型"></a>3.演化式生命周期模型</h3><p>初步开发—演化—服务—逐步淘汰—停止</p><h4 id="（1）初步开发"><a href="#（1）初步开发" class="headerlink" title="（1）初步开发"></a>（1）初步开发</h4><p>初始开发阶段按照传统的软件开发方式完成第一个版本的软件产品开发。第一版的软件产品可以实现全部需求，也可以（通常是）只包含部分需求——对用户来说非常重要和紧急的最高优先级需求。</p><h4 id="（2）演化"><a href="#（2）演化" class="headerlink" title="（2）演化"></a>（2）演化</h4><p>可能会有预先安排的需求增量，也可能完全是对变更请求的处理，它们的共同点都是保持软件产品的持续增值，让软件产品能够满足用户越来越多的需要，实现更大的业务价值。</p><p>总的来说，该阶段可能的演化增量有：预先安排的需求增量；因为问题变化或者环境变化产生的变更请求；修正已有的缺陷；随着用户与开发者之间越来越相互熟悉对方领域而新增加的需求。<br>演化阶段的软件产品要具备两个特征：(1) 软件产品具有较好的可演化性。一个软件产品在演化过程中复杂性会逐渐增高，可演化性会逐渐降低直至无法继续演化。演化阶段的软件产品虽然其可演化性低于初始开发阶段的软件产品，但是还没有到达无法演化的地步，还具有较好的可演化性。(2) 软件产品能够帮助用户实现较好的业务价值。只有这样，用户才会继续需要该产品，并持续提供资金支持。</p><p>如果在演化过程中，一个软件产品开始不满足第（2）条特征，那么该产品就会提前进入停止阶段。如果软件产品满足第（2）条的同时不满足第（1）条特征，那么该产品就会进入服务阶段。如果开发团队因为竞争产品的出现或者其他市场考虑，也可以让同时满足上面两条特征的软件产品提前进入服务阶段。</p><h4 id="（3）服务"><a href="#（3）服务" class="headerlink" title="（3）服务"></a>（3）服务</h4><p>服务阶段的软件产品不再持续的增加自己的价值，而只是周期性的修正已有的缺陷。</p><p>服务阶段的产品还仍然被用户使用，因为它仍然能够给用户提供一定的业务价值，所以开发团队仍然需要修正已有缺陷或者进行一些低程度的需求增量，保证用户的正常使用。</p><h4 id="（4）逐步淘汰"><a href="#（4）逐步淘汰" class="headerlink" title="（4）逐步淘汰"></a>（4）逐步淘汰</h4><p>在逐步淘汰阶段，开发者已经不再提供软件产品的任何服务，也即不再继续维护该软件。虽然在开发者看来软件的生命周期已经结束，但是用户可能会继续使用处于该阶段的软件产品，因为它们仍然能够帮助用户实现一定的业务价值。只是用户在使用软件时必须要容忍软件产品中的各种不便，包括仍然存在的缺陷和对新环境的不适应。对于该阶段的产品，开发者需要考虑该产品是否可以作为有用的遗留资源用于新软件的开发，用户需要考虑如何更换新的软件产品并转移已有的业务数据。</p><h4 id="（5）停止"><a href="#（5）停止" class="headerlink" title="（5）停止"></a>（5）停止</h4><p>一个软件正式退出使用状态之后就进行停止状态。开发者不再进行维护，用户也不再使用。</p><h3 id="4-用户文档、系统文档"><a href="#4-用户文档、系统文档" class="headerlink" title="4.用户文档、系统文档"></a>4.用户文档、系统文档</h3><p>（1）用户文档：这里的文档支持是指为用户编写参考指南或者操作教程，常见的如用户使用手册、联机帮助文档等，统称为用户文档。</p><p>文档内容的组织应当支持其使用模式，常见的是指导模式和参考模式两种。指导模式根据用户的任务组织程序规程，相关的软件任务组织在相同的章节或主题。指导模式要先描述简单的、共性的任务，然后再以其为基础组织更加复杂的任务描述。</p><p>参考模式按照方便随机访问独立信息单元的方式组织内容。例如，按字母顺序排列软件的命令或错误消息列表。如果文档需要同时包含两种模式，就需要将其清楚地区分成不同的章节或主题，或者在同一个章节或主题内区分为不同的格式。</p><p>（2）系统文档：更注重系统维护方面的内容，例如系统性能调整、访问权限控制、常见故障解决等等。因此，系统管理员文档需要详细介绍软硬件的配置方式、网络连接方式、安全验证与访问授权方法、备份与容灾方法、部件替换方法等等。</p><h3 id="5-逆向工程、再工程"><a href="#5-逆向工程、再工程" class="headerlink" title="5.逆向工程、再工程"></a>5.逆向工程、再工程</h3><p>（1）逆向工程：分析目标系统，标识系统的部件及其交互关系，并且使用其它形式或者更高层的抽象创建系统表现的过程。逆向工程的基本原理是抽取软件系统的需求与设计而隐藏实现细节，然后在需求与设计的层次上描述软件系统，以建立对系统更加准确和清晰的理解。</p><p>（2）再工程：检查和改造一个目标系统，用新的模式式及其实现复原该目标系统。目的是对遗留软件系统进行分析和重新开发，以便进一步利用新技术来改善系统或促进现存系统的再利用。<br>主要包括：改进人们对软件的理解；改进软件自身，通常是提高其可维护性、可复用性和可演化性。</p><p>常见具体活动有：重新文档化；重组系统的结构；将系统转换为更新的编程语言；修改数据的结构组织。</p><h2 id="第22、23章-软件开发过程模型"><a href="#第22、23章-软件开发过程模型" class="headerlink" title="第22、23章 软件开发过程模型"></a>第22、23章 软件开发过程模型</h2><h3 id="1-软件生命周期模型"><a href="#1-软件生命周期模型" class="headerlink" title="1.软件生命周期模型"></a>1.软件生命周期模型</h3><p>需求工程—软件设计—软件实现—软件测试—软件交付—软件维护</p><h3 id="2-解释与比较不同的软件过程模型"><a href="#2-解释与比较不同的软件过程模型" class="headerlink" title="2.解释与比较不同的软件过程模型"></a>2.解释与比较不同的软件过程模型</h3><p>【题型】对给定场景，判断适用的开发过程模型（要求、特征描述、优点、缺点）</p><h4 id="（1）构建-修复模型"><a href="#（1）构建-修复模型" class="headerlink" title="（1）构建-修复模型"></a>（1）构建-修复模型</h4><p>特征：a.没有对开发过程进行规范和组织，因此一旦开发过程超出个人控制能力，就会导致开发过程无法有效进行而失败。</p><p>b.对需求的真实性没有进行分析</p><p>c.没有考虑软件结构的质量，导致结构在修改中越来越糟，直至无法修改</p><p>d.没有考虑测试和程序的可维护性，也没有任何文档，导致难以维护</p><p>适用场景：软件规模很小，只需要几百行程序，其开发复杂度是个人能力能够胜任的；软件对质量的要求不高，即使出错也无所谓；只关注开发活动，对后期维护的要求不高，甚至不需要进行维护。</p><h4 id="（2）瀑布模型（文档驱动）"><a href="#（2）瀑布模型（文档驱动）" class="headerlink" title="（2）瀑布模型（文档驱动）"></a>（2）瀑布模型（文档驱动）</h4><p>特征：a.对于软件开发活动有明确阶段划分</p><p>b.每个阶段的结果都必须验证，使得该模型是“文档驱动”</p><p>优点：清晰的阶段划分有利于开发者以关注点分离的方式更好的进行复杂软件项目的开发。</p><p>缺点：a.对文档期望过高；</p><p>b.对开发活动的线性顺序假设（线性顺序与迭代相反）；</p><p>c.客户、用户参与度不够（需求被限制在一个时间段）</p><p>d.里程碑粒度过粗（软件复杂使得每个阶段时间长，无法尽早发现缺陷）</p><p>适用：需求非常成熟、稳定，没有不确定的内容，也不会发生变化；所需的技术成熟、可靠，没有不确定的技术难点，也没有开发人员不熟悉的技术问题；复杂度适中，不至于产生太大的文档负担和过粗的里程碑。</p><h4 id="（3）增量迭代模型（需求驱动）与演化模型互为补充"><a href="#（3）增量迭代模型（需求驱动）与演化模型互为补充" class="headerlink" title="（3）增量迭代模型（需求驱动）与演化模型互为补充"></a>（3）增量迭代模型（需求驱动）与演化模型互为补充</h4><p>特征：项目开始时，通过系统需求开发和核心体系结构设计活动完成项目的前景范围的界定，然后将后续开发活动组织为多个迭代、并行的瀑布式开发活动。第一个迭代完成的往往是核心工作，满足基本需求，后续迭代完成附带特性。</p><p>优点：a.更符合软件开发实践</p><p>b.并行开发可以缩短产品开发时间</p><p>c.渐进交付可以加强用户反馈，降低开发风险。</p><p>缺点：a.要求高：软件需要有开放式的体系结构</p><p>b.不确定性太多，导致难以在项目开始就确定前景和范围</p><p>适用：比较成熟和稳定的领域</p><h4 id="（4）演化模型（需求驱动）"><a href="#（4）演化模型（需求驱动）" class="headerlink" title="（4）演化模型（需求驱动）"></a>（4）演化模型（需求驱动）</h4><p>特点：更好地应对需求变更，更适用于需求变更比较频繁或不确定性较多的领域。将软件开发组织为多个迭代、并行的瀑布式开发活动。是迭代＋并行＋渐进</p><p>优点：a.适用于需求变更频繁或者不确定性多的系统的开发</p><p>b.并行开发可以缩短开发时间</p><p>c.加强用户反馈，降低开发风险</p><p>缺点：a.无法在项目早起确定项目范围</p><p>b.后续迭代活动以前导迭代为基础，容易使后续迭代忽略分析与设计。退化为构建－修复方式。<br>适用：不稳定领域的大规模软件系统</p><h4 id="（5）原型模型（需求驱动）"><a href="#（5）原型模型（需求驱动）" class="headerlink" title="（5）原型模型（需求驱动）"></a>（5）原型模型（需求驱动）</h4><p>特点：大量使用抛弃式原型（抛弃式原型：通过模拟“未来”的产品，将“未来”的知识置于“现在”进行推敲，解决不确定性）。</p><p>优点：a.加强与客户、用户的交流，更好的产品满意度</p><p>b.适用于不确定性大的新颖领域</p><p>缺点：a.成本较高，有耗尽时间和费用的风险</p><p>b.有人不舍得抛弃“抛弃式原型”，使得较差代码进入产品，降低质量</p><p>适用：有着大量不确定性的新颖领域</p><h4 id="（6）螺旋模型（风险驱动）"><a href="#（6）螺旋模型（风险驱动）" class="headerlink" title="（6）螺旋模型（风险驱动）"></a>（6）螺旋模型（风险驱动）</h4><p>特点：基本思想是尽早解决比较高的风险，如果有些问题实在无法解决，那么早发现比项目结束时再发现要好，至少损失要小得多。风险是指因为不确定性（对未来知识了解有限）而可能给项目带来损失的情况，原型能够澄清不确定性，所以原型能够解决风险。</p><p>迭代与瀑布的结合：开发阶段是瀑布式的，风险分析是迭代的</p><p>优点：降低风险，减少因风险造成的损失</p><p>缺点：a.使用原型方法，为自身带来风险</p><p>b.模型过于复杂，不利于管理者依据其组织软件开发活动。</p><p>适用性：高风险的大规模软件系统开发</p><h3 id="3-软件工程知识体系的知识域"><a href="#3-软件工程知识体系的知识域" class="headerlink" title="3.软件工程知识体系的知识域"></a>3.软件工程知识体系的知识域</h3><p>需求、设计、构造、测试、维护、配置管理、工程管理、工程过程、工程工具和方法、质量</p><h2 id="跳转链接"><a href="#跳转链接" class="headerlink" title="跳转链接"></a>跳转链接</h2><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-2/">软件工程与计算II重点整理(第1-5章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-3/">软件工程与计算II重点整理(第6-7章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-4/">软件工程与计算II重点整理(第8-11章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-5/">软件工程与计算II重点整理(第12-15章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-6/">软件工程与计算II重点整理(第16-19章)</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>本文转自学长博客，侵删</p><p><a href="https://samperson1997.github.io/2017/12/21/SECII-6/">https://samperson1997.github.io/2017/12/21/SECII-6/</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程与计算Ⅱ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程与计算II重点整理(第16-19章)</title>
      <link href="/2020/07/25/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II%E9%87%8D%E7%82%B9%E6%95%B4%E7%90%86-%E7%AC%AC16-19%E7%AB%A0/"/>
      <url>/2020/07/25/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II%E9%87%8D%E7%82%B9%E6%95%B4%E7%90%86-%E7%AC%AC16-19%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第16章-设计模式"><a href="#第16章-设计模式" class="headerlink" title="第16章 设计模式"></a>第16章 设计模式</h2><h3 id="1-如何实现可修改性、可扩展性、灵活性"><a href="#1-如何实现可修改性、可扩展性、灵活性" class="headerlink" title="1.如何实现可修改性、可扩展性、灵活性"></a>1.如何实现可修改性、可扩展性、灵活性</h3><p>教材263页</p><p>需要进行接口和实现的分离：通过接口和实现该接口的类；通过子类继承父类</p><p>注意：继承关系（A＋B）可能使得灵活性下降，因为父类接口的变化会影响子类，这时可以通过组合关系来解决。</p><p>利用抽象类机制实现可修改性和可扩展性：只要方法的接口保持不变，方法的实现代码是比较容易修改的，不会产生连锁反应。通过简单修改创建新类的代码，就可以相当容易地做到扩展新的需求（不用修改大量与类方法调用相关的代码。</p><p>利用委托机制实现灵活性：继承的缺陷：一旦一个对象被创建完成，它的类型就无法改变，这使得单纯利用继承机制无法实现灵活性（类型的动态改变）。利用组合（委托）机制可以解决这个问题</p><h3 id="2-策略模式"><a href="#2-策略模式" class="headerlink" title="2.策略模式"></a>2.策略模式</h3><p>设计分析：</p><p>1）首先，可以把上下文和策略分割为不同的类实现不同的职责。上下文Context类负责通过执行策略实现自己职责；而策略类Strategy只负责复杂策略的实现。</p><p>2）其次，上下文类和策略类之间的关系是用组合代替继承。</p><p>3）最后，各种策略则在具体策略类(ConcreteStrategy)中提供，而向上下文类提供统一的策略接口。（客户通常会创建一个ConcreteStrategy对象，然后传递给Context来灵活配置Strategy接口的具体实现）</p><p>应用场景：</p><p>需要定义同一个行为的多种变体（可以是一个类的行为，也可是多个类的行为）</p><p>一个类定义了很多行为，而且通过switch语句进行选择。</p><p>相关原则：SRP，OCP+LSP+DIP，使用组合</p><p>缺点：代码难以理解（违反显式原则）；需要考虑concreteStrategy由谁来创建的问题</p><p>可修改性、可扩展性</p><p>符合DIP原则的抽象类（继承）机制：通过定义抽象类与继承（实现）它的子类强制性地做到：接口与实现的分离，进而实现上述质量；强制性地使用抽象类起到接口的作用，强制性地使用子类起到实现的作用</p><p>灵活性：组合（委托）机制，动态调整所委托的类，实现灵活性</p><h3 id="3-抽象工厂模式"><a href="#3-抽象工厂模式" class="headerlink" title="3.抽象工厂模式"></a>3.抽象工厂模式</h3><p>学会区分简单工厂，工厂方法，和抽象工厂</p><p>简单工厂：使用一个工厂对象，通过if－else等方式实例化需要的对象</p><p>工厂方法：一个抽象方法creator（可以在原来的类中），使用子类继承creator所在的类通过实现<br>creator方法来实例化需要的对象（实例化推迟到子类）。</p><p>抽象工厂：为应对灵活性要求，提供2套接口：一是表现出稳定的工厂行为的工厂接口，二是表现出稳定产品行为的产品接口。从而，实现了工厂多态和产品多态。</p><p>需要的是产品组合。有一个抽象工厂，该抽象工厂有所有种类产品的create()，</p><p>不同的产品组合拥有不同的具体工厂（继承抽象工厂，实现所有的create()）.</p><p>（1）相关原则：不要重复，封装，OCP＋LSP+DIP。可能违法了显式原则。</p><p>（2）应用场景：抽象工厂模式可以帮助系统独立于如何对产品的创建、构成、表现。</p><p>抽象工厂模式可以让系统灵活配置拥有某多个产品族中的某一个。</p><p>一个产品族的产品应该被一起使用，抽象工厂模式可以强调这个限制。</p><p>如果你想提供一个产品的库，抽象工厂模式可以帮助暴露该库的接口，而不是实现。</p><p>（3）应用注意点：隔离了客户和具体实现。客户可见的都是抽象的接口。</p><p>使得对产品的配置变得更加灵活。</p><p>可以使得产品之间有一定一致性。同一类产品可以很容易一起使用。</p><p>但是限制是对于新的产品的类型的支持是比较困难。抽象工厂的接口一旦定义好，就不容易变更了。</p><p>而这个场景的“代价”，或者是“限制”，是一个工厂中具体产品的种类是稳定的。</p><h3 id="4-单件模式"><a href="#4-单件模式" class="headerlink" title="4.单件模式"></a>4.单件模式</h3><p>为了实现只创建一个对象，首先要让类的构造方法变为私有的；然后只能通过getInstance方法获得Singleton类型的对象的引用。</p><p>相关原则：封装，而且使用了全局变量</p><h3 id="5-迭代器模式"><a href="#5-迭代器模式" class="headerlink" title="5.迭代器模式"></a>5.迭代器模式</h3><p>通过Aggregate创建Iterator</p><p>对于遍历这件事情，主要有2个行为：1）是否有下一个元素；2）得到下一个元素。所以，我们设计迭代器接口hasNext()和next()，分别对应前面2个行为。有了这两个接口，就可以完成遍历操作。迭代器提供的方法只提供了对集合的访问的方法，却屏蔽了对集合修改的方法，这样就对我们把集合作为参数可以做到对集合的“值传递”的效果。</p><p>体现的原则：针对接口编程；SRP; ISP（接口分离）；OCP＋LSP＋DIP</p><p>应用：在同一个集合上进行多种方式的遍历</p><blockquote><p>【题型】给出场景，应用设计模式写出代码</p><p>【题型】给出代码，要求用设计模式改写</p><p>信息隐藏——策略模式、单件模式</p><p>对象创建——抽象工厂、单件模式</p><p>接口编程——迭代器模式</p><p>策略模式——减少耦合、依赖倒置</p><p>抽象工厂——职责抽象、接口重用</p><p>单件模式——职责抽象</p><p>迭代器模式——减少耦合、依赖倒置</p></blockquote><h2 id="第17、18章-软件构造和代码设计"><a href="#第17、18章-软件构造和代码设计" class="headerlink" title="第17、18章 软件构造和代码设计"></a>第17、18章 软件构造和代码设计</h2><h3 id="1-构造包含的活动"><a href="#1-构造包含的活动" class="headerlink" title="1.构造包含的活动"></a>1.构造包含的活动</h3><p>详细设计；编程；测试；调试；代码评审；集成与构建；构造管理。</p><h3 id="2-名词解释"><a href="#2-名词解释" class="headerlink" title="2.名词解释"></a>2.名词解释</h3><p>（1）重构：修改软件系统的严谨方法，它在不改变代码外部表现的情况下改进其内部结构</p><p>（2）测试驱动开发：测试驱动开发要求程序员在编写一段代码之前，优先完成该段代码的测试代码。</p><p>测试代码之后，程序员再编写程序代码，并在编程中重复执行测试代码，以验证程序代码的正确性。</p><p>（3）结对编程：两个程序员挨着坐在一起，共同协作进行软件构造活动</p><h3 id="3-给定代码段示例，对其进行改进或发现其中的问题"><a href="#3-给定代码段示例，对其进行改进或发现其中的问题" class="headerlink" title="3.给定代码段示例，对其进行改进或发现其中的问题"></a>3.给定代码段示例，对其进行改进或发现其中的问题</h3><p>复杂决策：使用有意义的名称封装复杂决策，例如对于决策“ If( (id&gt;0) &amp;&amp; (id&lt;=MAX_ID))”，可以封装为“If ( isIdValid(id) )”，方法isIdValid(id)的内容为 “return ((id&gt;0) &amp;&amp; (id&lt;=MAX_ID) )”<br>数据使用</p><p>（1）不要将变量应用于与命名不相符的目的。例如使用变量total表示销售的总价，而不是临时客串for循环的计数器。</p><p>（2）不要将单个变量用于多个目的。在代码的前半部分使用total表示销售总价，在代码后半部分不再需要“销售总价”信息时再用total客串for循环的计数器也是不允许的。</p><p>（3）限制全局变量的使用，如果不得不使用全局变量，就明确注释全局变量的声明和使用处。</p><p>（4）不要使用突兀的数字与字符，例如15（天）、“MALE”等，要将它们定义为常量或变量后使用。</p><p>明确依赖关系：类之间模糊的依赖关系会影响到代码的理解与修改，非常容易导致修改时产生未预期的连锁反应。对于这些模糊的依赖关系，需要进行明确的注释</p><h3 id="4-契约式设计"><a href="#4-契约式设计" class="headerlink" title="4.契约式设计"></a>4.契约式设计</h3><p>契约式设计又称断言式设计，它的基本思想是：如果一个函数或方法，在前置条件满足的情况下开始执行，完成后能够满足后置条件，那么这个函数就是正确、可靠的。见书上示例P308</p><p>（1）异常</p><p>（2）断言：assert Expression1( : Expression2)</p><p>Expression1 是一个布尔表达式，在契约式设计中可以将其设置为前置条件或者后置条件；</p><p>Expression2 是一个值，各种常见类型都可以；</p><p>如果Expression1 为true，断言不影响程序执行；如果Expression1 为false，断言抛出AssertionError 异常，如果存在Expression2 就使用它作为参数构造AssertionError。</p><h3 id="5-防御式编程"><a href="#5-防御式编程" class="headerlink" title="5.防御式编程"></a>5.防御式编程</h3><p>优点：显著提高可靠性</p><p>防御式编程的基本思想是：在一个方法与其他方法、操作系统、硬件等外界环境交互时，不能确保外界都是正确的，所以要在外界发生错误时，保护方法内部不受损害。与契约式设计有共同点，又有很大的差异。共同点是他们都要检查输入参数的有效性。差异性是防御式编程将所有与外界的交互都纳入防御范围，如用户输入的有效性、待读写文件的有效性、调用的其他方法返回值的有效值……</p><p>编程方式：异常与断言。</p><blockquote><p>输入参数是否合法？</p><p>用户输入是否有效？</p><p>外部文件是否存在？</p><p>对其他对象的引用是否为NULL？</p><p>其他对象是否已初始化？</p><p>其他对象的某个方法是否已执行？</p><p>其他对象的返回值是否正确？</p><p>数据库系统连接是否正常？</p><p>网络连接是否正常？</p><p>网络接收的信息是否有效？</p></blockquote><h3 id="6-表驱动"><a href="#6-表驱动" class="headerlink" title="6.表驱动"></a>6.表驱动</h3><p>对于特别复杂的决策，可以将其包装为决策表，然后用使用表驱动编程的方式加以解决。示例见书上P307</p><h3 id="7-单元测试用例的设计"><a href="#7-单元测试用例的设计" class="headerlink" title="7.单元测试用例的设计"></a>7.单元测试用例的设计</h3><p>MockObject创建桩程序</p><h2 id="第19章-软件测试"><a href="#第19章-软件测试" class="headerlink" title="第19章 软件测试"></a>第19章 软件测试</h2><h3 id="1-白盒测试和黑盒测试的常见方法，并比较优缺点【必考】"><a href="#1-白盒测试和黑盒测试的常见方法，并比较优缺点【必考】" class="headerlink" title="1.白盒测试和黑盒测试的常见方法，并比较优缺点【必考】"></a>1.白盒测试和黑盒测试的常见方法，并比较优缺点【必考】</h3><p>（1）黑盒测试：基于规格的技术，是把测试对象看做一个黑盒子，完全基于输入和输出数据来判定测试对象的正确性，测试使用测试对象的规格说明来设计输入和输出数据。</p><p>常见方法：等价类划分（把输入按照等价类划分，包括有效和无效）；边界值分析；决策表；状态转换。</p><p>（2）白盒测试：基于代码的技术，将测试对象看成透明的，不关心测试对象的规格，而是按照测试对象内部的程序结构来设计测试用例进行测试工作。</p><h3 id="2-能解释并区别白盒测试三种不同的方法【必考】"><a href="#2-能解释并区别白盒测试三种不同的方法【必考】" class="headerlink" title="2.能解释并区别白盒测试三种不同的方法【必考】"></a>2.能解释并区别白盒测试三种不同的方法【必考】</h3><p>语句覆盖、分支覆盖和路径覆盖。教材329页</p><p>语句覆盖：确保被测试对象的每一行程序代码都至少执行一次</p><p>条件覆盖：确保程序中每个判断的每个结果都至少满足一次</p><p>路径覆盖：确保程序中每条独立的执行路径都至少执行一次</p><blockquote><p>【题型】给出一个场景，判断应该使用哪种测试方法，如何去写（JUnit基本使用方法）</p><p>给出功能需求——写功能测试用例</p><p>给出设计图——写集成测试用例，Stub和Driver</p><p>给出方法描述——写单元测试用例，MockObject</p></blockquote><h2 id="跳转链接"><a href="#跳转链接" class="headerlink" title="跳转链接"></a>跳转链接</h2><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-2/">软件工程与计算II重点整理(第1-5章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-3/">软件工程与计算II重点整理(第6-7章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-4/">软件工程与计算II重点整理(第8-11章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-5/">软件工程与计算II重点整理(第12-15章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-6/">软件工程与计算II重点整理(第20-23章)</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>本文转自学长博客，侵删</p><p><a href="https://samperson1997.github.io/2017/12/21/SECII-5/">https://samperson1997.github.io/2017/12/21/SECII-5/</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程与计算Ⅱ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程与计算II重点整理(第12-15章)</title>
      <link href="/2020/07/25/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II%E9%87%8D%E7%82%B9%E6%95%B4%E7%90%86-%E7%AC%AC12-15%E7%AB%A0/"/>
      <url>/2020/07/25/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II%E9%87%8D%E7%82%B9%E6%95%B4%E7%90%86-%E7%AC%AC12-15%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第12章-详细设计概述"><a href="#第12章-详细设计概述" class="headerlink" title="第12章 详细设计概述"></a>第12章 详细设计概述</h2><p>中层设计＋低层设计：实现所有功能性＋非功能性需求</p><h3 id="1-详细设计的出发点"><a href="#1-详细设计的出发点" class="headerlink" title="1.详细设计的出发点"></a>1.详细设计的出发点</h3><p>需求开发的结果（需求规格说明和需求分析模型）和软件体系结构的结果（软件体系结构设计方案与原型）</p><blockquote><p>明确职责建立静态模型（设计类图），明确协作建立动态模型（详细顺序图）</p><p>GRASP（General Responsibility Assignment Software Patterns）</p><h4 id="（1）信息专家模式"><a href="#（1）信息专家模式" class="headerlink" title="（1）信息专家模式"></a>（1）信息专家模式</h4><p>基本的职责分配原则之一，把职责分配给具有完成该职责所需信息的那个类</p><p>例如：总价（委托）——数目——单价——促销策略：耦合没有增加</p><p>总价（得到）——数目、单价、促销策略：增加了耦合（总价知道太多）</p><p>优点：促进低耦合、高内聚、维护封装</p><h4 id="（2）控制器"><a href="#（2）控制器" class="headerlink" title="（2）控制器"></a>（2）控制器</h4><p>处理外部事件（用户和系统时钟发生的外部交互）</p><p>核心思想：解耦</p><p>不要界面直接调用代码，也不要代码直接调用界面，把系统／人／用例作为controller</p><h4 id="（3）创建者模式"><a href="#（3）创建者模式" class="headerlink" title="（3）创建者模式"></a>（3）创建者模式</h4><p>根据潜在创建者类和被示例话类之间的关系决定哪个类创建实例</p><p>当满足以下的条件时，B创建A：B“包含”A，或者B组合A；B直接使用A；B拥有A的初始化数据；B记录A</p><h4 id="（4）纯虚构"><a href="#（4）纯虚构" class="headerlink" title="（4）纯虚构"></a>（4）纯虚构</h4><p>软件特有的ui、DAO、RMI、文件读写、复杂行为、设计模式、复杂数据结构、界面与逻辑层的model，不属于现实世界</p><p>作用：保持代码可复用性，高内聚、低耦合</p></blockquote><h3 id="2-职责分配"><a href="#2-职责分配" class="headerlink" title="2.职责分配"></a>2.职责分配</h3><p>通过职责建立静态模型：面向对象分解中，系统是由很多对象组成的。对象各自完成相应的职责，从而协作完成一个大的职责。类的职责主要有两部分构成：属性职责和方法职责。类与类之间也不是孤立存在的，它们之间存在一定的关系。关系表达了相应职责的划分和组合。它们的强弱顺序为：依赖&lt;关联&lt;聚合&lt;组合&lt;继承。</p><h3 id="3-协作"><a href="#3-协作" class="headerlink" title="3.协作"></a>3.协作</h3><p>根据协作建立动态模型：（1）从小到大，将对象的小职责聚合形成大职责；</p><p>（2）大到小，将大职责分配给各个小对象。通过这两种方法，共同完成对协作的抽象。</p><h3 id="4-控制风格"><a href="#4-控制风格" class="headerlink" title="4.控制风格"></a>4.控制风格</h3><p>为了完成某一个大的职责，需要对职责的分配做很多决策。控制风格决定了决策由谁来做和怎么做决策</p><p>分散式：所有系统行为在对象网络中广泛传播</p><p>集中式：少数控制器记录所有系统行为的逻辑</p><p>委托式（授权式）：决策分布在对象网络中，一些控制器作主要决策</p><h3 id="5-建立设计类图或详细顺序图"><a href="#5-建立设计类图或详细顺序图" class="headerlink" title="5.建立设计类图或详细顺序图"></a>5.建立设计类图或详细顺序图</h3><p>抽象类的职责-&gt;抽象类之间的关系-&gt;添加辅助类</p><p>辅助类：接口类、记录类（数据类）、 启动类、控制器类、实现数据类型的类、容器类</p><h3 id="6-协作的测试"><a href="#6-协作的测试" class="headerlink" title="6.协作的测试"></a>6.协作的测试</h3><p>MockObject</p><h2 id="第13章-详细设计中的模块化与信息隐藏"><a href="#第13章-详细设计中的模块化与信息隐藏" class="headerlink" title="第13章 详细设计中的模块化与信息隐藏"></a>第13章 详细设计中的模块化与信息隐藏</h2><h3 id="1-耦合与内聚（名词解释）"><a href="#1-耦合与内聚（名词解释）" class="headerlink" title="1.耦合与内聚（名词解释）"></a>1.耦合与内聚（名词解释）</h3><h4 id="（1）耦合"><a href="#（1）耦合" class="headerlink" title="（1）耦合"></a>（1）耦合</h4><p>描述的是两个模块之间的关系的复杂程度。</p><p>耦合根据其耦合性由高到低分为几个级别：模块耦合性越高，模块的划分越差，越不利于软件的变更和重用。1、2、3不可接受，4、5可以被接受，6最理想</p><p>（1）内容耦合（一个模块直接修改另一个模块的内容，如GOTO语句；某些语言机制支持直接更改另一个模块的代码；改变另一个模块的内部数据）</p><p>（2）公共耦合（全局变量，模块间共享全局数据，例子：全局变量）</p><p>（3）重复耦合（模块间有重复代码）</p><p>（4）控制耦合（一个模块给另一个模块传递控制信息，如“显式星期天”）</p><p>（5）印记耦合（共享数据结构却只是用了一个部分）</p><p>（6）数据耦合（模块间传参只传需要的数据，最理想）</p><h4 id="（2）内聚"><a href="#（2）内聚" class="headerlink" title="（2）内聚"></a>（2）内聚</h4><p>表达的是一个模块内部的联系的紧密性。</p><p>内聚性由高到低分为：内聚性越高越好，越低越不易实现变更和重用，3、4、5等价，1、2最好，6、7不能接受。</p><p>（1）信息内聚（模块进行许多操作，各自有各自的入口点，每个操作代码相对独立，而且所有操作都在相同的数据结构上进行：如栈）</p><p>（2）功能内聚（只执行一个操作或达到一个目的）</p><p>（3）通信内聚（对相同数据执行不同的操作：查书名、查书作者、查书出版商）</p><p>（4）过程内聚（与步骤有关：守门员传球给后卫、后卫传给中场球员、中场球员传给前锋）</p><p>（5）时间内聚（与时间有关：起床、刷牙、洗脸、吃早餐）</p><p>（6）逻辑内聚（一系列可替换的操作：如坐车、坐飞机）</p><p>（7）偶然内聚（多个不相关的操作：修车、烤面包、遛狗、看电影）</p><blockquote><p>【题型】对实例，说明它们之间的耦合程度与内聚，给出理由。书上P226习题</p></blockquote><h3 id="2-信息隐藏基本思想"><a href="#2-信息隐藏基本思想" class="headerlink" title="2.信息隐藏基本思想"></a>2.信息隐藏基本思想</h3><p>每个模块都隐藏一个重要的设计决策——职责。职责体现为模块对外的一份契约，并且在这份契约之下隐藏的只有这个模块知道的决策或者说秘密，决策实现的细节仅自己知道。</p><p>模块的信息隐藏：模块的秘密（容易变更的地方）：根据需求分配的职责、内部实现机制。</p><blockquote><p>【题型】对实例，说明其信息隐藏程度好坏。教材222页</p><p>【项目实践】耦合的处理？</p><p>分层风格：仅程序调用与简单数据传递</p><p>包设计：消除重复</p><p>分包：接口最小化</p><p>创建者模式：不增加新的耦合</p><p>控制者模式：解除View与Logical的直接耦合</p><p>内聚的处理？</p><p>分层：层间职责分配高内聚，层内分包高内聚</p><p>信息专家模式</p><p>控制器与委托式控制风格</p><p>信息隐藏处理？</p><p>分层与分包：消除职责重复、最小化接口：View独立？数据库连接独立？</p><p>模块信息隐藏：模块需求分配与接口定义</p><p>类信息隐藏：协作设计，接口定义</p><p>变化设计？分层风格、RMI</p></blockquote><h2 id="第14章-详细设计中面向对象方法下的模块化"><a href="#第14章-详细设计中面向对象方法下的模块化" class="headerlink" title="第14章 详细设计中面向对象方法下的模块化"></a>第14章 详细设计中面向对象方法下的模块化</h2><h3 id="模块化的原则，教材229页"><a href="#模块化的原则，教材229页" class="headerlink" title="模块化的原则，教材229页"></a>模块化的原则，教材229页</h3><p>1)全局变量是有害的</p><p>2)显式（代码清晰，不进行不必要的隐藏，但可能与可修改性冲突）</p><p>3)不要有代码重复</p><p>4)针对接口编程</p><p>5)迪米特法则（一个类尽可能少知道另一个类的信息，不要跟陌生人说话）</p><p>6)接口分离原则（ISP）</p><p>7)Liskov替换原则(LSP:子类型可替换掉基类型，一棵满足lSP的继承树耦合度是1)</p><p>8)使用组合代替继承（适用于不符合LSP但想要进行代码复用）</p><p>9)单一职责原则</p><p>其中1、2、3针对降低隐式耦合，4、5、6针对降低访问耦合，7、8针对降低继承耦合，9和信息专家原则用于提高继承内聚，亦可以看作是降低继承耦合之用。</p><p>注1：级联调用的问题在：难以应对变更＋代码难理解。应对的方法：采用委托式调用。</p><p>注2：何时接口分离：出现于有一个负责各种交互的公共接口与各个具体类直接存在使用关系，使得权限混乱，可能造成不必要的麻烦。解决方案：保留大接口并提取出几个小借口，通过具体类使用小接口，再用大接口实现小接口即可。</p><blockquote><p>【题型】对给定的示例，发现其所违反的原则，并进行修正。</p><p>练习题／教材243页习题／教材258页习题</p></blockquote><h2 id="第15章-详细设计中面向对象方法下的信息隐藏"><a href="#第15章-详细设计中面向对象方法下的信息隐藏" class="headerlink" title="第15章 详细设计中面向对象方法下的信息隐藏"></a>第15章 详细设计中面向对象方法下的信息隐藏</h2><h3 id="1-信息隐藏的含义"><a href="#1-信息隐藏的含义" class="headerlink" title="1.信息隐藏的含义"></a>1.信息隐藏的含义</h3><p>需要隐藏的两种常见设计决策</p><p>需求（模块说明的主要秘密）与实现——暴露外部表现，封装内部结构</p><p>实现机制变更（模块说明的次要秘密）——暴露稳定抽象接口，封装具体实现细节</p><p>面向对象机制</p><p>封装：封装类的职责，隐藏职责的实现＋预计将要发生的变更</p><p>抽象类（接口）/继承（实现）：抽象它的接口，并隐藏其内部实现</p><h3 id="2-封装"><a href="#2-封装" class="headerlink" title="2.封装"></a>2.封装</h3><p>（1）含义1：数据与行为集中在一起</p><p>含义2：接口与实现相分离：一个类可以分成两个部分，接口和实现</p><p>接口是类的外部表现，对外公开；实现是类的内部结构，内部隐藏</p><p>（2）封装的初始观点：把数据（内部结构）隐藏在抽象数据类型内</p><p>新观点（信息隐藏）：隐藏任何东西：数据与行为、复杂内部结构、其他对象、子类型信息、潜在变更</p><p>（3）封装数据与行为：除非（直接或间接）为满足需求（类型需要），不要将操作设置为public。类型需要的操作：为了满足用户任务而需要对象在对外协作中公开的方法，例如下图的4个操作（属于后一个对象，为满足计算商品总价的任务）</p><p>除非（直接或间接）为满足需求（类型需要），不要为属性定义getX方法和setX方法，更不要将其定义为public。例如上一示例中的getPrice()</p><p>（4）封装结构：不要暴露内部的复杂数据结构，经验表明复杂数据结构是易于发生修改的。例如暴露了内部使用List数据结构。</p><p>改进：Iterator模式（所有涉及到集合类型的操作都可能会出现此问题）</p><p>（5）封装其他对象：委托而不是提供自己拥有的其他对象的引用</p><p>除非Client对象已经拥有了该其他对象的引用，这时返回其引用不会增加总体设计的复杂度</p><p>可以保证Sales只需要关联SalesList，不需要关联SalesLineItem和Commodity；从整个设计来讲，Sales不需要知道SalesList里面存储的是SalesLineItem的集合，更不需要知道SalesLineItem使用了Commodity类型</p><p>（6）封装子类（LSP：子类必须能够替换他们的基类）</p><p>（7）封装潜在变更：识别应用中可能发生变化的部分，将其与不变的内容分离开来</p><p>封装独立出来的潜在变化部分，这样就可以在不影响不变部分的情况下进行修改或扩展（ DIP 和OCP）</p><h3 id="3-开闭原则OCP"><a href="#3-开闭原则OCP" class="headerlink" title="3.开闭原则OCP"></a>3.开闭原则OCP</h3><p>对扩展开放，对修改封闭</p><p>违反了OCP原则的典型标志：出现了switch或者if-else</p><p>分支让程序增加复杂度，修改时容易产生新错误（特例：创建）</p><h3 id="4-依赖倒置原则DIP"><a href="#4-依赖倒置原则DIP" class="headerlink" title="4.依赖倒置原则DIP"></a>4.依赖倒置原则DIP</h3><p>（与工厂结合紧密，解决new的创建问题）</p><p>I. 高层模块不应依赖底层模块，两者都应依赖抽象</p><p>II. 抽象不应依赖细节，细节应依赖抽象</p><p>使用抽象类（继承）机制倒置依赖</p><blockquote><p>示例：A依赖于B：B不是抽象类，所以A依赖于具体，而不是抽象，如果需要变更B的行为，就会影响到A</p><p>添加抽象类BI，让 B实现（继承）BI：A依赖于BI，B依赖于BI，BI是抽象类，所以是依赖于抽象，BI比较稳定，如果B发生变更，可以通过为BI扩展新的实现（子类型）来满足</p></blockquote><h2 id="跳转链接"><a href="#跳转链接" class="headerlink" title="跳转链接"></a>跳转链接</h2><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-2/">软件工程与计算II重点整理(第1-5章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-3/">软件工程与计算II重点整理(第6-7章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-4/">软件工程与计算II重点整理(第8-11章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-5/">软件工程与计算II重点整理(第16-19章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-6/">软件工程与计算II重点整理(第20-23章)</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>本文转自学长博客，侵删</p><p><a href="https://samperson1997.github.io/2017/12/21/SECII-4/">https://samperson1997.github.io/2017/12/21/SECII-4/</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程与计算Ⅱ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程与计算II重点整理(第8-11章)</title>
      <link href="/2020/07/25/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II%E9%87%8D%E7%82%B9%E6%95%B4%E7%90%86-%E7%AC%AC8-11%E7%AB%A0/"/>
      <url>/2020/07/25/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II%E9%87%8D%E7%82%B9%E6%95%B4%E7%90%86-%E7%AC%AC8-11%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第八章-软件设计基础"><a href="#第八章-软件设计基础" class="headerlink" title="第八章 软件设计基础"></a>第八章 软件设计基础</h2><h3 id="1-软件设计（名词解释）"><a href="#1-软件设计（名词解释）" class="headerlink" title="1.软件设计（名词解释）"></a>1.软件设计（名词解释）</h3><p>a)为使一软件系统满足规定的需求而定义系统或部件的体系结构、部件、接口和其他特征的过程；</p><p>b)设计过程的结果。</p><h3 id="2-软件设计的核心思想"><a href="#2-软件设计的核心思想" class="headerlink" title="2.软件设计的核心思想"></a>2.软件设计的核心思想</h3><p>复杂度控制</p><p>分解、抽象、层次性</p><h2 id="第九、十章-软件体系结构设计与构建"><a href="#第九、十章-软件体系结构设计与构建" class="headerlink" title="第九、十章 软件体系结构设计与构建"></a>第九、十章 软件体系结构设计与构建</h2><h3 id="1-体系结构概念"><a href="#1-体系结构概念" class="headerlink" title="1.体系结构概念"></a>1.体系结构概念</h3><p>部件+连接件+配置</p><p>部件：承载系统主要功能，包括处理与数据</p><p>连接件：定义部件间的交互，是连接的抽象表示</p><p>配置：定义了部件和连接件之间的关联方式，将它们组织称系统的总体结构</p><h3 id="2-体系结构的风格的优缺点"><a href="#2-体系结构的风格的优缺点" class="headerlink" title="2.体系结构的风格的优缺点"></a>2.体系结构的风格的优缺点</h3><p>常见风格模式：</p><h4 id="1）主程序-子程序风格"><a href="#1）主程序-子程序风格" class="headerlink" title="(1）主程序/子程序风格"></a>(1）主程序/子程序风格</h4><p>部件：程序、函数、模块</p><p>连接件：它们之间的调用</p><p>控制从子程序层次结构顶部开始且向下移动</p><p>层次化分解：基于定义使用关系</p><p>单线程控制</p><p>隐含子系统结构：子程序通常合并成模块</p><p>层次化推理：子程序的正确性依赖于它调用的子程序的正确性</p><p>优点：流程清晰，易于理解；强控制性。</p><p>缺点：a.程序调用是一种强耦合的连接方式，非常依赖交互方的接口规格，使得系统难以修改和复用； b.基于程序调用（声明－使用）关系的连接方式限制了各部件之间的数据交互，可能会使得不同部件使用隐含的共享数据交流，产生不必要的公共耦合，进而破坏它的“正确性”控制能力。</p><p>实现：功能分解、集中控制，每个构件一个模块实现，主要是单向依赖。使用utility或tools等基础模块</p><h4 id="2）面向对象式风格"><a href="#2）面向对象式风格" class="headerlink" title="(2）面向对象式风格"></a>(2）面向对象式风格</h4><p>部件: 对象或模块</p><p>连接件: 功能或调用（方法）</p><p>数据表示对于其他对象是隐藏的</p><p>对象负责保持数据表示的完整性（例如一些不变量）</p><p>每个对象都是自主代理</p><p>优点：内部实现的可修改性；易开发、易理解、易复用的结构组织。</p><p>缺点：接口的耦合性；标识的耦合性；副作用（Ex：A和B都修改C）。</p><p>适用于核心问题是识别和保护相关机构信息（数据）的应用</p><p>数据表示和相关操作封装在抽象数据类型，例: 抽象数据类型</p><p>实现：任务分解，（委托式）分散式控制，每个构件一个模块实现，使用接口将双向依赖转换为单向依赖</p><p>将每个构件分割为多个模块，以保证单向依赖，使用utility或tools等基础模块</p><h4 id="3）分层风格"><a href="#3）分层风格" class="headerlink" title="(3）分层风格"></a>(3）分层风格</h4><p>上层调用下层，禁止逆向调用，跨层调用</p><p>部件: 通常是程序或对象的集合</p><p>连接件: 通常是有限可见度下的程序调用或方法调用</p><p>优点：设计机制清晰，易于理解；支持并行开发；更好的可复用性与内部可修改性。</p><p>缺点：交互协议难以修改；性能损失；难以确定层次数量和粒度。</p><p>应用：适用于包含不同类服务的应用，而且这些服务能够分层组织</p><p>尤其当应用可能在某些层改变，例如交互，通信，硬件，平台等</p><p>例子:分层通信协议，每一层在某种程度的抽象上提供了通信的基底，低层定义了低层次的交互最底层是硬件连接（物理层）</p><p>实现：关注点分离（每层逐次抽象），层间接口使用固定协议（固定控制），每层一或多个模块实现，单向依赖，层间数据传递建立专门模块，使用utility或tools等基础模块</p><h4 id="4）MVC风格"><a href="#4）MVC风格" class="headerlink" title="(4）MVC风格"></a>(4）MVC风格</h4><p>模型——视图——控制器</p><p>Model子系统被设计成不依赖任何View或Controller子系统</p><p>它们状态的改变会传播到View子系统</p><p>部件：Model部件负责维护领域知识和通知视图变化；View部件负责给用户显示信息和将用户手势发送给控制器；Controller改变模型的状态、将用户操作映射到模型更新、选择视图进行响应</p><p>连接件: 程序调用，消息，事件</p><p>优点：易开发性；视图和控制的可修改性；适宜于网络系统开发的特征。</p><p>缺点：复杂性；模型修改困难。</p><p>适用于以下应用:在运行时，用户界面的改变很容易且是可能的</p><p>用户界面的调整或移植不会影响该应用功能部分的设计和编码</p><p>例:Web 应用</p><p>实现：特定技术，通常专用于WEB：Model与Controller单向，Controller与View双向，Model与View双向</p><p>典型实现：View：JSP，HTML；Controller：Servlet；Model：JavaBean</p><h3 id="3-体系结构设计的过程"><a href="#3-体系结构设计的过程" class="headerlink" title="3.体系结构设计的过程"></a>3.体系结构设计的过程</h3><p>分析关键需求和限制条件；</p><p>通过选择体系结构风格，确定顶层架构；</p><p>实现功能需求的逻辑映射；</p><p>通过构件的逐层设计从逻辑视角向物理视角的转化；</p><p>添加辅助构件；</p><p>完善构件之间接口的定义；</p><p>完善数据的定义。</p><p>迭代过程3-8</p><blockquote><p>安全与网络分布：方案比较</p><p>方案一：哪个接口更多、更复杂？ 将RMI置于更少、更简单的层间接口</p><p>方案二：哪两层之间更内聚？将RMI置于更不内聚的层间接口</p><p>方案后果：更简洁、更易于修改</p><p>方案一：Mainui只包含登录</p><p>方案二：Mainui包含登录和主界面</p><p>关键区分：是否需要共同的主界面、界面一样</p></blockquote><h3 id="4-包的原则"><a href="#4-包的原则" class="headerlink" title="4.包的原则"></a>4.包的原则</h3><p>最高原则：包与包之间不能有重复和冗余、复用发布等价原则、共同封闭原则、共同复用原则、无环依赖原则、稳定依赖原则、稳定抽象原则</p><h4 id="（1）复用发布等价原则REP"><a href="#（1）复用发布等价原则REP" class="headerlink" title="（1）复用发布等价原则REP"></a>（1）复用发布等价原则REP</h4><p>（不要把很多用例放在一个包）为复用者聚合构件（类），单一的类通常不可复用，几个协作类组成一个包</p><p>一个包中的类应该形成一个可复用和可发布的模块，模块提供一致的功能，减少复用者的工作</p><h4 id="（2）共同封闭原则CCP"><a href="#（2）共同封闭原则CCP" class="headerlink" title="（2）共同封闭原则CCP"></a>（2）共同封闭原则CCP</h4><p>最小化变化给程序员造成的影响</p><p>（不要把一个用例拆成多个包）当一个变化是必要的，如果该变化影响尽可能少的包，则对程序员是有利的，因为需要时间编译和链接以及重新生效</p><p>把具有相似闭包的类聚合在一起，包闭合了预期的变化</p><p>限制对一些包的修改，减少包的发布频率，减少程序员的工作</p><h4 id="（3）共同复用原则CRP"><a href="#（3）共同复用原则CRP" class="headerlink" title="（3）共同复用原则CRP"></a>（3）共同复用原则CRP</h4><p>根据公共复用给类分组，避免给用户带来不必要的依赖</p><p>常常导致细分包，获得更多更小更集中的包，减少复用者的工作</p><p>CCP和CRP原则相互排斥，例如它们不能同时被满足：CRP使得复用者的工作更简单，而CCP使维护者的生活更简单；CCP努力让包尽可能大，而CRP设法让包很小。项目的早期，架构师可能以CCP为主导来辅助开发和维护。架构稳定后，架构师可能重构包结构，为了外部复用者而最大化CRP。</p><h4 id="（4）无环依赖原则ACP"><a href="#（4）无环依赖原则ACP" class="headerlink" title="（4）无环依赖原则ACP"></a>（4）无环依赖原则ACP</h4><p>包的依赖结构应是一个有向无环图</p><p>一块块地稳固和发布项目，以自上而下的层次结构组织包依赖</p><p>解决：分解包／抽象依赖</p><h4 id="（5）稳定依赖原则SDP"><a href="#（5）稳定依赖原则SDP" class="headerlink" title="（5）稳定依赖原则SDP"></a>（5）稳定依赖原则SDP</h4><p>例如：向下接口的依赖是不稳定依赖</p><h4 id="（6）稳定抽象原则SAP"><a href="#（6）稳定抽象原则SAP" class="headerlink" title="（6）稳定抽象原则SAP"></a>（6）稳定抽象原则SAP</h4><p>稳定包应是抽象包，不稳定包应是具体包</p><p>稳定包包含高层设计，抽象它们使得对扩展开发对修改关闭（OCP）。一些灵活性留在稳定的难以改变的包中。</p><p>对象创建：方案一: Spring方案,需要事先明确依赖关系</p><p>在程序启动时,第三方(初始化程序)一次性创建完成对象实例并set给上一层</p><p>Service：View——Logic；DAO: Logic——Data</p><p>方案二: 也适用于非层间的包依赖解除</p><p>构造一个第三方(Factory)负责创建具体对象实例</p><p>上层和下层都依赖于第三方，但第三方可以视作例外（即不影响层间独立关系）</p><h3 id="5-体系结构构件之间接口的定义"><a href="#5-体系结构构件之间接口的定义" class="headerlink" title="5.体系结构构件之间接口的定义"></a>5.体系结构构件之间接口的定义</h3><p>根据分配的需求确定模块对外接口，如逻辑层接口根据界面的需求得到，数据层接口根据逻辑层调用得到</p><p>根据刺激与响应确定接口，依据详细规格明确接口内容（数据、返回值）</p><p>（1）通常情况下，VIEW的required接口可以直接作为相应Logic的Provided</p><p>（2）通常情况下，LOGIC的required接口需要分解为同层模块和不同Data的Provided</p><p>（3）Data一般没有层间依赖，接口通常来自于上一层的相应模块</p><blockquote><p>【示例】saleLogic的其他接口来源 :</p><p>（1）其他被归类为saleLogic模块承担的需求，如退货用例</p><p>（2）同层模块间的依赖</p><p>解除双向依赖：需要被抽象为一个独立接口和独立包，saleLogic再导入上面的包</p><p>独立接口和独立包也属于saleLogic模块最终承担的Provide接口，也需要转化为对Data的Required接口</p><p>在分析其他模块时逐步完善，例如进行礼品赠送时查看特定客户的销售记录、库存分析时查看一定时间段内的销售记录或特定商品的销售记录</p><p>在独立接口和独立包中定义有限制的领域类供外界使用，例如对象限制为查询接口，限制数据种类等等</p></blockquote><h3 id="6-体系结构开发集成测试用例：Stub和Driver"><a href="#6-体系结构开发集成测试用例：Stub和Driver" class="headerlink" title="6.体系结构开发集成测试用例：Stub和Driver"></a>6.体系结构开发集成测试用例：Stub和Driver</h3><p>（1）依据模块接口建立桩程序Stub——为了完成程序的编译和连接而使用的暂时代码，对外模拟和代替承担模块接口的关键类，比真实程序简单的多，使用最为简单的逻辑</p><blockquote><p>【示例】P177 SalesBLService_Stub</p></blockquote><p>（2）编写驱动程序，在桩程序帮助下进行集成测试<br>View的测试比较特殊，其他层都需要增加Driver进行测试<br>可以基于Junit编写Driver；基于接口规格设计测试用例<br>开发View层时：需要logic的stub<br>开发logic层时：需要模仿view的driver，需要data的stub，需要模拟同层调用的driver和stub<br>开发data层时：需要模拟logic的driver</p><p>（3）持续集成：逐步编写各个模块内部程序，替换相应的桩程序<br>真实程序不仅实现业务逻辑，而且会使用其他模块的接口程序（真实程序或者桩程序）<br>开始：客户端: view driver, logic stub, data stub；服务器端: logic driver, data stub<br>进展：客户端: (逐步替换)driver,逐步替换logic stub, data stub；服务器端: logic driver, 逐步替换 data stub<br>最后联调：使用真实的客户端和服务器</p><h2 id="第11章-人机交互设计"><a href="#第11章-人机交互设计" class="headerlink" title="第11章 人机交互设计"></a>第11章 人机交互设计</h2><h3 id="1-可用性（名词解释）"><a href="#1-可用性（名词解释）" class="headerlink" title="1.可用性（名词解释）"></a>1.可用性（名词解释）</h3><p>易用性是人机交互中一个既重要又复杂的概念。它不仅关注人使用系统的过程，同时还关注系统对使用它的人所产生的作用，因为比较复杂，所以易用性不是一个单一的质量维度，而是多维度的质量属性。从易于度量的角度讲，易用性的常用维度包括：易学性、易记性、有效率、低出错率和主观满意度。</p><h3 id="2-界面设计的注意事项及解释（至少5个）"><a href="#2-界面设计的注意事项及解释（至少5个）" class="headerlink" title="2.界面设计的注意事项及解释（至少5个）"></a>2.界面设计的注意事项及解释（至少5个）</h3><p>【题型】例子违反了哪条界面设计原则</p><p>（1）不要暴露内部结构</p><p>例子：该设计明显暴露了软件结构，三个独立软件过程：创建、更新、解除</p><p>（2）展示细节——所见即所得</p><p>（3）常见界面类型：软件系统通常同时使用多种界面类型，以适应差异性的用户和任务。</p><h3 id="3-精神模型，差异性"><a href="#3-精神模型，差异性" class="headerlink" title="3.精神模型，差异性"></a>3.精神模型，差异性</h3><p>（1）精神模型就是用户进行人机交互时头脑中的任务模型</p><p>依据精神模型可以进行隐喻（Metaphor）设计：隐喻又被称为视觉隐喻，是视觉上的图像，但会被用户映射为业务事物。用户在识别图像时，会依据隐喻将控件功能与已知的熟悉事物联系起来，形成任务模型；隐喻本质上是在用户已有知识的基础上建立一组新的知识，实现界面视觉提示和系统功能之间的知觉联系。</p><p>（2）用户希望看到的+希望用户看到的：识别并添加哪些能够帮助用户完成任务的功能，任务的频率也要纳入考虑</p><p>常见错误：加入一些容易加入（例如正好是一个独立的软件过程）的功能，这会扰乱用户的精神模型，影响使用过程的顺利性</p><p>（3）新手用户：关注易学性，进行业务导航，尽量避免出错</p><p>专家用户：关注效率</p><p>熟练用户：在易学性和效率之间进行折中</p><p>好的人机交互应该为不同的用户群体提供差异化的交互机制。</p><p>既为新手用户提供易学性高的人机交互机制（图形界面）</p><p>又为专家用户提供效率高的人机交互机制（命令行、快捷方式、热键）</p><h3 id="4-导航、反馈、协作式设计"><a href="#4-导航、反馈、协作式设计" class="headerlink" title="4.导航、反馈、协作式设计"></a>4.导航、反馈、协作式设计</h3><p>（1）导航</p><p>主动将自己的产品和服务简明扼要地告诉用户，目的是为用户提供一个很好的完成任务的入口，好的导航会让这个入口非常符合人的精神模型。</p><p>全局结构按照任务模型将软件产品的功能组织起来，并区分不同的重要性和主题提供给不同的用户。全局结构常用的导航控件包括窗口、菜单、列表、快捷方式、热键等等。全局结构的设计主要以功能分层和任务交互过程为主要依据。</p><p>局部结构通过安排界面布局细节，制造视觉上的线索来给用户提供导航。局部结构常用的导航控件包括可视化控件布局与组合、按钮设置、文本颜色或字体大小等等。局部结构的设计主要以用户关注的任务细节为主要依据。</p><p>（2）反馈</p><p>让用户能够意识到行为的结果，但不能打断用户工作时的意识流</p><p>用户喜欢较短的响应时间；较长的响应时间（&gt;15秒）具有破坏性；</p><p>用户会根据响应时间的变化调整自己的工作方式；<br>较短的响应时间导致了较短的用户思考时间；较快的节奏可能会提高效率，但也会增加出错率；</p><p>根据任务选择适当的响应时间：打字、光标移动、鼠标定位：50～150毫秒；简单频繁的任务：1秒；普通的任务：2～4秒；复杂的任务：8～12秒</p><p>响应时间适度的变化是可接受的；意外延迟可能具有破坏性；经验测试有助于设置适当的响应时间。</p><p>（3）协作式设计</p><p>A.简洁设计（摘要图片优于文字描述）</p><p>列举、隐藏、赋予（标签、图标等线索暗示）</p><p>B.一致性设计（确认与删除键相对位置不一致）</p><p>C.低出错率设计（用具体的指导来提示用户出错）</p><p>限制输入：列表、可选框等选择性组件代替输入框；按钮代替命令行；限定输入：类型，范围，格式…</p><p>限制范围：简单化单步操作</p><p>辅助：事前提示；事后检查；随时可以撤销</p><p>D.易记性设计</p><p>减少短期记忆负担；使用逐层递进的方式展示信息；使用直观的快捷方式。重新认知比记忆更容易；设置有意义的缺省值，可以帮助用户减少记忆负担。</p><h2 id="跳转链接"><a href="#跳转链接" class="headerlink" title="跳转链接"></a>跳转链接</h2><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-2/">软件工程与计算II重点整理(第1-5章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-3/">软件工程与计算II重点整理(第6-7章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-4/">软件工程与计算II重点整理(第12-15章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-5/">软件工程与计算II重点整理(第16-19章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-6/">软件工程与计算II重点整理(第20-23章)</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>本文转自学长博客，侵删</p><p><a href="https://samperson1997.github.io/2017/12/21/SECII-3/">https://samperson1997.github.io/2017/12/21/SECII-3/</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程与计算Ⅱ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程与计算II重点整理(第6-7章)</title>
      <link href="/2020/07/25/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II%E9%87%8D%E7%82%B9%E6%95%B4%E7%90%86-%E7%AC%AC6-7%E7%AB%A0/"/>
      <url>/2020/07/25/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II%E9%87%8D%E7%82%B9%E6%95%B4%E7%90%86-%E7%AC%AC6-7%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第六章-需求分析方法"><a href="#第六章-需求分析方法" class="headerlink" title="第六章 需求分析方法"></a>第六章 需求分析方法</h2><h3 id="1-建立用例图"><a href="#1-建立用例图" class="headerlink" title="1.建立用例图"></a>1.建立用例图</h3><p>参与者是与开发的系统进行交互的用户或其他系统等角色</p><p>用例图中一个单一的参与者可以代表多个用户（或系统）</p><p>一个单一的用户（或系统）可能扮演多种角色</p><p>参与者不一定是人，例如，需要从当前系统获取信息的外部系统也是参与者</p><p>步骤：1）目标分析与解决方向确定 2）寻找参与者 3）寻找用例 4）细化用例</p><blockquote><p>【示例1】</p><p>×××连锁商店是一家刚刚发展起来的小型连锁商店，其前身是一家独立的小百货门面店。</p><p>首先是随着商店规模的扩大，顾客量大幅增长，手工作业销售迟缓，顾客购物排队现象严重，导致流失客源。其次是商店的商品品种增多，无法准确掌握库存，商品积压、缺货和报废的现象上升明显。再次是商店面临的竞争比以前更大，希望在降低成本，吸引顾客，增强竞争力的同时，保持盈利水平。</p><p>BR1：在系统使用6个月后，商品积压、缺货和报废的现象要减少50%</p><p>BR2：在系统使用3个月后，销售人员工作效率提高50%</p><p>BR3：在系统使用6个月后，运营成本要降低15%</p><p>范围：人力成本和库存成本，度量：检查平均员工数量和平均每10,000元销售额的库存成本</p><p>BR4：在系统使用6个月后，销售额度要提高20%，最好情况：40%，最可能情况：20%，最坏情况：10%</p><p>SF1：分析商品库存，发现可能的商品积压、缺货和报废现象</p><p>SF2：根据市场变化调整销售的商品</p><p>SF3：制定促销手段，处理积压商品</p><p>SF4：与生产厂家联合进行商品促销</p><p>SF5：制定促销手段进行销售竞争</p><p>SF6：掌握员工变动和授权情况</p><p>SF7：处理商品入库与出库</p><p>SF8：发展会员，提高顾客回头率</p><p>SF9：允许积分兑换商品和赠送吸引会员的礼品，提高会员满意度</p><p>SF10：帮助收银员处理销售与退货任务</p><p>从上述特性可以发现涉及的用户类别：总经理，客户经理，收银员，管理员</p><p>总经理的目标有：产品调整（增删改产品信息），特价策略制定（增删改特价策略），赠送策略制定（增删改赠送策略），库存分析；（分析可能的商品积压）</p><p>客户经理的目标有：会员管理；（会员发展、礼品赠送），库存管理；（商品入库、出库和库存分析）</p><p>收银员的目标有：销售处理（销售），退货；（退货）</p><p>管理员的目标有：用户管理（增删改用户信息）</p></blockquote><p>如果用例的粒度不合适就需要进行细化和调整。判断标准是：用例描述了为应对一个业务事件，由一个用户发起，并在一个连续时间段内完成，可以增加业务价值的任务。<br>不要将没有业务价值（而是技术实现需要）的事件作为用例（例如，登录（安全性需求）、输入/输入数据检查（数据需求或者业务规则）、连接数据库、网络传输等等）<br>不要将没有独立业务价值的单个操作（仅仅是技术实现上独立）作为用例，例如删除、增加、修改、保存</p><blockquote><p>总经理的目标有：特价策略制定、赠送策略制定两个用例的业务目的、发起源和过程基本相同，仅仅是业务数据不同，所以可以合并为一个用例销售策略制定。</p><p>客户经理的目标有：会员管理用例有两个明显不同的业务事件，可以被细化为发展会员和礼品赠送2个更细粒度的用例。</p><p>客户经理的库存管理用例也有三个不同的业务目标：出库、入库和库存分析，所以也应该细化为三个用例商品出库、商品入库和库存分析，其中库存分析用例与总经理的库存分析用例相同。</p></blockquote><p>【常见错误】</p><p>不要将用例细化为单个操作</p><p>不要将单个步骤细化为用例</p><p>不要将片面的一个方面细化为用例</p><p>不要将“登录”、“数据验证”、“连接数据库”等没有业务价值的内容作为用例</p><blockquote><p>【示例2】</p><p>网上书店系统（OBS）是一个基于web的应用程序，允许用户浏览和购买网上产品。该应用程序支持网上购物车的概念，类似于其他网上零售商，如Amazon.com,。该系统的结账功能将集成信用卡交易处理以及内部计费系统。该系统还提供管理员视图，允许授权的员工查看和管理产品、用户和订单。</p><p>用户：购买、浏览</p><p>员工：查看用户、订单、产品管理</p><p>管理员：授权</p><p>信用卡：结账</p><p>内部计费：结账</p><p>注意：内部计费指的是单位内部，而不是系统内部</p></blockquote><h3 id="2-建立分析类图（概念类图／领域模型）"><a href="#2-建立分析类图（概念类图／领域模型）" class="headerlink" title="2.建立分析类图（概念类图／领域模型）"></a>2.建立分析类图（概念类图／领域模型）</h3><p>注意：与设计类图有所不同，分析类图关注现实世界问题域，而不是软件系统的内部构造机制；<br>类型、方法、可见性等复杂的软件构造细节不会在概念类图中，不允许出现与现实无关的内容</p><p>对象：标识（对象自治、对象请求协作）、状态（存储数据，如密码、名称……）、行为（利用数据做什么）</p><p>链接：对象间交互的路径（a拥有b的引用——a拥有b的可见性——a可以导航到b）</p><p>类：对象的集合</p><p>关联：潜在的链接抽象</p><p>要写出分析的步骤：</p><p>1）识别候选类（名词分析法）</p><p>2）确定概念类 （看是否满足既有状态又有行为）<br>既需要维持一定的状态，又需要依据状态表现一定的行为——确定为一个概念类</p><p>如只需要维护状态，不需要表现行为——其他概念类的属性</p><p>不需要维护状态，却需要表现行为——首先重新审视需求是否有遗漏，因为没有状态支持的对象无法表现行为；如果确定没有需求的遗漏，就需要剔除该候选类，并将行为转交给具备状态支持能力的其他概念类</p><p>既不需要维护状态，又不需要表现行为——应该被完全剔除</p><p>3）识别关联（文本中提取出“名词＋动词＋名词”的结构）</p><p>第一标准是满足需求的要求，第二标准是现实状况</p><p>4）识别重要属性</p><p>概念类图只需要用到四种关系线：</p><p>聚合关系不必可以使用，但是组合关系要适当的使用</p><p>继承关系、组合关系、聚合关系、普通关联</p><blockquote><p>【示例1】</p><p>1、如果是会员，收银员输入客户编号（属性、无行为）</p><p>2、系统显示会员信息（就是会员），包括姓名（属性、无行为）与积分（属性、无行为）</p><p>3、收银员输入商品标识（商品属性、无行为）</p><p>4、系统记录并显示商品信息（有状态、有行为），商品信息包括商品标识、描述、数量、价格、特价（如果有商品特价策略的话）和本项商品总价（商品属性）</p><p>5、系统显示已购入的商品清单（有状态、有行为），商品清单包括商品标识、描述、数量、价格、特价、各项商品总价和所有品总价（商品属性）</p><p>收银员重复3-5步，直到完成所有商品的输入</p><p>6、收银员结束输入，系统计算并显示总价（存储在账单中，有行为），计算根据总额特价策略（有状态、有行为）进行</p><p>7、系统根据商品赠送策略和总额赠送策略计算并显示赠品清单（要），赠品清单包括各项赠品的标识、描述与数量（不要）</p><p>8、收银员请顾客（就是会员）支付账单（有状态、有行为）</p><p>9、顾客支付，收银员输入收取的现金数额（有属性、无行为、不要）</p><p>10、系统给出应找的余额（有属性、无行为、不要），收银员找零</p><p>11、收银员结束销售，系统记录销售信息（有状态、有行为）、商品清单、赠品清单和账单信息，并更新库存（有状态、有行为）</p><p>12、系统打印收据（根据需求，如果是一次性就无状态无行为，如果是丢了还可以打印就有状态有行为）</p><p>注意：一切看需求。</p><p>（1）若商品ID必须符合标准，则ID有状态、有行为</p><p>（2）若商品数量单位不同，则单位换算的职责交给数量，有状态、有行为</p><p>（3）若商品价格按照国际汇率有不同定位，则价格有状态、有行为</p><p>【示例2】</p><p>ATM系统通过显示屏，输入键盘（有数字和特殊输入按键），银行卡读卡器，存款插槽，收据打印机等与用户交互。客户使用ATM机存款，取款，余额查询，对账户的更新交由账户系统的一个接口来处理。安全系统将为每个客户分配一个PIN码和安全级别。每次事物执行之前都需要验证PIN码。将来，银行计划使用ATM机支持一些常规操作，例如使用地址和电话号码修改。</p><p>分析：显示器、按键、读卡器、存款插槽、收据打印机 不属于现实世界</p><p>客户：属性：PIN、地址、电话号码、安全级别</p><p>账户：余额</p><p>交易</p><p>【示例3】</p><ol><li><p>顾客向系统提起查询请求</p></li><li><p>系统根据请求为顾客提供一个CD的推荐列表</p></li><li><p>顾客在推荐列表中选定一个CD，然后要求查看更详细的信息</p></li><li><p>系统为顾客提供选定CD的详细信息</p></li><li><p>顾客购买选定CD.</p></li><li><p>顾客离开</p><p>分析：</p><p>查询请求：有状态、有行为</p><p>顾客和CD：看戏球，不确定是否存储详细信息</p><p>推荐列表：有状态、有行为（增删改）</p></li></ol></blockquote><h3 id="3-建立系统顺序图（交互图）"><a href="#3-建立系统顺序图（交互图）" class="headerlink" title="3.建立系统顺序图（交互图）"></a>3.建立系统顺序图（交互图）</h3><p>步骤：1）确定上下文环境 2）根据用例描述找到交互对象 3）按照用例描述中的流程顺序逐步添加消息</p><p>同步消息、异步消息、返回消息</p><p>注意：</p><p>（1）异步消息的箭头无论是从用户到系统还是从系统到用户都是一样的</p><p>（2）opt标签表示可选；loop标签表示循环，要在旁边用［］内写循环条件；alt标签表示候选（基本上只会放一次返回消息），每一种可选分支之间要用虚线分割，而且在表示执行态的圆柱上面要写监护条件，放在［］里面。</p><h3 id="4-建立状态图"><a href="#4-建立状态图" class="headerlink" title="4.建立状态图"></a>4.建立状态图</h3><p>状态: 一组观察到的情况，在一个给定的时间描述系统行为</p><p>状态转换: 从一个状态到另一个状态的转移</p><p>事件: 导致系统表现出可预测行为的事件</p><p>活动: 作为产生转换的结果而发生的过程</p><p>步骤：1）确定上下文环境 2）识别状态 3）建立状态转换 4）补充详细信息，完善状态图</p><p>注意：并不是所有的状态图都有开始态和结束态，开始态通常只有一个，结束态可以有多个</p><blockquote><p>【示例】明确状态图的主体：用例UC1销售处理。</p><p>空闲状态（开始状态）：收银员已经登录和获得授权，但并没有请求开始销售工作的状态；</p><p>销售开始状态：开始一个新销售事务，系统开始执行一个销售任务的状态；</p><p>会员信息显示状态：输入了客户编号，系统显示该会员信息的状态；</p><p>商品信息显示状态：刚刚输入了一个物品项，显示该物品（和赠品）描述信息的状态；</p><p>列表显示状态：以列表方式显示所有已输入物品项（和赠品）信息的状态；</p><p>错误提示状态：输入信息错误的状态；<br>账单处理状态：输入结束，系统显示账单信息，收银员进行结帐处理的状态。</p><p>销售结束状态：更新信息，打印收据的状态。</p></blockquote><h2 id="第七章-需求文档化与验证"><a href="#第七章-需求文档化与验证" class="headerlink" title="第七章 需求文档化与验证"></a>第七章 需求文档化与验证</h2><h3 id="1-为什么建立需求规格说明？结合试验说明"><a href="#1-为什么建立需求规格说明？结合试验说明" class="headerlink" title="1.为什么建立需求规格说明？结合试验说明"></a>1.为什么建立需求规格说明？结合试验说明</h3><p>（1）软件开发过程中，子任务与人员之间存在错综复杂的关系，存在大量的沟通和交流，所以要编写软件开发中要编写不同类型的文档，每种文档都是针对项目中需要广泛交流的内容。因为软件需求需要进行广泛交流，所以要把需求文档化。</p><p>（2）需求规格说明是在软件产品的角度以系统级需求列表的方式描述软件系统解决方案<br>用例侧重于交互流程，规格（解决方案）侧重于独立需求<br>用例以一次交互为基础，规格需求以一次交互中的软件系统处理细节为基础</p><h3 id="2-对给定的需求规格说明示例，判定并修正其错误。"><a href="#2-对给定的需求规格说明示例，判定并修正其错误。" class="headerlink" title="2.对给定的需求规格说明示例，判定并修正其错误。"></a>2.对给定的需求规格说明示例，判定并修正其错误。</h3><p>首先了解需求文档化要点：</p><p>1）技术文档写作要点（简洁，精确，易读，易修改）；</p><p>2）需求书写要点（使用用户术语，可验证，可行性）；</p><p>3）需求规格说明文档书写要点（充分利用标准的文档模板，保持所以内容位置得当；保持文档内的需求集具有完备性和一致性；为需求划分优先级）</p><blockquote><p>【错误示例】</p><p>付款过程完成后，相关信息应被添加到日志文件</p><p>该系统应被构造成将来很容易添加新功能<br>计算购买的汽油的价格：该类汽油每加仑的价格乘以购买的加仑数（使用两位小数点表示加仑小数部分）</p><p>该系统一周7天，一天24小时都可用</p></blockquote><h3 id="3-给定的需求示例，设计功能测试用例"><a href="#3-给定的需求示例，设计功能测试用例" class="headerlink" title="3.给定的需求示例，设计功能测试用例"></a>3.给定的需求示例，设计功能测试用例</h3><p>结合测试方法</p><h2 id="跳转链接"><a href="#跳转链接" class="headerlink" title="跳转链接"></a>跳转链接</h2><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-2/">软件工程与计算II重点整理(第1-5章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-3/">软件工程与计算II重点整理(第8-11章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-4/">软件工程与计算II重点整理(第12-15章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-5/">软件工程与计算II重点整理(第16-19章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-6/">软件工程与计算II重点整理(第20-23章)</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>本文转自学长博客，侵删</p><p><a href="https://samperson1997.github.io/2017/12/21/SECII-2/">https://samperson1997.github.io/2017/12/21/SECII-2/</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程与计算Ⅱ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程与计算II重点整理(第1-5章)</title>
      <link href="/2020/07/25/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II%E9%87%8D%E7%82%B9%E6%95%B4%E7%90%86-%E7%AC%AC1-5%E7%AB%A0/"/>
      <url>/2020/07/25/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II%E9%87%8D%E7%82%B9%E6%95%B4%E7%90%86-%E7%AC%AC1-5%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一、二章-软件工程概论"><a href="#第一、二章-软件工程概论" class="headerlink" title="第一、二章 软件工程概论"></a>第一、二章 软件工程概论</h2><h3 id="1-软件工程（名词解释）"><a href="#1-软件工程（名词解释）" class="headerlink" title="1.软件工程（名词解释）"></a>1.软件工程（名词解释）</h3><p>(1)应用系统的、规范的、可量化的方法，来开发、运行和维护软件，即将工程应用到软件。</p><p>(2)对(1)中各种方法的研究。</p><h3 id="2-从1950s—2000s之间的特点（简答）"><a href="#2-从1950s—2000s之间的特点（简答）" class="headerlink" title="2.从1950s—2000s之间的特点（简答）"></a>2.从1950s—2000s之间的特点（简答）</h3><ul><li><p>1950s：科学计算；以机器为中心进行编程；像生产硬件一样生产软件。</p></li><li><p>1960s：业务应用（批量数据处理和事物计算）；软件不同于硬件；用软件工艺的方式生产软件。</p></li><li><p>1970s：结构化方法；瀑布模型；强调规则和纪律。它们奠定了软件工程的基础，是后续年代软件工程发展的支撑。</p></li><li><p>1980s：追求生产力最大化；现代结构化方法/面向对象编程广泛应用；重视过程的作用。</p></li><li><p>1990s：企业为中心的大规模软件系统开发；追求快速开发、可变更性和用户价值；web应用出现</p></li><li><p>2000s：大规模web应用；大量面向大众的web产品；追求快速开发、可变更性、用户价值和创新。</p></li></ul><h2 id="第三、四章-项目启动"><a href="#第三、四章-项目启动" class="headerlink" title="第三、四章 项目启动"></a>第三、四章 项目启动</h2><h3 id="1-团队结构：主程序员团队；民主团队；开放团队"><a href="#1-团队结构：主程序员团队；民主团队；开放团队" class="headerlink" title="1.团队结构：主程序员团队；民主团队；开放团队"></a>1.团队结构：主程序员团队；民主团队；开放团队</h3><p>如何管理团队：建立团队章程；持续成功；和谐沟通；避免团队杀手</p><h3 id="2-质量保障有哪些措施？结合实验进行说明"><a href="#2-质量保障有哪些措施？结合实验进行说明" class="headerlink" title="2.质量保障有哪些措施？结合实验进行说明"></a>2.质量保障有哪些措施？结合实验进行说明</h3><p>(1)需求开发——需求评审和需求度量；</p><p>(2)体系结构——体系结构评审和集成测试(持续集成)；</p><p>(3)详细设计——详细设计评审、设计度量和集成测试(持续集成)；</p><p>(4)构造阶段——代码评审、代码度量、测试（测试驱动和持续集成）；</p><p>(5)测试阶段——测试、测试度量。</p><blockquote><p>要及时的根据保障计划进行质量验证，质量验证的方法主要有评审、测试和质量度量三种。</p></blockquote><h3 id="3-配置管理有哪些活动？实验中是如何进行配置管理的"><a href="#3-配置管理有哪些活动？实验中是如何进行配置管理的" class="headerlink" title="3.配置管理有哪些活动？实验中是如何进行配置管理的"></a>3.配置管理有哪些活动？实验中是如何进行配置管理的</h3><p>（1）标识配置项版本管理 </p><p>（2）变更控制 </p><p>（3）配置审计 </p><p>（4）状态报告 </p><p>（5）软件发布管理</p><blockquote><p>在项目实践中，使用配置管理工具对项目进行配置管理，如SVN。</p></blockquote><h2 id="第五章-软件需求基础"><a href="#第五章-软件需求基础" class="headerlink" title="第五章 软件需求基础"></a>第五章 软件需求基础</h2><h3 id="1-需求（名词解释）"><a href="#1-需求（名词解释）" class="headerlink" title="1.需求（名词解释）"></a>1.需求（名词解释）</h3><p>(1)用户为了解决问题或达到某些目标所需要的条件或能力；</p><p>(2)系统或系统部件为了满足合同、标准、规范或其他正式文档所规定的要求而需要具备的条件或能力；</p><p>(3)对(1)或(2)中的一个条件或一种能力的一种文档化表述。</p><h3 id="2-区分需求的三个层次：业务需求，用户需求，系统级需求"><a href="#2-区分需求的三个层次：业务需求，用户需求，系统级需求" class="headerlink" title="2.区分需求的三个层次：业务需求，用户需求，系统级需求"></a>2.区分需求的三个层次：业务需求，用户需求，系统级需求</h3><p>【题型】给出一个实例，给出三个层次的例子；对给定的需求示例，判断其层次</p><p>【业务需求】——来自现实：系统建立的战略出发点，表现为高层次的目标（Objective），它描述了组织为什么要开发系统 ，为了满足用户的业务需求，需求工程师需要描述系统高层次的解决方案，定义系统应该具备的特性（Feature）</p><p>【用户需求】——来自现实：执行实际工作的用户对系统所能完成的具体任务的期望，描述了系统能够帮助用户做些什么。对所有的用户需求，都应该有充分的问题域知识作为背景支持<br>特性：模糊、不清晰 ；多特性混杂 ；多逻辑混杂</p><p>【系统级需求】——来自软件：用户对系统行为的期望，每个系统级需求反映了一次外界与系统的交互行为，或者系统的一个实现细节。描述了开发人员需要实现什么<br>将用户需求转化为系统需求的过程是一个复杂的过程：首先需要分析问题领域及其特性，从中发现问题域和计算机系统的共享知识，建立系统的知识模型；然后将用户需求部署到系统模型当中，即定义系列的系统行为，让它们联合起来实现用户需求，每一个系统行为即为一个系统需求。该过程就是需求工程当中最为重要的需求分析活动，又称建模与分析活动。</p><blockquote><p>【示例】</p><p>R1：在系统使用3个月后，销售额度应该提高20%（业务需求－为何开发系统）</p><p>R2：系统要帮助收银员完成销售处理；（用户需求－帮助用户做什么）</p><p>系统特性SF1：管理VIP顾客信息，针对每一个系统特性，都可以建立一组用户需求。例如对SF1，每一条都是用户完成具体任务所需要的功能：</p><p>UR1.1：客户经理可以使用系统添加、修改或者删除会员个人信息。（用户需求）</p><p>UR1.2：收银员使用系统进行销售时会记录会员的购买信息。 （用户需求）</p><p>UR1.3：客户经理可以使用系统查看会员的个人信息和购买信息。（用户需求）</p><p>UR1.4：客户经理可以使用系统查看所有会员的统计信息。 （用户需求）</p><p>R3：收银员输入购买的商品时，系统要显示该商品的描述、单价、数量和总价（系统级需求－系统怎么与外界交互）</p><p>对用户需求UR1.3，可以依据任务中的交互细节将之转化为系统级需求SR1.3.1～SR1.3.4。</p><p>SR1.3.1在接到客户经理的请求后，系统应该为客户经理提供所有会员的个人信息。（系统级需求）</p><p>SR1.3.2在客户经理输入会员的客户编号时，系统要提供该会员的个人信息。（系统级需求）</p><p>SR1.3.3在客户经理选定一个会员并申请查看购买信息时，系统要提供该会员的历史购买记录。</p><p>SR1.3.4经理可以通过键盘输入客户编号，也可以通过读卡器输入客户编号。（系统级需求）</p><p>ATM机：问题：营业厅人力成本过高，不吸引客户（业务需求）<br>问题域：存钱、取钱、转账（用户需求）</p></blockquote><h3 id="3-掌握需求的类型"><a href="#3-掌握需求的类型" class="headerlink" title="3.掌握需求的类型"></a>3.掌握需求的类型</h3><p>【题型】对给定实例，给出不同类型的需求例子；对给定的需求示例，判定需求类型</p><p>【需求】项目需求、过程需求、系统需求（软件需求、硬件需求、其他需求）、不切实际的期望</p><blockquote><p>（1）项目需求（人的数量，计划书成本、时间）</p><p>R5：项目的成本要控制在60万元人民币以下。</p><p>R6：项目要在6个月内完成。</p><p>（2）过程需求（人的分工、合作、方法、工具）</p><p>R7：在开发中，开发者要提交软件需求规格说明文档、设计描述文档和测试报告。</p><p>R8：项目要使用持续集成方法进行开发。</p><p>（3）其他需求</p><p>R9：系统要购买专用服务器，其规格不低于……</p><p>R10：系统投入使用时，需要对用户进行1个星期的集中培训。</p><p>（4）不切实际的期望</p><p>R11：系统要分析会员的购买记录，预测该会员将来一周和一个月内会购买的商品；（技术上不可行）</p><p>R12：系统要能够对每月的出入库以及销售行为进行标准的财务分析；（在有限的资源条件下不可行）</p><p>R13：在使用系统时，收银员必须要在2个小时内完成一个销售处理的所有操作。（超出了软件所能影响的问题域范围）</p><p>R14：如果一个销售处理任务在2个小时内没有完成，系统要撤销该任务的所有已执行操作（正确）</p></blockquote><p>【软件需求分类】功能需求、性能需求、质量属性、对外接口、约束、数据需求</p><p>（1）功能需求：和系统主要工作相关的需求，即在不考虑物理约束的情况下，用户希望系统所能够执行的活动，这些活动可以帮助用户完成任务。功能需求主要表现为系统和环境之间的行为交互。</p><p>最常见、最主要和最重要的需求；能够为用户带来业务价值的系统行为；最需要按照三个抽象层次进行展开；软件产品产生价值的基础</p><p>（2）性能需求：系统整体或系统组成部分应该拥有的性能特征，例如CPU使用率、内存使用率等。<br>需要进行专门模拟和测试</p><blockquote><p>速度，系统完成任务的时间，例如PR1。PR1：所有的用户查询都必须在10秒内完成。</p><p>容量，系统所能存储的数据量，例如PR2。PR2：系统应该能够存储至少100万个销售信息。</p><p>吞吐量，系统在连续的时间内完成的事务数量，例如PR3。PR3：解释器每分钟应该至少解析5000条没有错误的语句。</p><p>负载，系统可以承载的并发工作量，例如PR4。PR4：系统应该允许50个营业服务器同时从集中服务器上进行数据的上传或下载。</p><p>实时性，严格的实时要求，例如PR5。PR5：监测到病人异常后，监控器必须在0.5秒内发出警报。</p><p>PR6：98％的查询不能超过10秒。</p><p>PR7：（最低标准）在200个用户并发时，系统不能崩溃；<br>（一般标准）在200个用户并发时，系统应该在80％的时间内能正常工作；<br>（理想标准）在200个用户并发时，系统应该能保持正常的工作状态。</p></blockquote><p>（3）质量属性：系统完成工作的质量，即系统需要在一个“好的程度”上实现功能需求，</p><blockquote><p>可靠性：在规格时间间隔内和规定条件下，系统或部件执行所要求能力的能力。</p><p>QA1：在进行数据的下载和上传中，如果网络故障，系统不能出现故障。</p><p>可用性：软件系统在投入使用时可操作和可访问的程度或能实现其指定系统功能的概率。</p><p>QA2：系统的可用性要达到98%。</p><p>安全性：软件阻止对其程序和数据进行未授权访问的能力，未授权的访问可能是有意，也可能是无意的。</p><p>QA3：VIP顾客只能查看自己的个人信息和购买记录；收银员只能查看，不能修改、删除VIP顾客的信息。</p><p>可维护性：软件系统或部件能修改以排除故障、改进性能或其他属性或适应变更了的环境的容易程度，包括可修改性和可扩展性。</p><p>QA4：如果系统要增加新的特价类型，要能够在2个人月内完成。</p><p>可移植性：系统或部件能从一种硬件或软件环境转换至另外一种环境的特性。</p><p>QA5：集中服务器要能够在1人月内从Window 7操作系统更换到Solaris 10操作系统。</p><p>易用性：与用户使用软件所花费的努力及其对使用的评价相关的特性。</p><p>QA6：使用系统1个月的收银员进行销售处理的效率要达到10件商品/分钟。</p></blockquote><p>（4）对外接口：系统和环境中其他系统之间需要建立的接口，包括硬件接口、软件接口、数据库接口等</p><p>解系统和其他系统之间的软硬件接口</p><p>接口的用途，接口的输入输出，数据格式，命令格式，异常处理要求；用户界面</p><p>（5）约束：进行系统构造时需要遵守的约束，例如编程语言、硬件设施等，总体上限制了开发人员设计和构建系统时的选择范围</p><blockquote><p>系统开发及运行的环境，包括目标机器、操作系统、网络环境、编程语言、数据库管理系统等</p><p>C1：系统要使用Java语言进行开发。</p><p>问题域内的相关标准，包括法律法规、行业协定、企业规章等。</p><p>商业规则，用户在任务执行中的一些潜在规则也会限制开发人员设计和构建系统的选择范围</p><p>R1：已过保质期的食品不能销售</p><p>R2：顾客可以使用美元付款</p></blockquote><p>（6）数据需求：<br>功能需求的补充，如果在功能需求部分明确定义了相关的数据结构，那么就不需要再行定义数据需求</p><p>数据需求是需要在数据库、文件或者其他介质中存储的数据描述，通常包括下列内容：</p><p>各个功能使用的数据信息；</p><ul><li><p>使用频率；</p></li><li><p>可访问性要求；</p></li><li><p>数据实体及其关系；</p></li><li><p>完整性约束；</p></li><li><p>数据保持要求。</p></li></ul><blockquote><p>例如，连锁超市销售系统可以使用数据需求DR1和DR2。</p><p>DR1：系统需要存储的数据实体及其关系为图6-14的内容。</p><p>DR2：系统需要存储1年内的销售记录和退货记录。</p></blockquote><h2 id="跳转链接"><a href="#跳转链接" class="headerlink" title="跳转链接"></a>跳转链接</h2><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-2/">软件工程与计算II重点整理(第6-7章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-3/">软件工程与计算II重点整理(第8-11章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-4/">软件工程与计算II重点整理(第12-15章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-5/">软件工程与计算II重点整理(第16-19章)</a></p><p>👉<a href="https://samperson1997.github.io/2017/12/21/SECII-6/">软件工程与计算II重点整理(第20-23章)</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>本文转自学长博客，侵删</p><p><a href="https://samperson1997.github.io/2017/12/20/SECII-1/">https://samperson1997.github.io/2017/12/20/SECII-1/</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程与计算Ⅱ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在html文件中引用Vue以及ElementUI</title>
      <link href="/2020/07/04/%E5%9C%A8html%E6%96%87%E4%BB%B6%E4%B8%AD%E5%BC%95%E7%94%A8Vue%E4%BB%A5%E5%8F%8AElementUI/"/>
      <url>/2020/07/04/%E5%9C%A8html%E6%96%87%E4%BB%B6%E4%B8%AD%E5%BC%95%E7%94%A8Vue%E4%BB%A5%E5%8F%8AElementUI/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个比较简单，就是引用两个js文件和一个css样式库即可，然后再scrpit做改动，直接把代码放在下面吧，这是一个mathjax转texCommand到html代码的html文件。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;x-ua-compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>LaTeX math convert by MathJax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://polyfill.io/v3/polyfill.min.js?features=es6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;MathJax-script&quot;</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://polyfill.io/v3/polyfill.min.js?features=es6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">MathJax = &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">tex</span>: &#123; <span class="attr">inlineMath</span>: [[<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;$&#x27;</span>], [<span class="string">&#x27;\\(&#x27;</span>, <span class="string">&#x27;\\)&#x27;</span>]] &#125;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">max-width</span>: <span class="number">40em</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.input</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">border</span>: <span class="number">1px</span> solid grey;</span></span><br><span class="line"><span class="css"><span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> .<span class="number">25em</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">font-size</span>: <span class="number">120%</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-id">#output</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">font-size</span>: <span class="number">120%</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">margin-top</span>: .<span class="number">75em</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">border</span>: <span class="number">1px</span> solid grey;</span></span><br><span class="line"><span class="css"><span class="attribute">padding</span>: .<span class="number">25em</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">min-height</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-id">#output</span>&gt;pre &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">margin-left</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;this.convert()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>MathJax v3: TeX to HTML<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &lt;textarea id=&quot;input&quot; rows=&quot;15&quot; cols=&quot;10&quot;&gt;</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% 请输入您想要的公式</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">\LaTeX</span></span><br><span class="line"><span class="comment">&lt;/textarea&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">:rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">:columns</span>=<span class="string">&quot;10&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入数学公式&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;textArea&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">clearable</span> @<span class="attr">input</span>=<span class="string">&quot;convert()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;input type=&quot;checkbox&quot; id=&quot;display&quot; checked onchange=&quot;convert()&quot;&gt; &lt;label for=&quot;display&quot;&gt;Display style&lt;/label&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>显示公式样式<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;input type=&quot;button&quot; value=&quot;Render TeX&quot; id=&quot;render&quot; onclick=&quot;convert()&quot; /&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;copy()&quot;</span>&gt;</span>复制$\LaTeX$公式<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;convert()&quot;</span>&gt;</span>强制转换<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> <span class="attr">clear</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;div id=&quot;output&quot; v-if=&quot;this.textArea === &#x27;%请输入数学公式(本句为注释)\n&#x27;&quot; style=&quot;opacity: 0.5;zoom: 2;&quot;&gt;$$\LaTeX$$&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;output&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">textArea</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">checked</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">convert</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//  Get the TeX input</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// var input = document.getElementById(&quot;input&quot;).value.trim();</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> input = <span class="built_in">this</span>.textArea;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (<span class="built_in">this</span>.textArea === <span class="string">&#x27;&#x27;</span>)&#123;</span></span><br><span class="line"><span class="javascript">input = <span class="string">&#x27;\\LaTeX&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//  Clear the old output</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="javascript">output = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;output&#x27;</span>);</span></span><br><span class="line"><span class="javascript">output.innerHTML = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//  Reset the tex labels (and automatic equation numbers, though there aren&#x27;t any here).</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//  Get the conversion options (metrics and display settings)</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//  Convert the input to CommonHTML output and use a promise to wait for it to be ready</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//    (in case an extension needs to be loaded dynamically).</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="javascript">MathJax.texReset();</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> options = MathJax.getMetricsFor(output);</span></span><br><span class="line"><span class="javascript">options.display = <span class="built_in">this</span>.checked;</span></span><br><span class="line"><span class="javascript">MathJax.tex2chtmlPromise(input, options).then(<span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//  The promise returns the typeset node, which we add to the output</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//  Then update the document to include the adjusted CSS for the</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//    content of the new equation.</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="javascript">output.appendChild(node);</span></span><br><span class="line"><span class="javascript">MathJax.startup.document.clear();</span></span><br><span class="line"><span class="javascript">MathJax.startup.document.updateDocument();</span></span><br><span class="line"><span class="javascript">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//  If there was an error, put the message into the output instead</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="javascript">output.appendChild(<span class="built_in">document</span>.createElement(<span class="string">&#x27;pre&#x27;</span>)).appendChild(<span class="built_in">document</span>.createTextNode(err.message));</span></span><br><span class="line"><span class="javascript">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//  Error or not, re-enable the display and render buttons</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// button.disabled = display.disabled = false;</span></span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">copy</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> input = <span class="built_in">this</span>.textArea;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oInput = <span class="built_in">document</span>.createElement(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="javascript">oInput.value = input;</span></span><br><span class="line"><span class="javascript">oInput.select();</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.execCommand(<span class="string">&quot;Copy&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.copySuccess();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">copySuccess</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$message(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">message</span>: <span class="string">&#x27;复制成功&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">copyFailure</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$message.error(<span class="string">&#x27;复制失败&#x27;</span>);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建一个electron项目</title>
      <link href="/2020/07/04/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAelectron%E9%A1%B9%E7%9B%AE/"/>
      <url>/2020/07/04/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAelectron%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="打造你的第一个-Electron-应用"><a href="#打造你的第一个-Electron-应用" class="headerlink" title="打造你的第一个 Electron 应用"></a>打造你的第一个 Electron 应用</h2><p>Electron 可以让你使用纯 JavaScript 调用丰富的原生(操作系统) APIs 来创造桌面应用。 你可以把它看作一个 Node. js 的变体，它专注于桌面应用而不是 Web 服务器端。</p><p>这不意味着 Electron 是某个图形用户界面（GUI）库的 JavaScript 版本。 相反，Electron 使用 web 页面作为它的 GUI，所以你能把它看作成一个被 JavaScript 控制的，精简版的 Chromium 浏览器。</p><p><strong>注意</strong>: 获取该示例的代码仓库: 立即下载并运行 。</p><p>从开发的角度来看, Electron application 本质上是一个 Node. js 应用程序。 与 Node.js 模块相同，应用的入口是 package.json 文件。 一个最基本的 Electron 应用一般来说会有如下的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your-app/</span><br><span class="line">├── package.json</span><br><span class="line">├── main.js</span><br><span class="line">└── index.html</span><br></pre></td></tr></table></figure><p>为你的新Electron应用创建一个新的空文件夹。 打开你的命令行工具，然后从该文件夹运行<code>npm init</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>npm 会帮助你创建一个基本的 package.json 文件。 其中的 main 字段所表示的脚本为应用的启动脚本，它将会在主进程中执行。 如下片段是一个 package.json 的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;your-app&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果 <code>main</code> 字段没有在 <code>package.json</code> 中出现，那么 Electron 将会尝试加载 <code>index.js</code> 文件（就像 Node.js 自身那样）。 如果你实际开发的是一个简单的 Node 应用，那么你需要添加一个 <code>start</code> 脚本来指引 <code>node</code> 去执行当前的 package：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;your-app&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;node .&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把这个 Node 应用转换成一个 Electron 应用也是非常简单的，我们只不过是把 <code>node</code> 运行时替换成了 <code>electron</code> 运行时。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;your-app&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;electron .&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安装-Electron"><a href="#安装-Electron" class="headerlink" title="安装 Electron"></a><a href="https://www.electronjs.org/docs/tutorial/first-app#安装-electron">安装 Electron</a></h3><p>现在，您需要安装<code>electron</code>。 我们推荐的安装方法是把它作为您 app 中的开发依赖项，这使您可以在不同的 app 中使用不同的 Electron 版本。 在您的app所在文件夹中运行下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev electron</span><br></pre></td></tr></table></figure><p>除此之外，也有其他安装 Electron 的途径。 请咨询<a href="https://www.electronjs.org/docs/tutorial/installation">安装指南</a>来了解如何用代理、镜像和自定义缓存。</p><h3 id="开发一个简易的-Electron"><a href="#开发一个简易的-Electron" class="headerlink" title="开发一个简易的 Electron"></a><a href="https://www.electronjs.org/docs/tutorial/first-app#开发一个简易的-electron">开发一个简易的 Electron</a></h3><p>Electron apps 使用JavaScript开发，其工作原理和方法与Node.js 开发相同。 <code>electron</code>模块包含了Electron提供的所有API和功能，引入方法和普通Node.js模块一样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const electron = require(&#x27;electron&#x27;)</span><br></pre></td></tr></table></figure><p><code>electron</code> 模块所提供的功能都是通过命名空间暴露出来的。 比如说： <code>electron.app</code>负责管理Electron 应用程序的生命周期， <code>electron.BrowserWindow</code>类负责创建窗口。 下面是一个简单的<code>main.js</code>文件，它将在应用程序准备就绪后打开一个窗口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const &#123; app, BrowserWindow &#125; = require(&#x27;electron&#x27;)</span><br><span class="line"></span><br><span class="line">function createWindow () &#123;</span><br><span class="line">  // Create the browser window.</span><br><span class="line">  let win = new BrowserWindow(&#123;</span><br><span class="line">    width: 800,</span><br><span class="line">    height: 600,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      nodeIntegration: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // and load the index.html of the app.</span><br><span class="line">  win.loadFile(&#x27;index.html&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.whenReady().then(createWindow)</span><br></pre></td></tr></table></figure><p>您应当在 <code>main.js</code> 中创建窗口，并处理程序中可能遇到的所有系统事件。 下面我们将完善上述例子，添加以下功能：打开开发者工具、处理窗口关闭事件、在macOS用户点击dock上图标时重建窗口，添加后，main. js 就像下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">const &#123; app, BrowserWindow &#125; = require(&#x27;electron&#x27;)</span><br><span class="line"></span><br><span class="line">function createWindow () &#123;</span><br><span class="line">  // Create the browser window.</span><br><span class="line">  const win = new BrowserWindow(&#123;</span><br><span class="line">    width: 800,</span><br><span class="line">    height: 600,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      nodeIntegration: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // and load the index.html of the app.</span><br><span class="line">  win.loadFile(&#x27;index.html&#x27;)</span><br><span class="line"></span><br><span class="line">  // Open the DevTools.</span><br><span class="line">  win.webContents.openDevTools()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// This method will be called when Electron has finished</span><br><span class="line">// initialization and is ready to create browser windows.</span><br><span class="line">// Some APIs can only be used after this event occurs.</span><br><span class="line">app.whenReady().then(createWindow)</span><br><span class="line"></span><br><span class="line">// Quit when all windows are closed.</span><br><span class="line">app.on(&#x27;window-all-closed&#x27;, () =&gt; &#123;</span><br><span class="line">  // On macOS it is common for applications and their menu bar</span><br><span class="line">  // to stay active until the user quits explicitly with Cmd + Q</span><br><span class="line">  if (process.platform !== &#x27;darwin&#x27;) &#123;</span><br><span class="line">    app.quit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(&#x27;activate&#x27;, () =&gt; &#123;</span><br><span class="line">  // On macOS it&#x27;s common to re-create a window in the app when the</span><br><span class="line">  // dock icon is clicked and there are no other windows open.</span><br><span class="line">  if (BrowserWindow.getAllWindows().length === 0) &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// In this file you can include the rest of your app&#x27;s specific main process</span><br><span class="line">// code. You can also put them in separate files and require them here.</span><br></pre></td></tr></table></figure><p>最后，创建你想展示的 <code>index.html</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello World!&lt;/title&gt;</span><br><span class="line">    &lt;!-- https://electronjs.org/docs/tutorial/security#csp-meta-tag --&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;;&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">    We are using node &lt;script&gt;document.write(process.versions.node)&lt;/script&gt;,</span><br><span class="line">    Chrome &lt;script&gt;document.write(process.versions.chrome)&lt;/script&gt;,</span><br><span class="line">    and Electron &lt;script&gt;document.write(process.versions.electron)&lt;/script&gt;.</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="启动你的应用"><a href="#启动你的应用" class="headerlink" title="启动你的应用"></a><a href="https://www.electronjs.org/docs/tutorial/first-app#启动你的应用">启动你的应用</a></h3><p>在创建并初始化完成 <code>main.js</code>、 <code>index.html</code>和<code>package.json</code>之后，您就可以在当前工程的根目录执行 <code>npm start</code> 命令来启动刚刚编写好的Electron程序了。</p><h2 id="Trying-this-Example"><a href="#Trying-this-Example" class="headerlink" title="Trying this Example"></a>Trying this Example</h2><p>Clone and run the code in this tutorial by using the <a href="https://github.com/electron/electron-quick-start"><code>electron/electron-quick-start</code></a> repository.</p><p><strong>Note</strong>: Running this requires <a href="https://git-scm.com/">Git</a> and <a href="https://www.npmjs.com/">npm</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Clone the repository</span><br><span class="line">$ git clone https://github.com/electron/electron-quick-start</span><br><span class="line"># Go into the repository</span><br><span class="line">$ cd electron-quick-start</span><br><span class="line"># Install dependencies</span><br><span class="line">$ npm install</span><br><span class="line"># Run the app</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>启动开发过程的有关模板文件和工具列表, 请参阅模板文件和 CLI 文档 。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Catel酒店管理系统使用说明</title>
      <link href="/2020/07/02/Catel%E9%85%92%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
      <url>/2020/07/02/Catel%E9%85%92%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经过了一个学期的开发，本学期的大作业基本上算是开发结束了，这个项目使用了Spring Boot+Vue的框架。使用MySQL数据库对数据进行持久化。本文档对这个系统的使用详情进行说明，可以<a href="https://hotel.icimence.cn">点击链接进行体验</a>。</p><h2 id="账户名和密码"><a href="#账户名和密码" class="headerlink" title="账户名和密码"></a>账户名和密码</h2><div class="table-container"><table><thead><tr><th style="text-align:center">账户名</th><th style="text-align:center">密码</th></tr></thead><tbody><tr><td style="text-align:center">C1</td><td style="text-align:center">x</td></tr><tr><td style="text-align:center">C2</td><td style="text-align:center">x</td></tr><tr><td style="text-align:center">HM1</td><td style="text-align:center">x</td></tr><tr><td style="text-align:center">HM2</td><td style="text-align:center">x</td></tr><tr><td style="text-align:center">M1</td><td style="text-align:center">x</td></tr><tr><td style="text-align:center">A1</td><td style="text-align:center">x</td></tr></tbody></table></div><h2 id="系统功能说明"><a href="#系统功能说明" class="headerlink" title="系统功能说明"></a>系统功能说明</h2><h3 id="客户"><a href="#客户" class="headerlink" title="客户"></a>客户</h3><p>C开头的账户都是客户，能够进行客户的操作。</p><p>也可以自己进行注册账号，客户账号有以下功能：</p><ol><li><p>查看所有酒店</p></li><li><p>对酒店的信息进行浏览</p></li><li><p>对酒店进行排序和搜索</p></li><li><p>对指定房型进行下单</p></li><li><p>查看自己的订单</p></li><li><p>修改用户信息</p></li><li><p>修改密码</p></li><li><p>充值VIP</p></li><li><p>充值信用值积分</p></li><li><p>查看自己正在进行中的订单</p></li><li><p>为自己的用户添加新的身份（预定时使用）</p></li><li><p>修改用户头像</p></li><li><p>评论已经入住且正常的酒店</p></li><li><p>能够查询自己的信用值变更记录</p></li><li><p>能够对进行中的订单进行撤销操作（<strong>危险：会导致信用值降低</strong>）</p></li></ol><h3 id="系统管理员"><a href="#系统管理员" class="headerlink" title="系统管理员"></a>系统管理员</h3><p>A开头的是系统管理员。这个身份是无法进行增加的，在数据库中被初始化并且锁定。</p><p>系统管理员因为是管理员，所以是没有下单的权限的，系统管理员和普通客户相同的功能不再赘述，特有功能如下：</p><ol><li><p>查看所有的酒店管理员</p></li><li><p>删除酒店管理员</p></li><li><p>指定酒店管理员能够管理的酒店</p></li><li><p>查看所有的营销人员</p></li><li><p>删除营销人员账号</p></li><li><p>添加酒店管理员</p></li><li><p>添加营销账号</p></li><li><p>查看所有的酒店</p></li><li><p>添加酒店</p></li><li><p>删除酒店</p></li></ol><h3 id="酒店管理员"><a href="#酒店管理员" class="headerlink" title="酒店管理员"></a>酒店管理员</h3><p>HM开头的是酒店管理员，同样的，不介绍重复功能，特有权限如下：</p><ol><li><p>查看自己可以管理的酒店</p></li><li><p>查看自己的酒店的所有订单</p></li><li><p>查看指定的酒店的房型</p></li><li><p>添加指定房型</p></li><li><p>删除指定房型</p></li><li><p>查看指定酒店的优惠策略</p></li><li><p>添加指定酒店的优惠策略</p></li><li><p>删除指定酒店的优惠策略</p></li><li><p>修改酒店信息包括图片</p></li><li><p>修改酒店的促销公告</p></li><li><p>能够设置酒店的信用值门槛</p></li><li><p>能够撤回酒店的订单</p></li><li><p>能够将酒店的订单标注为异常</p></li><li><p>能够查看所有的订单的详情</p></li></ol><h3 id="市场营销人员"><a href="#市场营销人员" class="headerlink" title="市场营销人员"></a>市场营销人员</h3><p>M开头的账户是市场营销人员，他的特权有：</p><ol><li>查看所有的全平台优惠策略</li><li>添加全平台的优惠策略</li><li>删除全平台的优惠策略</li><li>对指定用户进行信用充值</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这就是所有的功能了，这个项目使用了ant-design-vue的组件进行前端的开发。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在electron-vue应用中使用elementUI</title>
      <link href="/2020/06/30/%E5%9C%A8electron-vue%E5%BA%94%E7%94%A8%E4%B8%AD%E4%BD%BF%E7%94%A8elementUI/"/>
      <url>/2020/06/30/%E5%9C%A8electron-vue%E5%BA%94%E7%94%A8%E4%B8%AD%E4%BD%BF%E7%94%A8elementUI/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个鸽了无数个月的项目又重新启动了，因为体验过html代码中自己写css，并不像再次进行体验，所以直接使用了比较成熟的ElementUI（假装不知道Ant），不知道怎么初始化一个项目的可以去看看这个系列的另一篇文章，开发笔记一，在文末的推荐文章中即可。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用npm安装elementUI的js包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-ui -save</span><br></pre></td></tr></table></figure><p>这里解释一下两个概念，一个是生产环境依赖，一个是开发环境依赖也就是dep和devdep。</p><p>打开项目根目录下的package.json，里面是项目依赖的一些名称以及项目版本要求和一些基本配置，可以看见配置项里有<strong>dependencies</strong>和<strong>devDependencies</strong>两项，分别代表什么意思呢？当使用webpack构建项目时，需要明确不同环境下所需要的依赖和版本要求：</p><ul><li><strong>dependencies</strong>：是在生产环境下使用的一些依赖，由命令行参数—save或者—save-prod写入，缩写为-S</li><li><strong>devDependencies</strong>：是仅在开发环境下使用的一些依赖，不会再生产环境下使用，由命令行参数—save-dev写入，缩写为-D</li></ul><p>如果你仅仅是引入一个在开发间需要的依赖包，你只需要把它写入在devDependencies中，在生产环境发布产品时，是不会加载这些包的。</p><h2 id="检查是否成功"><a href="#检查是否成功" class="headerlink" title="检查是否成功"></a>检查是否成功</h2><p>在安装完成之后可以对package.json文件进行检查，如果有elementui就是已经安装成功了，之后我们可以修改<code>src/rentderer/main.js</code>来对elementUI进行全局引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line">Vue.use(Element)</span><br></pre></td></tr></table></figure><p>然后我们将同文件夹下的<code>App.vue</code>文件进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;el-button type=&quot;danger&quot;&gt;测试按钮&lt;/el-button&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &#x27;intercom&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/* CSS */</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>我们再次启动应用如果能看到应用的左上角是一个带有样式的红色按钮，就说明我们已经引入成功了。</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/electron-vue.png" alt="应用示例"></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>这样已经完成了</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centOS关闭指定端口的进程</title>
      <link href="/2020/06/25/centOS%E5%85%B3%E9%97%AD%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E7%9A%84%E8%BF%9B%E7%A8%8B/"/>
      <url>/2020/06/25/centOS%E5%85%B3%E9%97%AD%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E7%9A%84%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="根据端口号查找进程的ID"><a href="#根据端口号查找进程的ID" class="headerlink" title="根据端口号查找进程的ID"></a>根据端口号查找进程的ID</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lg ~]<span class="comment"># netstat -nlp | grep 8830</span></span><br><span class="line">tcp6       0      0 :::8830                 :::*                    LISTEN      1375/java </span><br></pre></td></tr></table></figure><h2 id="根据进程ID立刻杀死进程"><a href="#根据进程ID立刻杀死进程" class="headerlink" title="根据进程ID立刻杀死进程"></a>根据进程ID立刻杀死进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 1375</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS代码实现指定时间后跳转指定URL</title>
      <link href="/2020/06/15/JS%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%8C%87%E5%AE%9A%E6%97%B6%E9%97%B4%E5%90%8E%E8%B7%B3%E8%BD%AC%E6%8C%87%E5%AE%9AURL/"/>
      <url>/2020/06/15/JS%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%8C%87%E5%AE%9A%E6%97%B6%E9%97%B4%E5%90%8E%E8%B7%B3%E8%BD%AC%E6%8C%87%E5%AE%9AURL/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>写作业的时候需要延时跳转指定URL，就放在这里，一行代码解决。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&quot;window.location=(&#x27;http://localhost:8080/register&#x27;)&quot;</span>,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>单位是毫秒（ms）</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java启动系统默认浏览器并打开指定网址</title>
      <link href="/2020/06/15/Java%E5%90%AF%E5%8A%A8%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B9%B6%E6%89%93%E5%BC%80%E6%8C%87%E5%AE%9A%E7%BD%91%E5%9D%80/"/>
      <url>/2020/06/15/Java%E5%90%AF%E5%8A%A8%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B9%B6%E6%89%93%E5%BC%80%E6%8C%87%E5%AE%9A%E7%BD%91%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>有需求让Java在运行的时候打开指定的门户网站，所以就把代码直接放在这里，有需要自取。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(java.awt.Desktop.isDesktopSupported())&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//创建一个URI实例,注意不是URL</span></span><br><span class="line">        java.net.URI uri=java.net.URI.create(<span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line">        <span class="comment">//获取当前系统桌面扩展</span></span><br><span class="line">        java.awt.Desktop dp=java.awt.Desktop.getDesktop();</span><br><span class="line">        <span class="comment">//判断系统桌面是否支持要执行的功能</span></span><br><span class="line">        <span class="keyword">if</span>(dp.isSupported(java.awt.Desktop.Action.BROWSE))&#123;</span><br><span class="line">        <span class="comment">//获取系统默认浏览器打开链接</span></span><br><span class="line">        dp.browse(uri);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(java.lang.NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;指定URL为空&quot;</span>);</span><br><span class="line">            <span class="comment">//此为uri为空时抛出异常</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(java.io.IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无法获取系统默认浏览器&quot;</span>);</span><br><span class="line">            <span class="comment">//此为无法获取系统默认浏览器</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS配置nginx</title>
      <link href="/2020/06/12/CentOS%E9%85%8D%E7%BD%AEnginx/"/>
      <url>/2020/06/12/CentOS%E9%85%8D%E7%BD%AEnginx/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自己部署了一个SpringBoot+Vue的项目对应的nginx放在这里，供查看。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For more information on configuration, see:</span></span><br><span class="line"><span class="comment">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class="line"><span class="comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">user</span> root;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/error.log;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span><br><span class="line"><span class="attribute">include</span> /usr/share/nginx/modules/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>            <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span>          <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span>         <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>   <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span>             /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line">    <span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">listen</span>       [::]:<span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">server_name</span>  你的域名;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        <span class="attribute">include</span> /etc/nginx/default.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">root</span>    /root/dist; <span class="comment">#你的前端打包文件目录位置</span></span><br><span class="line">                <span class="attribute">index</span>   index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /api/ &#123; <span class="comment">#你的前端请求的api接口</span></span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host $http_host;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> REMOTE-HOST $remote_addr;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://localhost:8080;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">            <span class="attribute">location</span> = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">            <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Settings for a TLS enabled server.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    server &#123;</span></span><br><span class="line"><span class="comment">#        listen       443 ssl http2 default_server;</span></span><br><span class="line"><span class="comment">#        listen       [::]:443 ssl http2 default_server;</span></span><br><span class="line"><span class="comment">#        server_name  _;</span></span><br><span class="line"><span class="comment">#        root         /usr/share/nginx/html;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span></span><br><span class="line"><span class="comment">#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span></span><br><span class="line"><span class="comment">#        ssl_session_cache shared:SSL:1m;</span></span><br><span class="line"><span class="comment">#        ssl_session_timeout  10m;</span></span><br><span class="line"><span class="comment">#        ssl_ciphers HIGH:!aNULL:!MD5;</span></span><br><span class="line"><span class="comment">#        ssl_prefer_server_ciphers on;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        # Load configuration files for the default server block.</span></span><br><span class="line"><span class="comment">#        include /etc/nginx/default.d/*.conf;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        location / &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        error_page 404 /404.html;</span></span><br><span class="line"><span class="comment">#            location = /40x.html &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        error_page 500 502 503 504 /50x.html;</span></span><br><span class="line"><span class="comment">#            location = /50x.html &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>这样就可以实现用过域名访问前端同时联通后端了。目前我自己的服务器上的项目还在优化就不把域名放出来了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装Java8</title>
      <link href="/2020/06/12/CentOS%E5%AE%89%E8%A3%85Java8/"/>
      <url>/2020/06/12/CentOS%E5%AE%89%E8%A3%85Java8/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为在自己的服务器上要部署springboot+vue的项目，所以需要Java1.8的开发环境，但是centos并没有自带，所以放在这里供参考</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>寻找对应的开发套件。查看<code>yum -y list java*</code></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/yumJava.png" alt=""></p><p>从上图中就可以找到相应的套件，但是因为相近的有点多，最后我选择了<code>java-1.8.0-openjdk-devel.x86_64</code></p><h3 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h3><p>检查安装，当安装完成之后我们到安装目录去看看是不是文件齐全。目录的路径为<code>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.181-3.b13.el7_5.x86_64</code></p><h3 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h3><p>修改环境变量。</p><p>使用vim编辑<code>/etc/profile</code>在这个文件中添加一下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.181-3.b13.el7_5.x86_64</span><br><span class="line">JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME</span><br><span class="line"><span class="built_in">export</span> JRE_HOME</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"><span class="built_in">export</span> CLASSPATH</span><br></pre></td></tr></table></figure><p>目录请按照自己的情况进行更换。</p><h3 id="步骤四"><a href="#步骤四" class="headerlink" title="步骤四"></a>步骤四</h3><p>使环境变量生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>可以通过<code>java -version</code>进行版本和环境变量配置的检查。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装MySQL5.7</title>
      <link href="/2020/06/12/CentOS%E5%AE%89%E8%A3%85MySQL5-7/"/>
      <url>/2020/06/12/CentOS%E5%AE%89%E8%A3%85MySQL5-7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为在自己的服务器上要部署springboot+vue的项目，所以需要数据库进行支撑，但是centos的yum包管理器不能直接进行安装，所以就把步骤写下来，放在这里。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>下载并安装MySQL官方的Yum Repository</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span></span><br></pre></td></tr></table></figure><p> 使用上面的命令就直接下载了安装用的Yum Repository，大概25KB的样子，然后就可以直接yum安装了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y install mysql57-community-release-el7-10.noarch.rpm</span></span><br></pre></td></tr></table></figure><p> 之后就开始安装MySQL服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y install mysql-community-server</span></span><br></pre></td></tr></table></figure><p> 这步可能会花些时间，安装完成后就会覆盖掉之前的mariadb。</p><h3 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h3><p> 首先启动MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl start  mysqld.service</span></span><br></pre></td></tr></table></figure><p> 查看MySQL运行状态，运行状态如图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl status mysqld.service</span></span><br></pre></td></tr></table></figure><p> 此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码，通过如下命令可以在日志文件中找出密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># grep &quot;password&quot; /var/log/mysqld.log</span></span><br></pre></td></tr></table></figure><p>这样就能看到显示出来的初始密码。</p><p>然后使用密码进行登录</p><p> 如下命令进入数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -uroot -p</span></span><br></pre></td></tr></table></figure><h3 id="步骤四"><a href="#步骤四" class="headerlink" title="步骤四"></a>步骤四</h3><p>这里开始更改密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;new password&#x27;;</span><br></pre></td></tr></table></figure><p> 这里有个问题，新密码设置的时候如果设置的过于简单会报错，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br></pre></td></tr></table></figure><p>这是我们只要调低MySQL对于密码的要求就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password_policy=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password_length=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>这样就可以进行任何密码的设定，当然调低密码的复杂度要求是看个人意愿的。</p><h3 id="步骤五"><a href="#步骤五" class="headerlink" title="步骤五"></a>步骤五</h3><p>但此时还有一个问题，就是因为安装了Yum Repository，以后每次yum操作都会自动更新，需要把这个卸载掉：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y remove mysql57-community-release-el7-10.noarch</span></span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>可以在自己的Linux下进行操作验证安装。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题小记【一】(1~4)</title>
      <link href="/2020/06/11/LeetCode%E5%88%B7%E9%A2%98%E5%B0%8F%E8%AE%B0%E3%80%90%E4%B8%80%E3%80%91-1-4/"/>
      <url>/2020/06/11/LeetCode%E5%88%B7%E9%A2%98%E5%B0%8F%E8%AE%B0%E3%80%90%E4%B8%80%E3%80%91-1-4/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>本系列博客笔记都是本人在刷leetcode题目时受到的一些启发和学习笔记，本人习惯使用Java进行练习，所以我的答题都是使用Java进行的，源码已经在GitHub开源，<a href="https://github.com/icimence/Leetcode-Answer">点击跳转GitHub</a>欢迎在评论区进行讨论，但是本人的刷题速度较慢且现阶段只考虑刷算法题目，请见谅。</p><h2 id="第一题：两数之和"><a href="#第一题：两数之和" class="headerlink" title="第一题：两数之和"></a>第一题：两数之和</h2><h3 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><h4 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h4><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>这道题目基本上的算法相当固定，简单的就是遍历，只要遍历全部的数组就一定能找到符合条件的或者是知道无解。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">           <span class="keyword">int</span>[] res = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                       res[<span class="number">0</span>] = i;</span><br><span class="line">                       res[<span class="number">1</span>] = j;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> res;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h4><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>使用HashMap作为一个中间介质，对所有的数字先进行存储，然后再进行依次遍历，判断希望的数字是不是再map中出现，是一种比较简单的方法。但是遍历的过程是一个完整的循环，在解法三中可以进行优化。</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">         Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">             map.put(nums[i], i);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">             <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">             <span class="keyword">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, map.get(complement) &#125;;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;No two sum solution&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h4><h5 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h5><p>答题思路与解法一相近，但是在添加到HashMap的过程中一边进行判断一边添加。是目前我看到的最优的解法。</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BestSolution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(complement)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;No two sum solution&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二题：两数相加"><a href="#第二题：两数相加" class="headerlink" title="第二题：两数相加"></a>第二题：两数相加</h2><h3 id="原题-1"><a href="#原题-1" class="headerlink" title="原题"></a>原题</h3><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</p><p>输出：7 -&gt; 0 -&gt; 8</p><p>原因：342 + 465 = 807</p><h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><p>这道题目比较简单，解法基本上固定，其他的高级的解法欢迎讨论。</p><p>我用了一个变量表示进位，然后进行依次的相加就可以得到答案了，唯一要注意的就是最高位有可能会多一位进位。直接上代码吧，没啥好说的。。。</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode Head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode firstNode = l1, secondNode = l2, curr = Head;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (firstNode != <span class="keyword">null</span> || secondNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = (firstNode != <span class="keyword">null</span>) ? firstNode.val : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> y = (secondNode != <span class="keyword">null</span>) ? secondNode.val : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> sum = carry + x + y;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            curr.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            curr = curr.next;</span><br><span class="line">            <span class="keyword">if</span> (firstNode != <span class="keyword">null</span>) firstNode = firstNode.next;</span><br><span class="line">            <span class="keyword">if</span> (secondNode != <span class="keyword">null</span>) secondNode = secondNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            curr.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三题：无重复字符的最长子串"><a href="#第三题：无重复字符的最长子串" class="headerlink" title="第三题：无重复字符的最长子串"></a>第三题：无重复字符的最长子串</h2><h3 id="原题-2"><a href="#原题-2" class="headerlink" title="原题"></a>原题</h3><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>示例 1:</p><p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p><p>示例 2:</p><p>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p><p>示例 3:</p><p>输入: “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。</p><p> 请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p><h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><h4 id="解法一-1"><a href="#解法一-1" class="headerlink" title="解法一"></a>解法一</h4><h5 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h5><p>最简单的方法一定是进行遍历，然后用循环进行寻找，复杂度较高直接放代码</p><h5 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String s, <span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == s.charAt(i))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxCount = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> plus = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ((i + plus) == s.length())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">while</span> (contains(s.substring(i, i + plus), s.charAt(i + plus))) &#123;</span><br><span class="line">                plus += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (plus &gt; maxCount)</span><br><span class="line">                    maxCount = plus;</span><br><span class="line">                <span class="keyword">if</span> (i + plus == s.length())</span><br><span class="line">                    <span class="keyword">return</span> maxCount;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解法二-1"><a href="#解法二-1" class="headerlink" title="解法二"></a>解法二</h4><h5 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h5><p>使用移动窗口的办法，基本上比较好理解，使用HashSet进行解题。原理就是将后一个字符加入Set中时校验这个字符是不是已经存在，如果已经存在就将现在的set中的元素个数和最长长度进行比较，如果最长就记录。然后起点后移一个字符，再次检测，循环往复。</p><h5 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Answer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Set&lt;Character&gt; temp = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> pt = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">                temp.remove(s.charAt(i - <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">while</span> (pt &lt; s.length() &amp;&amp; !temp.contains(s.charAt(pt))) &#123;</span><br><span class="line">                temp.add(s.charAt(pt));</span><br><span class="line">                pt++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(pt - i, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第四题：寻找两个中序数组的中位数"><a href="#第四题：寻找两个中序数组的中位数" class="headerlink" title="第四题：寻找两个中序数组的中位数"></a>第四题：寻找两个中序数组的中位数</h2><h3 id="原题-3"><a href="#原题-3" class="headerlink" title="原题"></a>原题</h3><p>给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。</p><p>请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p><p>你可以假设 nums1 和 nums2 不会同时为空。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p>示例 1:</p><p>nums1 = [1, 3]<br>nums2 = [2]</p><p>则中位数是 2.0<br>示例 2:</p><p>nums1 = [1, 2]<br>nums2 = [3, 4]</p><p>则中位数是 (2 + 3)/2 = 2.5</p><h3 id="解答-3"><a href="#解答-3" class="headerlink" title="解答"></a>解答</h3><h4 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h4><p>目前我就只会一种，也是看了题解才会的方法。这道题有点诡异，这种方法依靠了中位数的定义，希望分别找到一条分割线可以分割两个有序数组，这条分割线的位置的定义如下：</p><ul><li>第一个数组的分割线左边的值小于第二个数组的分割线右边的值</li><li>第一个数组的分割线右边的值大于第二个数组的分割线左边的值</li><li>两条分割线两边的数字数量相等或是分割线左边多一个</li></ul><p>这里有特殊情况是可以被允许的，就是一个数组的所有的元素都在分割线单边，这是可以的。</p><p>当找到这条分割线的时候题目基本上就做完了。如果总共的元素是偶数，只要取两条分割线左边的较大值和右边的较小值进行相加就可以了。如果是奇数，只要拿到分割线左边的较大值就可以了。</p><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1.length &gt; nums2.length) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] temp = nums1;</span><br><span class="line">            nums1 = nums2;</span><br><span class="line">            nums2 = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> n = nums2.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> totalLeft = m + (n - m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = m;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = left + (right - left + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> j = totalLeft - i;</span><br><span class="line">            <span class="keyword">if</span> (nums1[i - <span class="number">1</span>] &gt; nums2[j]) &#123;</span><br><span class="line">                right = i - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = left;</span><br><span class="line">        <span class="keyword">int</span> j = totalLeft - i;</span><br><span class="line">        <span class="keyword">int</span> nums1Left = i == <span class="number">0</span> ? Integer.MIN_VALUE : nums1[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> nums1Right = i == m ? Integer.MAX_VALUE : nums1[i];</span><br><span class="line">        <span class="keyword">int</span> nums2Left = j == <span class="number">0</span> ? Integer.MIN_VALUE : nums2[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> nums2Right = j == n ? Integer.MAX_VALUE : nums2[j];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((m + n) % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(nums1Left, nums2Left);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">double</span>) ((Math.max(nums1Left, nums2Left) + Math.min(nums1Right, nums2Right))) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>本文所有题目来源于<code>LeetCode</code>，仅作为学习用途。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客文章加密（本文加密密码hello）</title>
      <link href="/2020/06/09/hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/"/>
      <url>/2020/06/09/hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7facb9a651ddae1c27075ece371076c3cd030fdf3578ec70871f204e621b8d11"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Packet Tracer结课拓扑实验报告</title>
      <link href="/2020/06/08/Packet-Tracer%E7%BB%93%E8%AF%BE%E6%8B%93%E6%89%91%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
      <url>/2020/06/08/Packet-Tracer%E7%BB%93%E8%AF%BE%E6%8B%93%E6%89%91%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本报告是计算机网络的结课报告，使用packet Tracer5.2进行实验，源文件<a href="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/lab.pkt">点此下载</a>本实验报告由<code>Dart</code>、<code>Nandodu</code>、<code>icimence</code>、<code>小白白</code>、<code>R.H</code>共同制作。如果出现问题，欢迎指正，指正请爆破李某某<code>Dart</code>的微博，为保障其生命财产安全，暂不提供直接链接。不说废话了，下面就是实验报告。</p><h2 id="实验概述"><a href="#实验概述" class="headerlink" title="实验概述"></a>实验概述</h2><h3 id="拓扑图展示"><a href="#拓扑图展示" class="headerlink" title="拓扑图展示"></a>拓扑图展示</h3><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/0.jpg" alt="拓扑图"></p><h3 id="PC的IP地址表"><a href="#PC的IP地址表" class="headerlink" title="PC的IP地址表"></a>PC的IP地址表</h3><div class="table-container"><table><thead><tr><th>设备</th><th>ip地址</th></tr></thead><tbody><tr><td>PC0</td><td>192.168.10.2</td></tr><tr><td>PC1</td><td>192.168.20.2</td></tr><tr><td>PC2</td><td>192.168.10.3</td></tr><tr><td>PC3</td><td>192.168.20.3</td></tr><tr><td>PC4</td><td>200.1.1.2</td></tr><tr><td>PC5</td><td>200.1.2.2</td></tr></tbody></table></div><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="1-配置路由器"><a href="#1-配置路由器" class="headerlink" title="1. 配置路由器"></a>1. 配置路由器</h3><p>将Router0路由器按照下图进行配置</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/1.jpg" alt="R0路由器"></p><p>将Router1路由器按照下图进行配置</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/2.jpg" alt="R1配置"></p><p>将Router2路由器按照下图进行配置</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/3.jpg" alt="R2配置"></p><p>将Router3路由器按照下图进行配置</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/4.jpg" alt="R3配置"></p><p>PC在尝试ping相同网段PC和路由器验证连通性，以PC0为例</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/5.jpg" alt="ping实验"></p><h3 id="2-交换机划分子网"><a href="#2-交换机划分子网" class="headerlink" title="2. 交换机划分子网"></a>2. 交换机划分子网</h3><p>将Switch0交换机按照下图进行配置</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/6.jpg" alt="Switch0配置"></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/7.jpg" alt="Switch0配置"></p><p>将Switch1交换机按照下图进行配置</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/8.jpg" alt="Switch1配置"></p><p>配置trunk，由于命令相同，仅以Switch0为例</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/9.jpg" alt="trunk配置"></p><h3 id="3-配置RIP"><a href="#3-配置RIP" class="headerlink" title="3. 配置RIP"></a>3. 配置RIP</h3><p>将Router0路由器按照下图进行配置</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/10.jpg" alt="Router0配置"></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/10.5.jpg" alt="Router0配置"></p><p>将Router1路由器按照下图进行配置</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/11.jpg" alt="Router1配置"></p><p>将Router2路由器按照下图进行配置</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/12.jpg" alt="Router2配置"></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/12.5.jpg" alt="Router2配置"></p><p>将Router3路由器按照下图进行配置</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/23.png" alt="Router3配置"></p><p>路由器互ping测试连通性，仅以其中一个为例</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/13.jpg" alt="测试"></p><h3 id="4-在Router2上配置静态NAT"><a href="#4-在Router2上配置静态NAT" class="headerlink" title="4.在Router2上配置静态NAT"></a>4.在Router2上配置静态NAT</h3><p><strong>（注意这里不是最优方案，Router2本身并不需要分配与内部IP相对应的外部IP）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/14.jpg" alt="nat配置"></p><p>用PC3(192.168.20.3) ping PC0(192.168.10.2)</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/15.jpg" alt="ping测试"></p><p>在Router2上执行<code>show ip nat translations</code>查看映射结果</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/16.jpg" alt="ping测试"></p><p>PC 0 ping inside global</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/17.jpg" alt="ping测试"></p><p>查看结果</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/18.jpg" alt="ping测试"></p><h3 id="5-在Router1上配置ACL"><a href="#5-在Router1上配置ACL" class="headerlink" title="5.  在Router1上配置ACL"></a>5.  在Router1上配置ACL</h3><p>在Router1的s6/0上配置ACL,拦截从PC0发往PC4的报文<strong>（注意这里的配置不是最优方案，扩展类型的ACL应该配置在离源地址最近的路由器上，即Router0）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/24.jpg" alt="设置ACL"></p><p>200.1.1.2 和 192.168.10.2互相ping验证结果</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/25.jpg" alt="ping测试"></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/26.jpg" alt="ping测试"></p><p>从PC0pingPC4由于被拦截，直接返回unreachable,而从PC4pingPC0,即使送到了，回复的报文也会被拦截，故timed out,</p><p>PC0和PC4ping其他网段和主机均显示良好,在此不展示过多</p><p>以下是PC0的图示</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/27.jpg" alt="ping测试"></p><p>以下下是PC4的图示</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/final/28.jpg" alt="ping测试"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这就是实验报告的全部内容，如果有任何问题可以在评论区留言，欢迎批评指正！</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> packet-tracer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron应用打包教程</title>
      <link href="/2020/06/07/electron%E5%BA%94%E7%94%A8%E6%89%93%E5%8C%85%E6%95%99%E7%A8%8B/"/>
      <url>/2020/06/07/electron%E5%BA%94%E7%94%A8%E6%89%93%E5%8C%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在本<a href="https://github.com/electron-userland/electron-packager">electron应用打包</a>教程中，我们将介绍如何使用应用程序图标创建MacOS，Windows和Linux可执行文件。这也是<a href="https://www.christianengvall.se/electron-app-icons/">Electron应用程序图标</a>发布的延续，因此，如果您还没有读过，请从此处开始（很简短，我保证）。</p><p>我将此代码添加到<a href="https://github.com/crilleengvall/electron-tutorial-app">github上</a>的<a href="https://github.com/crilleengvall/electron-tutorial-app">Electron教程应用程序中</a>。如果您想查看所有代码，只需查看该仓库即可。</p><p>在本教程中，我将应用程序打包在Windows，macOS和Ubuntu Linux上。在<a href="https://github.com/electron-userland/electron-packager#building-windows-apps-from-non-windows-platforms">Electron Packager自述文件</a>中，有一些有关从非Windows平台构建Windows应用程序的信息。</p><h2 id="第一步：安装electron-packager"><a href="#第一步：安装electron-packager" class="headerlink" title="第一步：安装electron packager"></a>第一步：安装electron packager</h2><p>electron packager是由 <a href="https://github.com/electron-userland">electron-userland</a>提供的，也正如他们所说：</p><blockquote><p>“Electron Packager is a command line tool and Node.js library that bundles Electron-based application source code with a renamed Electron executable and supporting files into folders ready for distribution.”</p></blockquote><p>接下来是安装的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for use in npm scripts</span></span><br><span class="line">npm install electron-packager --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># for use from cli</span></span><br><span class="line">npm install electron-packager -g</span><br></pre></td></tr></table></figure><h2 id="第二步：设置产品的名字和electron的版本"><a href="#第二步：设置产品的名字和electron的版本" class="headerlink" title="第二步：设置产品的名字和electron的版本"></a>第二步：设置产品的名字和electron的版本</h2><p>electron packager需要用户在package.json文件中提供产品名字，所以我们在这里加一个名字，同时我们需要把electron的版本写在这里，方便打包的时候识别。</p><p>首先，当我们添加electron版本的时候是不需要手动添加的，仅需在项目目录下输入下述命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev electron</span><br></pre></td></tr></table></figure><p>ok,当我们做完了上述的步骤，打开package.json对产品的名字进行编辑，样例模板如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;name&quot;</span>: <span class="string">&quot;electron-tutorial-app&quot;</span>,</span><br><span class="line"> <span class="string">&quot;productName&quot;</span>: <span class="string">&quot;Electron tutorial app&quot;</span>,</span><br><span class="line"> <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.1.0&quot;</span>,</span><br><span class="line"> <span class="string">&quot;main&quot;</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line"> <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line"> <span class="string">&quot;electron&quot;</span>: <span class="string">&quot;^1.4.3&quot;</span>,</span><br><span class="line"> <span class="string">&quot;electron-packager&quot;</span>: <span class="string">&quot;^8.1.0&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三步：在命令行中构建Windows，MacOS和Linux的打包文件"><a href="#第三步：在命令行中构建Windows，MacOS和Linux的打包文件" class="headerlink" title="第三步：在命令行中构建Windows，MacOS和Linux的打包文件"></a>第三步：在命令行中构建Windows，MacOS和Linux的打包文件</h2><p>如果想知道下面提供的一些参数是怎么使用的，或者想要了解更多的参数，可以阅读</p><p> <a href="https://github.com/electron-userland/electron-packager/blob/master/docs/api.md">electron-packager api</a></p><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><p>现在你可以在命令行种使用下述命令为MacOS生成打包的可执行软件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">electron-packager . --overwrite --platform=darwin --arch=x64 --icon=assets/icons/mac/icon.icns --prune=<span class="literal">true</span> --out=release-builds</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/Electron-packager-mac.png" alt="MacOS软件示意"></p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在git-bash命令行下使用下述命令行即可生成为Windows打包的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">electron-packager . electron-tutorial-app --overwrite --asar=<span class="literal">true</span> --platform=win32 --arch=ia32 --icon=assets/icons/win/icon.ico --prune=<span class="literal">true</span> --out=release-builds --version-string.CompanyName=CE --version-string.FileDescription=CE --version-string.ProductName=<span class="string">&quot;Electron Tutorial App&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/Electron-packager-windows.png" alt="Windows软件示意"></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">electron-packager . electron-tutorial-app --overwrite --asar=<span class="literal">true</span> --platform=linux --arch=x64 --icon=assets/icons/png/1024x1024.png --prune=<span class="literal">true</span> --out=release-builds</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/Electron-packager-ubuntu-linux.png" alt="Linux软件示意"></p><p>简单的说明一下各个参数的作用</p><ul><li><strong>overwrite</strong>：这个参数会让产生的文件覆盖原来存在的或是更早版本的打包文件</li><li><strong>platform</strong>：目标的运行平台</li><li><strong>arch</strong>：这个软件的架构</li><li><strong>icon</strong>：这个软件的图标</li><li><strong>prune</strong>：在打包之前会自动运行<code>npm prune –production</code>来移除不需要的包</li><li><strong>out</strong>：规定了打包文件产生的目录名称</li></ul><h2 id="快捷方法"><a href="#快捷方法" class="headerlink" title="快捷方法"></a>快捷方法</h2><p>为了更简单的对软件进行打包，我们可以调整package.json文件如下格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;name&quot;</span>: <span class="string">&quot;electron-tutorial-app&quot;</span>,</span><br><span class="line"> <span class="string">&quot;productName&quot;</span>: <span class="string">&quot;Electron tutorial app&quot;</span>,</span><br><span class="line"> <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.1.0&quot;</span>,</span><br><span class="line"> <span class="string">&quot;main&quot;</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line"> <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line"> <span class="string">&quot;electron&quot;</span>: <span class="string">&quot;^1.4.3&quot;</span>,</span><br><span class="line"> <span class="string">&quot;electron-packager&quot;</span>: <span class="string">&quot;^8.1.0&quot;</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"> <span class="string">&quot;package-mac&quot;</span>: <span class="string">&quot;electron-packager . --overwrite --platform=darwin --arch=x64 --icon=assets/icons/mac/icon.icns --prune=true --out=release-builds&quot;</span>,</span><br><span class="line"><span class="string">&quot;package-win&quot;</span>: <span class="string">&quot;electron-packager . electron-tutorial-app --overwrite --asar --platform=win32 --arch=ia32 --icon=assets/icons/win/icon.ico --prune=true --out=release-builds --version-string.CompanyName=CE --version-string.FileDescription=CE --version-string.ProductName=\&quot;Electron Tutorial App\&quot;&quot;</span>,    </span><br><span class="line"><span class="string">&quot;package-linux&quot;</span>: <span class="string">&quot;electron-packager . electron-tutorial-app --overwrite --asar --platform=linux --arch=x64 --icon=assets/icons/png/1024x1024.png --prune=true --out=release-builds&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请根据自己的需要自行调整，这时候只需要执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run package-mac</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run package-win</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run package-linux</span><br></pre></td></tr></table></figure><h2 id="生成安装文件"><a href="#生成安装文件" class="headerlink" title="生成安装文件"></a>生成安装文件</h2><p>参见下一篇博文（尚未发布）</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>本文是一篇翻译文章，并且对原文的错误进行了更正，原文是全英文，详见<a href="https://www.christianengvall.se/electron-packager-tutorial/">https://www.christianengvall.se/electron-packager-tutorial/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于WebStorm 使用Ant Design of Vue 通知提醒框notification时，出现的语法无法检测问题</title>
      <link href="/2020/06/04/%E5%85%B3%E4%BA%8EWebStorm-%E4%BD%BF%E7%94%A8Ant-Design-of-Vue-%E9%80%9A%E7%9F%A5%E6%8F%90%E9%86%92%E6%A1%86notification%E6%97%B6%EF%BC%8C%E5%87%BA%E7%8E%B0%E7%9A%84%E8%AF%AD%E6%B3%95%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E9%97%AE%E9%A2%98/"/>
      <url>/2020/06/04/%E5%85%B3%E4%BA%8EWebStorm-%E4%BD%BF%E7%94%A8Ant-Design-of-Vue-%E9%80%9A%E7%9F%A5%E6%8F%90%E9%86%92%E6%A1%86notification%E6%97%B6%EF%BC%8C%E5%87%BA%E7%8E%B0%E7%9A%84%E8%AF%AD%E6%B3%95%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在平时使用webstorm进行前端开发的时候发现有一些ant-design-vue的时候有一些语法没有被识别，导致了webstorm会有语法错误的警告，本人是强迫症患者，所以一定要解决。原来的图像如下</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/antVue.png" alt="原图"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>修改webstorm默认的js代码版本就可以了，将默认的改为<code>React JSX</code>，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/js.png" alt="修改"></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>这样改完之后就能有较好的效果，效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/antVue2.png" alt="原图"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ant-design-vue更改主题颜色</title>
      <link href="/2020/05/29/ant-design-vue%E6%9B%B4%E6%94%B9%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/"/>
      <url>/2020/05/29/ant-design-vue%E6%9B%B4%E6%94%B9%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;在自己的项目开发和学习过程中使用Vue是十分频繁的，所以就把学习的过程写在这里方便查看。另外，还是声明，最好的参考文档一定是官方的文档。下面给两个官方文档的连接，有什么问题可以到里面字寻找。<br /><b><a href="https://cn.vuejs.org/v2/guide/">Vue官方文档</a></b><br /><b><a href="https://www.antdv.com/docs/vue/introduce-cn/">Ant Design of Vue官方文档</a></b></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>其实这个实现还是比较简单的，由于一开始并没有理解官方文档中的意思，所以配置错误导致配置没有生效，现在就直接把这个方法写在这里，下次可以进行参考，首先我的项目是Vue-cli3使用了babel。</p><p>只需要改写vue.config.js中的一个css的属性，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">css: &#123;</span><br><span class="line">        <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">            <span class="attr">less</span>: &#123;</span><br><span class="line">                <span class="attr">modifyVars</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;primary-color&#x27;</span>: <span class="string">&#x27;#FF99CC&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;link-color&#x27;</span>: <span class="string">&#x27;#FF99CC&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;border-radius-base&#x27;</span>: <span class="string">&#x27;2px&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">javascriptEnabled</span>: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>这时候应该是没有生效的，需要更改main.js中的<code>import &#39;ant-design-vue/dist/antd.css&#39;</code>改为这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;ant-design-vue/dist/antd.less&#x27;</span></span><br></pre></td></tr></table></figure><p>重新编译，应该就可以实现了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>packet-tracer验证RIP及OSPF优先级差异</title>
      <link href="/2020/05/22/packet-tracer%E9%AA%8C%E8%AF%81RIP%E5%8F%8AOSPF%E4%BC%98%E5%85%88%E7%BA%A7%E5%B7%AE%E5%BC%82/"/>
      <url>/2020/05/22/packet-tracer%E9%AA%8C%E8%AF%81RIP%E5%8F%8AOSPF%E4%BC%98%E5%85%88%E7%BA%A7%E5%B7%AE%E5%BC%82/</url>
      
        <content type="html"><![CDATA[<h2 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h2><p>注意：所给拓扑文件为同时启用RIP协议和OSPF协议，可自行关闭OSPF协议进行验证（验证过程包含在实验报告中），文件中的OSPF的cost已经标在拓扑上。<a href="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/OSPF.pkt">点击下载</a></p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><div class="table-container"><table><thead><tr><th>路由器</th><th>loopback0</th><th>se2/0</th><th>se3/0</th></tr></thead><tbody><tr><td>R1</td><td>1.1.1.1</td><td>12.1.1.1</td><td>23.1.1.1</td></tr><tr><td>R2</td><td>2.2.2.2</td><td>12.1.1.2</td><td>34.1.1.2</td></tr><tr><td>R3</td><td>3.3.3.3</td><td>23.1.1.3</td><td>56.1.1.3</td></tr><tr><td>R4</td><td>4.4.4.4</td><td>34.1.1.4</td><td>45.1.1.4</td></tr><tr><td>R5</td><td>5.5.5.5</td><td>56.1.1.5</td><td>45.1.1.5</td></tr></tbody></table></div><p>路由器配置图如下，以R1为例，配置loopback0、se2/0和se3/0端口并设置DCE端时钟：</p><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/1.png" alt="路由配置"></p><p>拓扑图如下：</p><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/2.png" alt="拓扑图"></p><h3 id="在各Router上打开RIP，配置network，下图以R1为例："><a href="#在各Router上打开RIP，配置network，下图以R1为例：" class="headerlink" title="在各Router上打开RIP，配置network，下图以R1为例："></a>在各Router上打开RIP，配置network，下图以R1为例：</h3><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/20.png" alt="路由配置"></p><h3 id="在R1上查看路由表，并打开debug模式"><a href="#在R1上查看路由表，并打开debug模式" class="headerlink" title="在R1上查看路由表，并打开debug模式"></a>在R1上查看路由表，并打开debug模式</h3><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/3.png" alt="路由配置"></p><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/4.png" alt="路由配置"></p><p>R1与R2、R3、R4、R5互ping成功，此处以R1和R5互ping为例：</p><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/5.png" alt="路由配置"></p><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/6.png" alt="路由配置"></p><h3 id="查看路由协议为RIP时，从R1发送到R5的报文路径"><a href="#查看路由协议为RIP时，从R1发送到R5的报文路径" class="headerlink" title="查看路由协议为RIP时，从R1发送到R5的报文路径"></a>查看路由协议为RIP时，从R1发送到R5的报文路径</h3><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/7.png" alt="路由配置"></p><p>报文选择了跳数较少（R1-&gt;R3-&gt;R5跳数为2，R1-&gt;R2-&gt;R4-&gt;R5跳数为3）的路径。</p><h3 id="在各Router上追加OSPF协议，配置network，下图以R1为例："><a href="#在各Router上追加OSPF协议，配置network，下图以R1为例：" class="headerlink" title="在各Router上追加OSPF协议，配置network，下图以R1为例："></a>在各Router上追加OSPF协议，配置network，下图以R1为例：</h3><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/8.png" alt="路由配置"></p><h3 id="验证OSPF，下图以R1为例："><a href="#验证OSPF，下图以R1为例：" class="headerlink" title="验证OSPF，下图以R1为例："></a>验证OSPF，下图以R1为例：</h3><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/9.png" alt="路由配置"></p><h3 id="检查RIP协议和OSPF协议是否同时配置成功，下图以R1为例："><a href="#检查RIP协议和OSPF协议是否同时配置成功，下图以R1为例：" class="headerlink" title="检查RIP协议和OSPF协议是否同时配置成功，下图以R1为例："></a>检查RIP协议和OSPF协议是否同时配置成功，下图以R1为例：</h3><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/10.png" alt="路由配置"></p><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/11.png" alt="路由配置"></p><h3 id="查看此时R1发送到R5的报文路径："><a href="#查看此时R1发送到R5的报文路径：" class="headerlink" title="查看此时R1发送到R5的报文路径："></a>查看此时R1发送到R5的报文路径：</h3><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/12.png" alt="路由配置"></p><p>报文仍选择R1-&gt;R3-&gt;R5这条路径，此时无法验证RIP和OSPF的优先级，我们有如下两种猜测：</p><p>1）报文传播执行的是RIP协议，因为当前路径跳数较少；</p><p>2）报文传播执行的是OSPF协议，因为当前路径开销较少（均采用串行接口）</p><h3 id="为了得到验证结果，我们修改R1-se2-0、R2-se3-0、R4-se3-0、R5-se3-0、R4-se2-0、R2-se2-0的开销，使其cost均为1，修改开销以R1-se2-0为例："><a href="#为了得到验证结果，我们修改R1-se2-0、R2-se3-0、R4-se3-0、R5-se3-0、R4-se2-0、R2-se2-0的开销，使其cost均为1，修改开销以R1-se2-0为例：" class="headerlink" title="为了得到验证结果，我们修改R1 se2/0、R2 se3/0、R4 se3/0、R5 se3/0、R4 se2/0、R2 se2/0的开销，使其cost均为1，修改开销以R1 se2/0为例："></a>为了得到验证结果，我们修改R1 se2/0、R2 se3/0、R4 se3/0、R5 se3/0、R4 se2/0、R2 se2/0的开销，使其cost均为1，修改开销以R1 se2/0为例：</h3><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/13.png" alt="路由配置"></p><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/14.png" alt="路由配置"></p><h3 id="将目前开销情况注明在拓扑图上："><a href="#将目前开销情况注明在拓扑图上：" class="headerlink" title="将目前开销情况注明在拓扑图上："></a>将目前开销情况注明在拓扑图上：</h3><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/15.png" alt="路由配置"></p><p>此时发送从R1到R5的报文，如果报文选择R1-&gt;R2-&gt;R4-&gt;R5的路径，则说明OSPF优先级高于RIP。</p><h3 id="查看此时R1发送到R5的报文路径：-1"><a href="#查看此时R1发送到R5的报文路径：-1" class="headerlink" title="查看此时R1发送到R5的报文路径："></a>查看此时R1发送到R5的报文路径：</h3><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/16.png" alt="路由配置"></p><p>报文选择的是跳数较多但开销较少的路径R1-&gt;R2-&gt;R4-&gt;R5，验证了OSPF优先级高于RIP。</p><h3 id="我们通过关闭R1的OSPF协议，再次发送从R1到R5的报文，进一步确认路径的变换是否是因为OSPF优先级高于RIP（也可省略，但是该步骤适合实验课现场检验）"><a href="#我们通过关闭R1的OSPF协议，再次发送从R1到R5的报文，进一步确认路径的变换是否是因为OSPF优先级高于RIP（也可省略，但是该步骤适合实验课现场检验）" class="headerlink" title="我们通过关闭R1的OSPF协议，再次发送从R1到R5的报文，进一步确认路径的变换是否是因为OSPF优先级高于RIP（也可省略，但是该步骤适合实验课现场检验）"></a>我们通过关闭R1的OSPF协议，再次发送从R1到R5的报文，进一步确认路径的变换是否是因为OSPF优先级高于RIP（也可省略，但是该步骤适合实验课现场检验）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no router ospf 1</span><br></pre></td></tr></table></figure><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/17.png" alt="路由配置"></p><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/18.png" alt="路由配置"></p><p>   此时发送R1到R5的报文，如下图：</p><p>   <img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/OSPF/19.png" alt="路由配置"></p><p>   可以看到，果然如预想一般，报文选择了跳数较少的路径，从而确认了OSPF优先级高于RIP。还原到前一步配置，实验结束。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> packet-tracer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器Nginx配置实现Https域名</title>
      <link href="/2020/05/21/%E6%9C%8D%E5%8A%A1%E5%99%A8Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/"/>
      <url>/2020/05/21/%E6%9C%8D%E5%8A%A1%E5%99%A8Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="配置443端口实现https访问"><a href="#配置443端口实现https访问" class="headerlink" title="配置443端口实现https访问"></a>配置443端口实现https访问</h2><p>在http{}中加入如下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">                listen 443 ssl;</span><br><span class="line">                server_name .你的域名;</span><br><span class="line">                charset utf-8;</span><br><span class="line">                ssl_certificate     /etc/nginx/ssl/域名的crt证书;</span><br><span class="line">                ssl_certificate_key /etc/nginx/ssl/域名的key证书;</span><br><span class="line">                ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"></span><br><span class="line">                access_log /var/<span class="built_in">log</span>/nginx/nginx-uwsgi.log;</span><br><span class="line"></span><br><span class="line">                location / &#123;</span><br><span class="line">                        proxy_pass http://uwsgi;</span><br><span class="line">                        proxy_cookie_path / /; </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                location /static/ &#123;</span><br><span class="line">                        <span class="built_in">alias</span> /home/ubuntu/deployment/django_deployment/static/;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>因为我是在配置服务器启动django的时候使用的nginx所以下面的使用了一些Django使用的配置。</p><h2 id="实现80端口的转移"><a href="#实现80端口的转移" class="headerlink" title="实现80端口的转移"></a>实现80端口的转移</h2><p>因为https的监听是443端口，但是平时访问的默认是80端口，那么就是要设置80端口的转移。这时候就会有301的<code>statuscode</code>，具体的设置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">                listen 80;</span><br><span class="line">                server_name .你的域名;</span><br><span class="line">                <span class="built_in">return</span> 301 你的域名<span class="variable">$request_uri</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="尝试从浏览器进行访问"><a href="#尝试从浏览器进行访问" class="headerlink" title="尝试从浏览器进行访问"></a>尝试从浏览器进行访问</h2><p>如果通过浏览器能访问成功就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序后端Django+uWSGI部署服务器</title>
      <link href="/2020/05/16/Django-uWSGI-Nginx%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2020/05/16/Django-uWSGI-Nginx%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>因为最近在做微信小程序，然后微信小程序为了安全，需要有https的域名进行请求，所以不得不买了一个服务器和域名进行配置，下面就分享一下小程序的配置过程。现在这里推荐两个很好用的软件，一个是<a href="https://www.termius.com/">Termius</a>，用来远程访问服务器，另一个是<a href="https://winscp.net/">WinSCP，用图形界面显示服务器的文件管理器，并且支持直接将本地的文件拖动到指定文件夹。都已经附上了官网的链接，可以自行下载。温馨提示：官网可能下载速度较慢，请科学上网。</p><h2 id="Django运行"><a href="#Django运行" class="headerlink" title="Django运行"></a>Django运行</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>首先是不用说的将你在本地开发的后端代码传到服务器端，请尽量不要将后端直接拖动到主目录，新建一个文件夹然后放进去。进入你自己的Django目录，尝试直接运行Django，注意这里要使用你自己的python版本。</p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>Django有一个是<code>settings.py</code>里面有一个条目是<code>ALLOWED-HOSTS</code>,把这个改为<code>[&quot;*&quot;]</code>即允许所有的IP进行访问。</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>使用Django启动，<code>python manage.py runserver 0.0.0.0:8000</code>这样应该就已经能够通过公网IP访问后端，如果访问失败，请检查后端的启动以及log文件的正确性。请根据你的后端路由自行调试。</p><h2 id="uWSGI"><a href="#uWSGI" class="headerlink" title="uWSGI"></a>uWSGI</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先根据自己的python版本安装对应版本的uswgi</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><p>视情况使用pip3。</p><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><p>其次就是用uwsgi对Django后端进行启动，uwsgi能够较好的对这个后端的运行进行监视，并且能够实现崩溃之后的自动重启。</p><p>在manage.py的同一个目录下进行创建一个ini文件，名字随意，这里使用<code>Django-uwsgi.ini</code>作为文件名，之后打开这个文件，向文件中添加如下描述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line"><span class="built_in">chdir</span>         = /home/ubuntu/backend/wechat-ido-backend</span><br><span class="line">module        = backend.wsgi</span><br><span class="line">http-socket   = :8000</span><br><span class="line">master        = True</span><br><span class="line">processes     = 4</span><br><span class="line">threads       = 1</span><br><span class="line">vacuum        = True</span><br><span class="line">py-autoreload = 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#backend</span></span><br><span class="line"></span><br><span class="line">daemonize    = %(<span class="built_in">chdir</span>)/<span class="built_in">log</span>/uwsgi-8000.log</span><br><span class="line">log-maxsize   = 512*1024*1024</span><br><span class="line">pidfile       = %(<span class="built_in">chdir</span>)/pid/uwsgi-8000.pid</span><br></pre></td></tr></table></figure><p>这个文件规定了一些运行额参数，最下面的三行限定了log的存储位置，并允许uwsgi今后后台运行，不再占用terminal，log也会被直接存储到规定的文件。</p><p>这里要注意的是要创建pid文件夹和log文件夹，这两个文件夹创建完成之后就可以开始运行，具体命令行如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini Django-uwsgi.ini</span><br></pre></td></tr></table></figure><p>这样就启动成功了。</p><h3 id="查看运行"><a href="#查看运行" class="headerlink" title="查看运行"></a>查看运行</h3><p>首先要知道这个进程的pid，只要通过命令行进入pid文件就可以直接看到。</p><p>在项目的目录下使用命令，就可以查看现在的运行津程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps --aux|grep (pid)</span><br></pre></td></tr></table></figure><h3 id="停止运行"><a href="#停止运行" class="headerlink" title="停止运行"></a>停止运行</h3><p>最简单的方法就是在pid目录下运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --stop uwsgi-8000.pid</span><br></pre></td></tr></table></figure><p>这样就可以停止django进程的后端运行。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http请求的StatusCode的含义</title>
      <link href="/2020/05/16/http%E8%AF%B7%E6%B1%82%E7%9A%84StatusCode%E7%9A%84%E5%90%AB%E4%B9%89/"/>
      <url>/2020/05/16/http%E8%AF%B7%E6%B1%82%E7%9A%84StatusCode%E7%9A%84%E5%90%AB%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h2 id="200系"><a href="#200系" class="headerlink" title="200系"></a>200系</h2><p>201-206都表示服务器成功处理了请求的状态代码，说明网页可以正常访问。</p><ul><li><p>200（成功）  服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。</p></li><li><p>201（已创建）  请求成功且服务器已创建了新的资源。 </p></li><li><p>202（已接受）  服务器已接受了请求，但尚未对其进行处理。 </p></li><li><p>203（非授权信息）  服务器已成功处理了请求，但返回了可能来自另一来源的信息。 </p></li><li><p>204（无内容）  服务器成功处理了请求，但未返回任何内容。 </p></li><li><p>205（重置内容） 服务器成功处理了请求，但未返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如清除表单内容以输入新内容）。 </p></li><li><p>206（部分内容）  服务器成功处理了部分 GET 请求。</p></li></ul><h2 id="300系"><a href="#300系" class="headerlink" title="300系"></a>300系</h2><p>300-307表示的意思是：要完成请求，您需要进一步进行操作。通常，这些状态代码是永远重定向的。</p><ul><li><p>300（多种选择）  服务器根据请求可执行多种操作。服务器可根据请求者 来选择一项操作，或提供操作列表供其选择。 </p></li><li><p>301（永久移动）  请求的网页已被永久移动到新位置。服务器返回此响应时，会自动将请求者转到新位置。您应使用此代码通知搜索引擎蜘蛛网页或网站已被永久移动到新位置。 </p></li><li><p>302（临时移动） 服务器目前正从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。会自动将请求者转到不同的位置。但由于搜索引擎会继续抓取原有位置并将其编入索引，因此您不应使用此代码来告诉搜索引擎页面或网站已被移动。 </p></li><li><p>303（查看其他位置） 当请求者应对不同的位置进行单独的 GET 请求以检索响应时，服务器会返回此代码。对于除 HEAD 请求之外的所有请求，服务器会自动转到其他位置。 </p></li><li><p>304（未修改） 自从上次请求后，请求的网页未被修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改过，您应当将服务器配置为返回此响应。由于服务器可以告诉 搜索引擎自从上次抓取后网页没有更改过，因此可节省带宽和开销。 </p></li><li><p>305（使用代理） 请求者只能使用代理访问请求的网页。如果服务器返回此响应，那么，服务器还会指明请求者应当使用的代理。 </p></li><li><p>307（临时重定向）  服务器目前正从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。会自动将请求者转到不同的位置。但由于搜索引擎会继续抓取原有位置并将其编入索引，因此您不应使用此代码来告诉搜索引擎某个页面或网站已被移动。</p></li></ul><h2 id="400系"><a href="#400系" class="headerlink" title="400系"></a>400系</h2><p>4XXHTTP状态码表示请求可能出错，会妨碍服务器的处理。</p><ul><li><p>400（错误请求） 服务器不理解请求的语法。 </p></li><li><p>401（身份验证错误） 此页要求授权。您可能不希望将此网页纳入索引。 </p></li><li><p>403（禁止） 服务器拒绝请求。</p></li><li><p>404（未找到） 服务器找不到请求的网页。例如，对于服务器上不存在的网页经常会返回此代码。</p><pre><code>例如：https://www.icimence.cn/1，就会进入404错误页面</code></pre></li><li><p>405（方法禁用） 禁用请求中指定的方法。</p></li><li><p>406（不接受） 无法使用请求的内容特性响应请求的网页。 </p></li><li><p>407（需要代理授权） 此状态码与 401 类似，但指定请求者必须授权使用代理。如果服务器返回此响应，还表示请求者应当使用代理。 </p></li><li><p>408（请求超时） 服务器等候请求时发生超时。 </p></li><li><p>409（冲突） 服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，以及两个请求的差异列表。 </p></li><li><p>410（已删除） 请求的资源永久删除后，服务器返回此响应。该代码与 404（未找到）代码相似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。如果资源已永久删除，您应当使用 301 指定资源的新位置。 </p></li><li><p>411（需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。 </p></li><li><p>412（未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。 </p></li><li><p>413（请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。 </p></li><li><p>414（请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。 </p></li><li><p>415（不支持的媒体类型） 请求的格式不受请求页面的支持。 </p></li><li><p>416（请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态码。 </p></li><li><p>417（未满足期望值） 服务器未满足”期望”请求标头字段的要求。</p></li></ul><h2 id="500系"><a href="#500系" class="headerlink" title="500系"></a>500系</h2><p>500至505表示的意思是：服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</p><ul><li><p>500（服务器内部错误）  服务器遇到错误，无法完成请求。 </p></li><li><p>501（尚未实施） 服务器不具备完成请求的功能。例如，当服务器无法识别请求方法时，服务器可能会返回此代码。 </p></li><li><p>502（错误网关） 服务器作为网关或代理，从上游服务器收到了无效的响应。 </p></li><li><p>503（服务不可用） 目前无法使用服务器（由于超载或进行停机维护）。通常，这只是一种暂时的状态。 </p></li><li><p>504（网关超时）  服务器作为网关或代理，未及时从上游服务器接收请求。 </p></li><li><p>505（HTTP 版本不受支持） 服务器不支持请求中所使用的 HTTP 协议版本。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Packet Tracer进行模拟RIP路由回路</title>
      <link href="/2020/05/15/Packet%20Tracer%E8%BF%9B%E8%A1%8C%E6%A8%A1%E6%8B%9FRIP%E8%B7%AF%E7%94%B1%E5%9B%9E%E8%B7%AF/"/>
      <url>/2020/05/15/Packet%20Tracer%E8%BF%9B%E8%A1%8C%E6%A8%A1%E6%8B%9FRIP%E8%B7%AF%E7%94%B1%E5%9B%9E%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="拓扑文件下载"><a href="#拓扑文件下载" class="headerlink" title="拓扑文件下载"></a>拓扑文件下载</h2><p>注意：所给拓扑文件为关闭RIP水平分割后形成路由回路的拓扑，可自行打开水平分割或者联通Router1与PC1进行验证，<a href="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/RIP回路.pkt">点击下载</a></p><h2 id="1-配置路由器和PC"><a href="#1-配置路由器和PC" class="headerlink" title="1.配置路由器和PC"></a>1.配置路由器和PC</h2><div class="table-container"><table><thead><tr><th>路由器</th><th>fa0/0</th><th>s2/0</th></tr></thead><tbody><tr><td>Router0</td><td>192.168.1.1</td><td>192.168.2.1</td></tr><tr><td>Router1</td><td>192.168.3.1</td><td>192.168.2.2</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>PC</th><th>fa0/0</th><th>默认网关</th></tr></thead><tbody><tr><td>PC0</td><td>192.168.1.2</td><td>192.168.1.1</td></tr><tr><td>PC1</td><td>192.168.3.2</td><td>192.168.3.1</td></tr></tbody></table></div><p>路由器配置图如下，以Router0为例，配置fa0/0和s2/0端口并设置DCE端时钟</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/1.jpg" alt="1"></p><p>PC配置图如下，以PC0为例</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/2.png" alt="2"></p><p>拓扑图如下</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/3.png" alt="3"></p><h2 id="2-在各Router上打开RIP，配置动态跳转，下图以Router0为例"><a href="#2-在各Router上打开RIP，配置动态跳转，下图以Router0为例" class="headerlink" title="2.在各Router上打开RIP，配置动态跳转，下图以Router0为例"></a>2.在各Router上打开RIP，配置动态跳转，下图以Router0为例</h2><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/4.png" alt="4"></p><h2 id="3-在router1上查看路由表，并打开debug模式"><a href="#3-在router1上查看路由表，并打开debug模式" class="headerlink" title="3.在router1上查看路由表，并打开debug模式"></a>3.在router1上查看路由表，并打开debug模式</h2><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/5.png" alt="5"></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/6.jpg" alt="6"></p><p>可以看到路由器自动生成的路由表是没有问题的，能够正确的反应到达指定网段的跳数。</p><p>为了验证联通，我们尝试两PC互ping，结果是成功。</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/7.png" alt="7"></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/8.png" alt="8"></p><h2 id="4-关闭rip下默认开启的水平分割，并制造路由回路"><a href="#4-关闭rip下默认开启的水平分割，并制造路由回路" class="headerlink" title="4.关闭rip下默认开启的水平分割，并制造路由回路"></a>4.关闭rip下默认开启的水平分割，并制造路由回路</h2><p>下图以Router0为例</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/9.png" alt="9"></p><p>构造路由回路</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/10.png" alt="10"></p><p>这里我们采用了将交叉线撤去的方法，当然也可以将路由器相应的端口关闭。</p><h2 id="5-验证路由回路的产生"><a href="#5-验证路由回路的产生" class="headerlink" title="5.验证路由回路的产生"></a>5.验证路由回路的产生</h2><p>下图为实时模式，Router1已打开debug 模式，可以看到跳数不断累积,此时PC0 ping PC1需要很久才收到timed out的结果</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/11.jpg" alt="11"></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/12.jpg" alt="12"></p><p>模拟模式下，ICMP报文在Router0和Router1之间反复横跳</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/13.png" alt="13"></p><h2 id="6-验证RIP可以阻止路由回路的产生"><a href="#6-验证RIP可以阻止路由回路的产生" class="headerlink" title="6.验证RIP可以阻止路由回路的产生"></a>6.验证RIP可以阻止路由回路的产生</h2><p>打开水平分割，以Router0为例</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/14.png" alt="14"></p><p>静待一段时间让整个网络的学习过程进行一轮，其实就是等待Router1告诉整个网络<code>192.168.3.0</code>网段不可达，然后再次尝试PC0 ping PC1，很快收到结果</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/15.jpg" alt="15"></p><p>模拟模式视角</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/RIP/16.jpg" alt="15"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> packet-tracer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GitHub仓库作为高速OSS的方法</title>
      <link href="/2020/05/11/%E4%BD%BF%E7%94%A8GitHub%E4%BB%93%E5%BA%93%E4%BD%9C%E4%B8%BA%E9%AB%98%E9%80%9FOSS%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2020/05/11/%E4%BD%BF%E7%94%A8GitHub%E4%BB%93%E5%BA%93%E4%BD%9C%E4%B8%BA%E9%AB%98%E9%80%9FOSS%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>由于一些奇怪的原因，国内的用户访问GitHub是非常缓慢的，而且有时候又要使用OSS服务。明明可以使用GitHub进行的功能却要买国内的OSS服务就感觉有点憋屈。下面提供一种方法将GitHub作为高速的OSS，就算是国内用户也能告诉访问，并且全球的用户都能以较快的速度访问你的下载内容。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>其实就是使用了第三方提供的免费的cdn服务。</p><h2 id="何为CDN"><a href="#何为CDN" class="headerlink" title="何为CDN"></a>何为CDN</h2><p>CDN的全称是<code>Content Delivery Network</code>，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。(词条来自百度百科)，说人话就是通过将请求发送到离请求的发出地址最近的服务器来加速全球范围内的访问速度。</p><h2 id="JsDelivr"><a href="#JsDelivr" class="headerlink" title="JsDelivr"></a>JsDelivr</h2><p>这是一个第三方的免费cdn服务，可以提供GitHub、npm和WP的加速服务。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>将你原来的GitHub的文件的地址链接改为如下格式：<code>https://cdn.jsdelivr.net/gh/user/repo@version/file</code>如果你只有一个master分支就不需要进行标注version，通过这个链接地址进行的访问速度是比较快的，在国内也基本上能做到较快载入。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这只是本人发现的一条图床的捷径，我不知道这么做是不是违反什么规则，还是建议大家如果有一定的经济能力还是购买国内的OSS吧，还是非常便宜的，如果上述内容出现了任何问题，或者是表述不当，或是这种方法是不被允许的请第一时间通过留言或者发邮件告知我，谢谢。</p>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> JsDelivr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RIP跳转导致路由回路的原因分析</title>
      <link href="/2020/05/08/RIP%E8%B7%B3%E8%BD%AC%E5%AF%BC%E8%87%B4%E8%B7%AF%E7%94%B1%E5%9B%9E%E8%B7%AF%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/"/>
      <url>/2020/05/08/RIP%E8%B7%B3%E8%BD%AC%E5%AF%BC%E8%87%B4%E8%B7%AF%E7%94%B1%E5%9B%9E%E8%B7%AF%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp;&emsp;这就是个作业，你就放过我吧！</p><h2 id="什么是路由回路和慢收敛"><a href="#什么是路由回路和慢收敛" class="headerlink" title="什么是路由回路和慢收敛"></a>什么是路由回路和慢收敛</h2><p>&emsp;&emsp;首先要明确的就是每个路由器在正常的配置完成了动态路由跳转之后都有一个<code>Routing Table</code>上面记载着到目标网段的跳数。如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/router_table.png" alt="Routing Table"></p><p>这时候会出现意外情况，比如说C路由器连接的10.4.0.0网段突然炸了，不能进行访问了，C路由器中就会直接采取协议的标准将C抵达该网段的跳数设置为不可达，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/router_table_2.png" alt="Routing Table"></p><p>关键在这里就发生了问题，就是RIP的协议采用的是定时更新而不是触发更新，所以发生问题的C路由器决定再下一次的通信过程中将这个不幸的消息告诉他的伙伴，但是问题是他的伙伴和他通信的时候他会发现他的邻近的伙伴是可以抵达10.4.0.0网段的，这时候他发现路由器B的Routing Table中有信息说他只用1跳就能抵达目标网段，然后在路由器B将信息发给她之后他就直接还给路由器B，路由器B收到了路由器C的Routing Table，又更新了他的列表，然后就导致了循环往复，看不懂的可以直接看下面几幅图，比较直观：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/router_table_3.png" alt="Routing Table"></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/router_table_4.png" alt="Routing Table"></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/router_table_5.png" alt="Routing Table"></p><p>上面就解释了路由回路是怎么产生的，就是这个过程被称为是慢收敛，因为路由器的整个系统得知一个网段不可达的时间会非常的长。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>个人在看完了所有的办法后感觉水平分割和触发更新都是比较好的解决方法，毒性逆转是一个比较难实现但是也是一种较好的选择，但是剩下的两种个人感觉在效率有点低的同时实现的过程有点过于复杂。当然这都只是个人观点，本人还在学习过程中，如果出现了谬误，希望大佬们能够在本篇文章的评论区告诉我，谢谢！</p><h3 id="办法一：定义最大跳数"><a href="#办法一：定义最大跳数" class="headerlink" title="办法一：定义最大跳数"></a>办法一：定义最大跳数</h3><p>这个方法十分容易理解，实际上现在的有一些RIP协议就是这样设计的，通过最大跳数，当所有的路由器都抵达这个跳数或者是报文的TTL为零是就知道这个网段不可达。</p><h3 id="办法二：水平分割"><a href="#办法二：水平分割" class="headerlink" title="办法二：水平分割"></a>办法二：水平分割</h3><p>这个名词听起来十分的深奥，但是实际上理解起来非常简单，就是禁止路由选择协议回传路由选择信息，也就是路由器从某个接口接收到的更新信息不允许再从这个接口发回去。这里已经找到了相应的命令行，先行放在这里：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Router rip</span><br><span class="line">passive-interfase f 0/0</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="办法三：毒性逆转"><a href="#办法三：毒性逆转" class="headerlink" title="办法三：毒性逆转"></a>办法三：毒性逆转</h3><p>就是将不可达的网段的跳数设置为16，当其他路由器接收到这个跳数的时候会直接进行抛弃，不会等待其老化时间到。</p><h3 id="办法四：触发更新"><a href="#办法四：触发更新" class="headerlink" title="办法四：触发更新"></a>办法四：触发更新</h3><p>这个在前文件提到了，在网段连接出现问题的第一时间就直接通知整个网络内的路由，这个网段已经不能访问，解决慢收敛的问题。</p><h3 id="办法五：Hold-Down定时器"><a href="#办法五：Hold-Down定时器" class="headerlink" title="办法五：Hold-Down定时器"></a>办法五：Hold-Down定时器</h3><p>目前完全看不懂这个方法在讲什么。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://wenku.baidu.com/view/7fdbfc8a6e1aff00bed5b9f3f90f76c660374c4b.html">https://wenku.baidu.com/view/7fdbfc8a6e1aff00bed5b9f3f90f76c660374c4b.html</a></p><p><a href="https://blog.csdn.net/weixin_42682806/article/details/84635279">https://blog.csdn.net/weixin_42682806/article/details/84635279</a></p><p><a href="https://wenku.baidu.com/view/146c6a6b5acfa1c7aa00cc33.html">https://wenku.baidu.com/view/146c6a6b5acfa1c7aa00cc33.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> packet-tracer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序+Django后端真机调试</title>
      <link href="/2020/05/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-Django%E5%90%8E%E7%AB%AF%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/"/>
      <url>/2020/05/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-Django%E5%90%8E%E7%AB%AF%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp;&emsp;在我开发的过程中碰到了因为要真机调试并且要使用后端返回的数据。所以我试了试怎么在本地的局域网的环境下进行真机调试。首先前提条件是<code>需要手机和电脑连在同一个WiFi网络环境下</code></p><h2 id="后端调整"><a href="#后端调整" class="headerlink" title="后端调整"></a>后端调整</h2><p>首先要在当前系统下使用<code>ipconfig /all</code>查看电脑在本地的局域网IP，直接使用他推荐的那个。然后再后端的<code>settings.py</code>文件中的<code>ALLOWED_HOSTS</code>属性调整如下：<code>ALLOWED_HOSTS = [&#39;localhost&#39;, &#39;0.0.0.0:8000&#39;, &#39;你电脑的局域网IP&#39;,&#39;127.0.0.1&#39;]</code></p><h2 id="前端调整"><a href="#前端调整" class="headerlink" title="前端调整"></a>前端调整</h2><p>改变前端的请求地址，改为自己刚刚搜索到的电脑的局域网IP。前端就只用调整这些。</p><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>后端的命令行启动的时候使用命令行<code>python manage.py runserver 0.0.0.0:8000</code>，8000是默认端口号，如果需要可以自行修改。</p>]]></content>
      
      
      <categories>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫xpath解析</title>
      <link href="/2020/05/05/Python%E7%88%AC%E8%99%ABxpath%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/05/05/Python%E7%88%AC%E8%99%ABxpath%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp;&emsp;上篇文章挖了个坑说要解释爬虫的程序，那就找时间填上了，其实Python的爬虫十分的简单，基本上只有要有一个模板，就可以了，这里恬不知耻的推广一下<a href="https://icimence.cn/2020/05/04/%E8%B1%86%E7%93%A3%E5%9B%BE%E4%B9%A6%E7%88%AC%E8%99%AB/">我的模板</a>，我的这个爬虫前面的两个准备文件比较完善，可以直接套用，提高爬虫的安全性。</p><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><h3 id="url的获取"><a href="#url的获取" class="headerlink" title="url的获取"></a>url的获取</h3><p>作为爬虫肯定要知道哪一个网址是目标，然后进行观察，网址是不是有翻页的能力，有的话翻页的能力在url上是怎么体现的，总结出翻页的时候url的变化规律，根据这个规律在你的爬虫中先自己生成一个或者是一组的请求url这就是第一步</p><h3 id="爬取内容"><a href="#爬取内容" class="headerlink" title="爬取内容"></a>爬取内容</h3><p>我使用的是Python提供的request和lxml包中的etree。当你确定了你的url之后使用python的<code>request</code>获取这个网页的数据。然后使用etree对网页的内容进行解析。这两个步骤的代码比较简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = requests.get(url, headers=headers, proxies=proxies)  <span class="comment"># 此处是请求</span></span><br><span class="line">html = etree.HTML(data.text)  <span class="comment"># 网页的解析</span></span><br></pre></td></tr></table></figure><h3 id="xpath的使用"><a href="#xpath的使用" class="headerlink" title="xpath的使用"></a>xpath的使用</h3><p>这个才是爬虫的真正的精髓，通过python提供的解析其实非常容易实现。这里只解释非常常用的几种语法，至于所有的<code>xpath</code>语法，可以<a href="https://www.w3school.com.cn/xpath/xpath_syntax.asp">参考这个网页</a>。</p><ol><li><p>选取一个元素的所有子节点就是直接使用</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html.xpath(<span class="string">&quot;nodename&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>从根节点选取</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html.xpath(<span class="string">&quot;/nodename&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>从一个节点中选取所有的同名子节点</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html.xpath(<span class="string">&quot;/nodename/nodename2&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>从匹配选择的当前节点选择所有规定名字的节点，而不考虑它们的位置。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html.xpath(<span class="string">&quot;//nodename&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>选取某个节点的属性</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html.xpath(<span class="string">&quot;/nodename/@src&quot;</span>) <span class="comment"># 选取nodename节点的src属性值</span></span><br></pre></td></tr></table></figure></li><li><p>选取某个节点的内容</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html.xpath(<span class="string">&quot;/nodename/text()&quot;</span>) <span class="comment"># 选取nodename中的内容</span></span><br></pre></td></tr></table></figure></li><li><p>筛选具有某个属性特定值的节点</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html.xpath(<span class="string">&quot;/nodename@[src=&quot;</span>https://icimence.cn<span class="string">&quot;]&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><p>这些基本上是比较常用的，详细的还是看上文给出的链接即可。</p><h2 id="Json数据格式打包"><a href="#Json数据格式打包" class="headerlink" title="Json数据格式打包"></a>Json数据格式打包</h2><p>这部分就是普通的代码模板，直接放代码吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> book_name, book_img, author_name, press, press_year, pages, price, ISBN, score, number_reviewers, introduction <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">    book_name, book_img, author_name, press, press_year, pages, price, ISBN, score, number_reviewers, introduction):</span><br><span class="line">    result = &#123;</span><br><span class="line">        <span class="string">&quot;book_name&quot;</span>: book_name,</span><br><span class="line">        <span class="string">&quot;book_img&quot;</span>: book_img,</span><br><span class="line">        <span class="string">&quot;author_name&quot;</span>: author_name,</span><br><span class="line">        <span class="string">&quot;press&quot;</span>: press,</span><br><span class="line">        <span class="string">&quot;press_year&quot;</span>: press_year,</span><br><span class="line">        <span class="string">&quot;pages&quot;</span>: pages,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: price,</span><br><span class="line">        <span class="string">&quot;ISBN&quot;</span>: ISBN,</span><br><span class="line">        <span class="string">&quot;score&quot;</span>: score,</span><br><span class="line">        <span class="string">&quot;number_reviewers&quot;</span>: number_reviewers,</span><br><span class="line">        <span class="string">&quot;introduction&quot;</span>: introduction</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&emsp;&emsp;结合上文的介绍和上一篇文章的模板，相信有一定Python基础的人都能写出一个较为实用的爬虫程序了，你可以开始自己的创作了！</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>豆瓣图书爬虫</title>
      <link href="/2020/05/04/%E8%B1%86%E7%93%A3%E5%9B%BE%E4%B9%A6%E7%88%AC%E8%99%AB/"/>
      <url>/2020/05/04/%E8%B1%86%E7%93%A3%E5%9B%BE%E4%B9%A6%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp;&emsp;因为在小程序的开发过程中用到了python的爬虫就在这里写下来了，以后的爬虫可以把这个作为一个模板。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="User-py"><a href="#User-py" class="headerlink" title="User.py"></a>User.py</h3><p>这个文件的存在是为了生成不同的请求头，这个UserAgent就是一个用户代理，每个浏览器都会有的，爬虫如果不加这个UserAgent，会被网页默认为不通过浏览器来访问，认为是机器，就会限制访问，防止因为被服务器识别为机器人导致IP被封。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getuser</span>():</span></span><br><span class="line">    <span class="comment"># 由于频繁的访问，所以做了多个访问头，防止因为被识别为机器访问导致IP被封</span></span><br><span class="line">    USER_AGENTS = [</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 &quot;</span></span><br><span class="line">        <span class="string">&quot;Safari/537.36 Core/1.53.4295.400 &quot;</span></span><br><span class="line">        <span class="comment"># Opera</span></span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 &quot;</span></span><br><span class="line">        <span class="string">&quot;OPR/26.0.1656.60&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Opera/8.0 (Windows NT 5.1; U; en)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 5.1; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.50&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.50&quot;</span>,</span><br><span class="line">        <span class="comment"># Firefox</span></span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10&quot;</span>,</span><br><span class="line">        <span class="comment"># Safari</span></span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2&quot;</span>,</span><br><span class="line">        <span class="comment"># chrome</span></span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.133 Safari/534.16&quot;</span>,</span><br><span class="line">        <span class="comment"># 360</span></span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko&quot;</span>,</span><br><span class="line">        <span class="comment"># 淘宝浏览器</span></span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11&quot;</span>,</span><br><span class="line">        <span class="comment"># 猎豹浏览器</span></span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)&quot;</span>,</span><br><span class="line">        <span class="comment"># QQ浏览器</span></span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&quot;</span>,</span><br><span class="line">        <span class="comment"># sogou浏览器</span></span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; SE 2.X MetaSr 1.0)&quot;</span>,</span><br><span class="line">        <span class="comment"># maxthon浏览器</span></span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Maxthon/4.4.3.4000 Chrome/30.0.1599.101 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="comment"># UC浏览器</span></span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 UBrowser/4.0.3214.0 Safari/537.36&quot;</span>,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">    user_agent = random.choice(USER_AGENTS)</span><br><span class="line">    <span class="keyword">return</span> user_agent</span><br></pre></td></tr></table></figure><h3 id="proxy-py"><a href="#proxy-py" class="headerlink" title="proxy.py"></a>proxy.py</h3><p>这个文件使用了代理，使用高匿名性的IP进行访问，不使用自己的IP进行爬虫访问，防止因为机器识别造成意外，也提高了访问的安全性。提供了两种代理方法，可以自己进行选择。这部分用来存动态代理的ip信息，因为有的网站当你用同一个ip获取大量数据以后且速度很快，也会认为这是机器在进行操作，而不属于用户的正常访问，此时ip被禁，就连访问网页也不能了，所以得使用动态代理，让网站认为是不同的ip访问，免费的代理网站有好几个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 快代理</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml.html <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.kuaidaili.com/free/inha/6&#x27;</span>  <span class="comment"># 快代理</span></span><br><span class="line">data = requests.get(url)</span><br><span class="line">html = etree.HTML(data.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用代理，使用匿名性高的IP地址进行访问防止IP被封</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找xpath</span></span><br><span class="line">ip_xpath = <span class="string">&#x27;//*[@id=&quot;list&quot;]/table/tbody/tr/td[1]/text()&#x27;</span></span><br><span class="line">port_xpath = <span class="string">&#x27;//*[@id=&quot;list&quot;]/table/tbody/tr/td[2]/text()&#x27;</span></span><br><span class="line">http_or_https_xpath = <span class="string">&#x27;//*[@id=&quot;list&quot;]/table/tbody/tr/td[4]/text()&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配内容</span></span><br><span class="line">ip_list = html.xpath(ip_xpath)</span><br><span class="line">port_list = html.xpath(port_xpath)</span><br><span class="line">http_or_https_list = html.xpath(http_or_https_xpath)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行组合</span></span><br><span class="line">list_zip = <span class="built_in">zip</span>(ip_list, port_list, http_or_https_list)</span><br><span class="line">proxy_dict = &#123;&#125;</span><br><span class="line">proxy_list = []</span><br><span class="line"><span class="keyword">for</span> ip, port, http_or_https <span class="keyword">in</span> list_zip:</span><br><span class="line">    proxy_dict[http_or_https] = <span class="string">f&#x27;<span class="subst">&#123;ip&#125;</span>:<span class="subst">&#123;port&#125;</span>&#x27;</span></span><br><span class="line">    proxy_list.append(proxy_dict)</span><br><span class="line">    proxy_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 西刺代理</span></span><br><span class="line"><span class="comment"># import re</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># import requests</span></span><br><span class="line"><span class="comment"># from bs4 import BeautifulSoup</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># import user</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># import random</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def getListProxies():</span></span><br><span class="line"><span class="comment">#     session = requests.session()</span></span><br><span class="line"><span class="comment">#     headers = &#123;&#x27;User-Agent&#x27;: user.getuser()&#125;</span></span><br><span class="line"><span class="comment">#     proxies = random.choice(proxy_list)</span></span><br><span class="line"><span class="comment">#     page = session.get(&quot;http://www.xicidaili.com/nn/2&quot;, headers = headers,proxies = proxies)#西刺代理</span></span><br><span class="line"><span class="comment">#     soup = BeautifulSoup(page.text, &#x27;lxml&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     proxyList = []</span></span><br><span class="line"><span class="comment">#     taglist = soup.find_all(&#x27;tr&#x27;, attrs=&#123;&#x27;class&#x27;: re.compile(&quot;(odd)|()&quot;)&#125;)</span></span><br><span class="line"><span class="comment">#     for trtag in taglist:</span></span><br><span class="line"><span class="comment">#         tdlist = trtag.find_all(&#x27;td&#x27;)</span></span><br><span class="line"><span class="comment">#         proxy = &#123;&#x27;http&#x27;: tdlist[1].string + &#x27;:&#x27; + tdlist[2].string&#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         proxyList.append(proxy)</span></span><br><span class="line"><span class="comment">#         # 设定代理ip个数</span></span><br><span class="line"><span class="comment">#         if len(proxyList) &gt;= 20:</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     return proxyList</span></span><br></pre></td></tr></table></figure><h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><p>这个就是主程序，里面的注释已经十分完善了，就不再赘述，以后找时间再出一个Xpath的解析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> recommend.proxy</span><br><span class="line"><span class="keyword">import</span> recommend.user <span class="keyword">as</span> user</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getResqutes</span>(<span class="params">tag, num</span>):</span></span><br><span class="line">    urlRequest = <span class="string">&quot;&quot;</span></span><br><span class="line">    result_list = []</span><br><span class="line">    <span class="comment"># filename = tag + &quot;.json&quot;</span></span><br><span class="line">    <span class="comment"># with open(filename, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) as file:</span></span><br><span class="line">    <span class="comment">#     file.write(&quot;[&quot;)</span></span><br><span class="line">    <span class="keyword">if</span> tag[<span class="number">0</span>] == <span class="string">&#x27;%&#x27;</span>:</span><br><span class="line">        urlRequest = <span class="string">&quot;https://book.douban.com/tag/&quot;</span> + urllib.parse.quote(tag) + <span class="string">&quot;?start=&#123;&#125;&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        urlRequest = <span class="string">&quot;https://book.douban.com/tag/&quot;</span> + tag + <span class="string">&quot;?start=&#123;&#125;&quot;</span></span><br><span class="line">    <span class="comment"># 获取诗词类图书的请求</span></span><br><span class="line">    <span class="comment"># urls = [urlRequest.format(str(i)) for i in</span></span><br><span class="line">    <span class="comment">#         range(0, 1000, 20)]</span></span><br><span class="line">    <span class="comment"># # 豆瓣分类图书每页20本，搜索一千本，每次搜索完一页，数字加20表示跳转到下一页继续搜索</span></span><br><span class="line">    url = urlRequest.<span class="built_in">format</span>((<span class="built_in">str</span>(random.randint(<span class="number">1</span>, <span class="number">50</span>) * <span class="number">20</span>)))</span><br><span class="line">    <span class="comment">#    for url in urls</span></span><br><span class="line">    <span class="comment"># 每搜索1页20本书更换一次请求头信息和代理ip</span></span><br><span class="line">    <span class="comment"># 动态设置请求头信息</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: user.getuser()&#125;</span><br><span class="line">    <span class="comment"># 动态设置代理ip信息</span></span><br><span class="line">    <span class="type">List</span> = recommend.proxy.proxy_list</span><br><span class="line">    proxies = random.choice(<span class="type">List</span>)</span><br><span class="line">    <span class="comment"># 打印搜索时代理ip信息</span></span><br><span class="line">    <span class="built_in">print</span>(proxies)</span><br><span class="line">    data = requests.get(url, headers=headers, proxies=proxies)  <span class="comment"># 此处是请求</span></span><br><span class="line">    html = etree.HTML(data.text)  <span class="comment"># 网页的解析</span></span><br><span class="line">    count = html.xpath(<span class="string">&quot;//li[@class=&#x27;subject-item&#x27;]&quot;</span>) <span class="comment"># count是一个页面中的20本书的一个列表，一共20项，下面可以写循环进行抓取。</span></span><br><span class="line">    info = count[random.randint(<span class="number">0</span>, <span class="number">20</span>)]</span><br><span class="line">    <span class="comment"># 把页面获取的详情页面的信息转化成字符串link作为下面请求的url，有些网页比如京东在转化成字符串的同时需要在前面拼接&quot;https://&quot;</span></span><br><span class="line">    link = <span class="string">&#x27;&#x27;</span>.join(info.xpath(<span class="string">&quot;div[2]/h2/a/@href&quot;</span>))</span><br><span class="line">    <span class="comment"># 每爬取一本书线程休息随机时间，模拟人类行为</span></span><br><span class="line">    time.sleep(random.random())</span><br><span class="line">    <span class="comment"># 控制台输出书籍详情页地址，便于观察爬取过程中的bug</span></span><br><span class="line">    <span class="built_in">print</span>(link)</span><br><span class="line">    <span class="comment"># author_name在类别页获取，因为详情页每个页面的作者对应的块位置不同，存在获取不到作者情况，导致书籍信息获取失败</span></span><br><span class="line">    <span class="comment"># author_name =&#x27;&#x27;.join(info.xpath(&quot;div[2]/div[1]/text()&quot;)[0].split(&#x27;/&#x27;)[0]).replace(&quot; &quot;,&quot;&quot;)</span></span><br><span class="line">    <span class="comment"># print(author_name)</span></span><br><span class="line">    <span class="comment"># author_name = author_name.split()</span></span><br><span class="line">    link_data = requests.get(link, headers=headers, proxies=proxies)</span><br><span class="line">    html = etree.HTML(link_data.text)</span><br><span class="line">    <span class="comment"># 书名</span></span><br><span class="line">    book_name = html.xpath(<span class="string">&quot;//*[@id=&#x27;mainpic&#x27;]/a/@title&quot;</span>)</span><br><span class="line">    <span class="comment"># 图片url</span></span><br><span class="line">    book_img = html.xpath(<span class="string">&quot;//*[@id=&#x27;mainpic&#x27;]/a/img/@src&quot;</span>)</span><br><span class="line">    <span class="comment"># 作者信息，因为不同页面位置不同做判断</span></span><br><span class="line">    author_name = html.xpath(<span class="string">&quot;//*[@id=&#x27;info&#x27;]/span[1]/a/text()&quot;</span>)</span><br><span class="line">    temp = <span class="string">&#x27;&#x27;</span>.join(html.xpath(<span class="string">&quot;//*[@id=&#x27;info&#x27;]/span[1]/a/text()&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> temp <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="built_in">len</span>(temp) == <span class="number">0</span>:</span><br><span class="line">        author_name = html.xpath(<span class="string">&quot;//*[@id=&#x27;info&#x27;]/a[1]/text()&quot;</span>)</span><br><span class="line">        <span class="comment"># 作者人数大于1时候用/分隔，并去除多余空格和换行符</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(author_name) &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> author_name:</span><br><span class="line">            <span class="built_in">sum</span> += (<span class="built_in">str</span>(item) + <span class="string">&quot;/&quot;</span>)</span><br><span class="line">            author_name = <span class="built_in">sum</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        author_name = author_name</span><br><span class="line">    author_name = <span class="string">&quot;&quot;</span>.join(author_name)</span><br><span class="line">    author_name = author_name.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    author_name = author_name.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    author_name = author_name.split()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 出版社</span></span><br><span class="line">    press = html.xpath(<span class="string">u&#x27;//span[./text()=&quot;出版社:&quot;]/following::text()[1]&#x27;</span>)</span><br><span class="line">    <span class="comment"># 出版年</span></span><br><span class="line">    press_year = html.xpath(<span class="string">u&#x27;//span[./text()=&quot;出版年:&quot;]/following::text()[1]&#x27;</span>)</span><br><span class="line">    <span class="comment"># 页数</span></span><br><span class="line">    pages = html.xpath(<span class="string">u&#x27;//span[./text()=&quot;页数:&quot;]/following::text()[1]&#x27;</span>)</span><br><span class="line">    <span class="comment"># 价格</span></span><br><span class="line">    price = html.xpath(<span class="string">u&#x27;//span[./text()=&quot;定价:&quot;]/following::text()[1]&#x27;</span>)</span><br><span class="line">    <span class="comment"># 图书ISBN</span></span><br><span class="line">    ISBN = html.xpath(<span class="string">u&#x27;//span[./text()=&quot;ISBN:&quot;]/following::text()[1]&#x27;</span>)</span><br><span class="line">    <span class="comment"># 评分</span></span><br><span class="line">    score = html.xpath(<span class="string">&quot;//*[@id=&#x27;interest_sectl&#x27;]/div/div[2]/strong/text()&quot;</span>)</span><br><span class="line">    <span class="comment"># 评价人数</span></span><br><span class="line">    number_reviewers = html.xpath(<span class="string">&quot;//*[@id=&#x27;interest_sectl&#x27;]/div/div[2]/div/div[2]/span/a/span/text()&quot;</span>)</span><br><span class="line">    <span class="comment"># 图书简介</span></span><br><span class="line">    introduction = html.xpath(<span class="string">&quot;//*[@class=&#x27;intro&#x27;]/p/text()&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> book_name, book_img, author_name, press, press_year, pages, price, ISBN, score, number_reviewers, introduction <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">            book_name, book_img, author_name, press, press_year, pages, price, ISBN, score, number_reviewers,</span><br><span class="line">            introduction):</span><br><span class="line">        result = &#123;</span><br><span class="line">            <span class="string">&quot;book_name&quot;</span>: book_name,</span><br><span class="line">            <span class="string">&quot;book_img&quot;</span>: book_img,</span><br><span class="line">            <span class="string">&quot;author_name&quot;</span>: author_name,</span><br><span class="line">            <span class="string">&quot;press&quot;</span>: press,</span><br><span class="line">            <span class="string">&quot;press_year&quot;</span>: press_year,</span><br><span class="line">            <span class="string">&quot;pages&quot;</span>: pages,</span><br><span class="line">            <span class="string">&quot;price&quot;</span>: price,</span><br><span class="line">            <span class="string">&quot;ISBN&quot;</span>: ISBN,</span><br><span class="line">            <span class="string">&quot;score&quot;</span>: score,</span><br><span class="line">            <span class="string">&quot;number_reviewers&quot;</span>: number_reviewers,</span><br><span class="line">            <span class="string">&quot;introduction&quot;</span>: introduction</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">        result_list.append(result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        <span class="comment"># 以json形式保存输出结果</span></span><br><span class="line">        <span class="comment"># with open(filename, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) as file:</span></span><br><span class="line">        <span class="comment">#     file.write(json.dumps(result, ensure_ascii=False) + &#x27;,&#x27; + &#x27;\n&#x27;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&emsp;&emsp;这个Python的爬虫是我通过改动一个CSDN博客上的爬虫实现的，这个爬虫功能上已经是十分强大，基本上能爬到图书的全部信息，能够直接处理中文的标签，能够处理经过html转义的标签，返回时使用的是json数据格式同时支持对json文件直接进行写入，在注释中有对应的代码。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>原文链接：<a href="https://blog.csdn.net/qq_41821963/article/details/105446196">https://blog.csdn.net/qq_41821963/article/details/105446196</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub进行git操作反复要求输入密码解决方法</title>
      <link href="/2020/05/01/GitHub%E8%BF%9B%E8%A1%8Cgit%E6%93%8D%E4%BD%9C%E5%8F%8D%E5%A4%8D%E8%A6%81%E6%B1%82%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2020/05/01/GitHub%E8%BF%9B%E8%A1%8Cgit%E6%93%8D%E4%BD%9C%E5%8F%8D%E5%A4%8D%E8%A6%81%E6%B1%82%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="原因说明"><a href="#原因说明" class="headerlink" title="原因说明"></a>原因说明</h2><p>出现这个情况的原因是使用了https进行clone而没有使用ssh方式，在GitHub的clone按钮处很容易找到并且切换这里不再作演示。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在自己的电脑本地生成一个ssh key，并将这个key添加到你的GitHub账户中去。</p><h3 id="生成方法"><a href="#生成方法" class="headerlink" title="生成方法"></a>生成方法</h3><p>在gitbash命令行中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>接下来会弹出提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/你的用户名/.ssh/id_rsa): //这里可以自定义ssh的本地文件的保存路径</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): //通常不设置，按enter跳过即可</span><br><span class="line">Enter same passphrase again:   //通常不设置，按enter跳过即可</span><br></pre></td></tr></table></figure><p>说明一下这里的passphrase是你的本地控制的密码，如果进行了设置，那么在每一次进行版本变更的时候都会要求输入，所以一般不设置。</p><p>而第一行的文件保存路径默认是括号中的内容，找到这目录，用记事本打开一个叫做<code>id_rsa.pub</code>的文件，里面就是你生成的密钥。</p><h3 id="添加SSHKEY到你的GitHub账户"><a href="#添加SSHKEY到你的GitHub账户" class="headerlink" title="添加SSHKEY到你的GitHub账户"></a>添加SSHKEY到你的GitHub账户</h3><p>登陆你的GitHub账户进入账户设置，找到<code>SSH and GPG keys</code>点开后，将你刚才在本地生成的密钥添加进去，就可以了。但是注意在<code>git clone</code>的时候使用ssh方式也就是clone地址开头是<code>git@GitHub.com</code>。</p><h2 id="测试成功"><a href="#测试成功" class="headerlink" title="测试成功"></a>测试成功</h2>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> SSH_KEY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法之堆排序</title>
      <link href="/2020/05/01/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/05/01/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="堆排序原理"><a href="#堆排序原理" class="headerlink" title="堆排序原理"></a>堆排序原理</h2><p>&emsp;&emsp;堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。</p><h2 id="第一步-构造初始堆"><a href="#第一步-构造初始堆" class="headerlink" title="第一步 构造初始堆"></a>第一步 构造初始堆</h2><ol><li>假设给定无序序列结构如下</li></ol><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/heap1.png" alt="初始堆"></p><ol><li>此时我们从最后一个非叶子结点开始（叶结点自然不用调整，第一个非叶子结点 <code>arr.length/2-1=5/2-1=1</code>，也就是下面的6结点），从左至右，从下至上进行调整。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/heap2.png" alt="调整堆"></p><ol><li>找到第二个非叶节点4，由于[4,9,8]中9元素最大，4和9交换。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/heap3.png" alt="调整堆"></p><ol><li>这时，交换导致了子根[4,5,6]结构混乱，继续调整，[4,5,6]中6最大，交换4和6。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/heap4.png" alt="调整堆"></p><h2 id="第二步-得到完整的排序序列"><a href="#第二步-得到完整的排序序列" class="headerlink" title="第二步 得到完整的排序序列"></a>第二步 得到完整的排序序列</h2><p>将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。</p><ol><li>将堆顶元素9和末尾元素4进行交换</li></ol><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/heap5.png" alt="交换堆顶和堆的末尾"></p><ol><li>重新调整结构，使其继续满足堆定义</li></ol><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/heap6.png" alt="调整符合堆定义"></p><ol><li>再将堆顶元素8与末尾元素5进行交换，得到第二大元素8.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/heap7.png" alt="交换堆顶和堆尾"></p><ol><li>后续过程，继续进行调整，交换，如此反复进行，最终使得整个序列有序</li></ol><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/heap8.png" alt="最终结果"></p><h2 id="总结思路"><a href="#总结思路" class="headerlink" title="总结思路"></a>总结思路</h2><ol><li><p>将无需序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆;</p></li><li><p>将堆顶元素与末尾元素交换，将最大元素”沉”到数组末端;</p></li><li><p>重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序。</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sortdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by chengxiao on 2016/12/17.</span></span><br><span class="line"><span class="comment"> * 堆排序demo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> []arr = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> []arr)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.构建大顶堆</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=arr.length/<span class="number">2</span>-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="comment">//从第一个非叶子结点从下至上，从右至左调整结构</span></span><br><span class="line">            adjustHeap(arr,i,arr.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.调整堆结构+交换堆顶元素与末尾元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=arr.length-<span class="number">1</span>;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">            swap(arr,<span class="number">0</span>,j);<span class="comment">//将堆顶元素与末尾元素进行交换</span></span><br><span class="line">            adjustHeap(arr,<span class="number">0</span>,j);<span class="comment">//重新对堆进行调整</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调整大顶堆（仅是调整过程，建立在大顶堆已构建的基础上）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span> []arr,<span class="keyword">int</span> i,<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];<span class="comment">//先取出当前元素i</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=i*<span class="number">2</span>+<span class="number">1</span>;k&lt;length;k=k*<span class="number">2</span>+<span class="number">1</span>)&#123;<span class="comment">//从i结点的左子结点开始，也就是2i+1处开始</span></span><br><span class="line">            <span class="keyword">if</span>(k+<span class="number">1</span>&lt;length &amp;&amp; arr[k]&lt;arr[k+<span class="number">1</span>])&#123;<span class="comment">//如果左子结点小于右子结点，k指向右子结点</span></span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr[k] &gt;temp)&#123;<span class="comment">//如果子节点大于父节点，将子节点值赋给父节点（不用进行交换）</span></span><br><span class="line">                arr[i] = arr[k];</span><br><span class="line">                i = k;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = temp;<span class="comment">//将temp值放到最终的位置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> []arr,<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=arr[a];</span><br><span class="line">        arr[a] = arr[b];</span><br><span class="line">        arr[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&emsp;&emsp;堆排序是一种选择排序，整体主要由构建初始堆+交换堆顶元素和末尾元素并重建堆两部分组成。其中构建初始堆经推导复杂度为O(n)，在交换并重建堆的过程中，需交换n-1次，而重建堆的过程中，根据完全二叉树的性质，[log2(n-1),log2(n-2)…1]逐步递减，近似为nlogn。所以堆排序时间复杂度一般认为就是O(nlogn)级。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>原文链接：<a href="https://www.cnblogs.com/chengxiao/p/6129630.html">https://www.cnblogs.com/chengxiao/p/6129630.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法之二分法排序</title>
      <link href="/2020/04/30/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%88%86%E6%B3%95%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/04/30/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%88%86%E6%B3%95%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>&emsp;&emsp;因为平时不是很常用二分法排序，但是有时候会有要求使用二分法排序，所以就把板子放在这里可以直接参考，照着这个样子可以进行适当的改动。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>&emsp;&emsp;这里用一个整数数组进行示范，比较清晰明了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">76</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">49</span>, <span class="number">78</span>, <span class="number">34</span>, <span class="number">12</span>, <span class="number">64</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];  <span class="comment">//要插入的第i个元素</span></span><br><span class="line">            <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> high = i - <span class="number">1</span>; <span class="comment">//插入目标元素的前 i-1 个元素</span></span><br><span class="line">            <span class="keyword">int</span> mid = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">                mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (arr[mid] &gt; temp) &#123;</span><br><span class="line">                    high = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 元素相同时，也插入在后面的位置</span></span><br><span class="line">                    low = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 目标位置 之后的元素 整体移动一位</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= low; j--) &#123;</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[low] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length ; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>原文链接：<a href="https://blog.csdn.net/love_gzd/java/article/details/81516847">https://blog.csdn.net/love_gzd/java/article/details/81516847</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WechatApp技术笔记之Tab页（三）</title>
      <link href="/2020/04/25/WechatApp%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0%E4%B9%8BTab%E9%A1%B5%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2020/04/25/WechatApp%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0%E4%B9%8BTab%E9%A1%B5%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="微信小程序Tab页"><a href="#微信小程序Tab页" class="headerlink" title="微信小程序Tab页"></a>微信小程序Tab页</h2><p>我们能够经常看到小程序的页面是这样的布局格式。</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/wechat/tab.png" alt="tab"></p><p>但是在实现过程中有一点麻烦，所以就写出来供参考。</p><h2 id="页面wxml代码"><a href="#页面wxml代码" class="headerlink" title="页面wxml代码"></a>页面wxml代码</h2><p>下面的这段代码是只是实现了前三个页面的内容，包括了一些滚动条的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标签页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;swiper-tab&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;swiper-tab-list &#123;&#123;currentTab==0 ? &#x27;on&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span> <span class="attr">data-current</span>=<span class="string">&quot;0&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;swichNav&quot;</span>&gt;</span>未支付<span class="tag">&lt;/<span class="name">view</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;swiper-tab-list &#123;&#123;currentTab==1 ? &#x27;on&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span> <span class="attr">data-current</span>=<span class="string">&quot;1&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;swichNav&quot;</span>&gt;</span>已支付<span class="tag">&lt;/<span class="name">view</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;swiper-tab-list &#123;&#123;currentTab==2 ? &#x27;on&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span> <span class="attr">data-current</span>=<span class="string">&quot;2&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;swichNav&quot;</span>&gt;</span>已取消<span class="tag">&lt;/<span class="name">view</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;swiper-tab-list &#123;&#123;currentTab==3 ? &#x27;on&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span> <span class="attr">data-current</span>=<span class="string">&quot;3&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;swichNav&quot;</span>&gt;</span>已完成<span class="tag">&lt;/<span class="name">view</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;swiper-tab-list &#123;&#123;currentTab==4 ? &#x27;on&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span> <span class="attr">data-current</span>=<span class="string">&quot;4&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;swichNav&quot;</span>&gt;</span>待评价<span class="tag">&lt;/<span class="name">view</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;swiper-tab-list &#123;&#123;currentTab==5 ? &#x27;on&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span> <span class="attr">data-current</span>=<span class="string">&quot;5&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;swichNav&quot;</span>&gt;</span>已评价<span class="tag">&lt;/<span class="name">view</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>  <span class="attr">class</span>=<span class="string">&quot;tab-content&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 收入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">scroll-y</span>=<span class="string">&quot;true&quot;</span> <span class="attr">bindscrolltolower</span>=<span class="string">&quot;loadIncome&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-list-content &#123;&#123;currentTab==0?&#x27;active&#x27;:&#x27;&#x27;&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;tab-list-item&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;inList&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;tab-list-item-detail&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.style&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;tab-list-item-after&quot;</span>&gt;</span>&#123;&#123;item.coin&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;tab-list-item-time&quot;</span>&gt;</span>&#123;&#123;item.time&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">&quot;&#123;&#123;isHidenLoadMore&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">loading</span> <span class="attr">type</span>=<span class="string">&quot;circle&quot;</span>&gt;</span>加载中<span class="tag">&lt;/<span class="name">loading</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">scroll-y</span>=<span class="string">&quot;true&quot;</span> <span class="attr">bindscrolltolower</span>=<span class="string">&quot;loadOutlay&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-list-content &#123;&#123;currentTab==1?&#x27;active&#x27;:&#x27;&#x27;&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;tab-list-item&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;outList&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;tab-list-item-detail&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.style&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;tab-list-item-after&quot;</span>&gt;</span>&#123;&#123;item.coin&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;tab-list-item-time&quot;</span>&gt;</span>&#123;&#123;item.time&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">&quot;&#123;&#123;isHidenLoadMore&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">loading</span> <span class="attr">type</span>=<span class="string">&quot;circle&quot;</span>&gt;</span>加载中<span class="tag">&lt;/<span class="name">loading</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 已取消 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;tab-list-content &#123;&#123;currentTab==2?&#x27;active&#x27;:&#x27;&#x27;&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>111<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="wxss代码"><a href="#wxss代码" class="headerlink" title="wxss代码"></a>wxss代码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.swiper-tab</span>&#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;  </span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#dadada</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;  </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">70</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fad73f</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.swiper-tab-list</span>&#123;  </span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30</span>rpx;  </span><br><span class="line">  <span class="attribute">display</span>: inline-block;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16%</span>;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.on</span>&#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="built_in">rgb</span>(<span class="number">58</span>, <span class="number">186</span>, <span class="number">248</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">58</span>, <span class="number">186</span>, <span class="number">248</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-content</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">234</span>, <span class="number">234</span>, <span class="number">239</span>);</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">24</span>rpx;</span><br><span class="line">  <span class="comment">/* margin-top:368rpx; */</span></span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">85</span>rpx;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-list-content</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-list-content</span><span class="selector-class">.active</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-list-item</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">16</span>rpx <span class="number">24</span>rpx;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">229</span>, <span class="number">246</span>, <span class="number">253</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-list-item-detail</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-list-item-after</span>&#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-list-item-time</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">136</span>, <span class="number">136</span>, <span class="number">136</span>);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/me-customer/me-customer.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">isHidenLoadMore</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">currentTab</span>:<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">      <span class="attr">inList</span>: [&#123; <span class="attr">style</span>: <span class="string">&#x27;签到&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+100&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;分享美文&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+500&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;签到&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+100&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;分享美文&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+500&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;签到&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+100&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;分享美文&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+500&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;签到&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+100&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;分享美文&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+500&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;签到&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+100&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;分享美文&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+500&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;签到&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+100&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;分享美文&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+500&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;],</span><br><span class="line"></span><br><span class="line">      <span class="attr">outList</span>: [&#123; <span class="attr">style</span>: <span class="string">&#x27;兑换礼品&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-1000&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;兑换礼品&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-50000&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;兑换礼品&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-1000&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;兑换礼品&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-50000&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;兑换礼品&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-1000&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;兑换礼品&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-50000&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;兑换礼品&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-1000&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;兑换礼品&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-50000&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;兑换礼品&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-1000&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;兑换礼品&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-50000&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;兑换礼品&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-1000&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;兑换礼品&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-50000&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;兑换礼品&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-1000&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;兑换礼品&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-50000&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * 滑动切换tab  </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="attr">bindChange</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">    that.setData(&#123; <span class="attr">currentTab</span>: e.detail.current &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onPullDownRefresh</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.showNavigationBarLoading()</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// complete</span></span><br><span class="line">      wx.hideNavigationBarLoading() <span class="comment">//完成停止加载</span></span><br><span class="line">      wx.stopPullDownRefresh() <span class="comment">//停止下拉刷新</span></span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/** </span></span><br><span class="line"><span class="comment">   * 点击tab切换 </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">swichNav</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.data.currentTab === e.target.dataset.current) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      that.setData(&#123;</span><br><span class="line">        <span class="attr">currentTab</span>: e.target.dataset.current</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">loadIncome</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;收入&quot;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(e);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">      <span class="keyword">var</span> maxNum = <span class="number">1000</span>; <span class="comment">//最多可加载条目</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> newList = [&#123; <span class="attr">style</span>: <span class="string">&#x27;签到&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+50&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;分享美文&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+300&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;,&#123; <span class="attr">style</span>: <span class="string">&#x27;签到&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+50&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;,&#123; <span class="attr">style</span>: <span class="string">&#x27;签到&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+50&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;,&#123; <span class="attr">style</span>: <span class="string">&#x27;签到&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+50&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;,&#123; <span class="attr">style</span>: <span class="string">&#x27;签到&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+50&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;,&#123; <span class="attr">style</span>: <span class="string">&#x27;签到&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+50&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;,&#123; <span class="attr">style</span>: <span class="string">&#x27;签到&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+50&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> inList = that.data.inList;</span><br><span class="line">      <span class="keyword">if</span> (inList.length &lt; maxNum) &#123;</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">              <span class="attr">isHidenLoadMore</span>: <span class="literal">false</span><span class="comment">//显示“加载符”</span></span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> newList) &#123;</span><br><span class="line">              inList.push(val);</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//模拟请求延迟个过程，实际可以不用要setTimeout</span></span><br><span class="line">              that.setData(&#123;</span><br><span class="line">                  <span class="attr">isHidenLoadMore</span>: <span class="literal">true</span>,</span><br><span class="line">                  <span class="attr">inList</span>: inList</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;, <span class="number">2000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">loadOutlay</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;支出&quot;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(e);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">      <span class="keyword">var</span> maxNum = <span class="number">50</span>; <span class="comment">//最多可加载条目</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> newList = [&#123; <span class="attr">style</span>: <span class="string">&#x27;签到&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-150&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;分享美文&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;-600&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> outList = that.data.outList;</span><br><span class="line">      <span class="keyword">if</span> (outList.length &lt; maxNum) &#123;</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">              <span class="attr">isHidenLoadMore</span>: <span class="literal">false</span><span class="comment">//显示“加载符”</span></span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> newList) &#123;</span><br><span class="line">              outList.push(val);</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//模拟请求延迟个过程，实际可以不用要setTimeout</span></span><br><span class="line">              that.setData(&#123;</span><br><span class="line">                  <span class="attr">isHidenLoadMore</span>: <span class="literal">true</span>,</span><br><span class="line">                  <span class="attr">outList</span>: outList</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;, <span class="number">2000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReachBottom</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">      <span class="keyword">var</span> maxNum = <span class="number">30</span>; <span class="comment">//最多可加载条目</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> newList = [&#123; <span class="attr">style</span>: <span class="string">&#x27;签到&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+50&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;01:49:46&#x27;</span> &#125;, &#123; <span class="attr">style</span>: <span class="string">&#x27;分享美文&#x27;</span>, <span class="attr">coin</span>: <span class="string">&#x27;+300&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;05:49:46&#x27;</span> &#125;];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> inList = that.data.inList;</span><br><span class="line">      <span class="keyword">if</span> (inList.length &lt; maxNum) &#123;</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">              <span class="attr">isHidenLoadMore</span>: <span class="literal">false</span><span class="comment">//显示“加载符”</span></span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> newList) &#123;</span><br><span class="line">              inList.push(val);</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//模拟请求延迟个过程，实际可以不用要setTimeout</span></span><br><span class="line">              that.setData(&#123;</span><br><span class="line">                  <span class="attr">isHidenLoadMore</span>: <span class="literal">true</span>,</span><br><span class="line">                  <span class="attr">inList</span>: inList</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;, <span class="number">2000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这个代码可以直接作为模板使用，同时有了下拉刷新的功能。</p>]]></content>
      
      
      <categories>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（转载）WechatApp开发笔记之UI（二）</title>
      <link href="/2020/04/23/WechatApp%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%E4%B9%8BUI%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/04/23/WechatApp%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%E4%B9%8BUI%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>&emsp;&emsp;本章节将以一个具体的小程序界面为例，介绍前端页面开发的知识和技巧，前面几章讲过的内容将不再赘述。本文章转自<b><a href="http://nandodu.cn/2020/04/22/wechat3/">NanDoDu</a></b>。</p><h2 id="绘制界面原型"><a href="#绘制界面原型" class="headerlink" title="绘制界面原型"></a><strong>绘制界面原型</strong></h2><p>&emsp;&emsp;在绘制界面原型之前，我们需要先以文档的形式，将页面功能点陈列出来，此处省略这一步骤，直接进入界面原型设计的讲解。</p><h3 id="绘制工具"><a href="#绘制工具" class="headerlink" title="绘制工具"></a>绘制工具</h3><p>&emsp;&emsp;界面原型设计的工具因人而异，我采用的是Photoshop，特点就是麻烦，对，因为当时不知道<a href="https://modao.cc/downloads">墨刀</a>之类的专业界面原型设计工具。</p><h3 id="绘制要点（偏向于Ps）"><a href="#绘制要点（偏向于Ps）" class="headerlink" title="绘制要点（偏向于Ps）"></a>绘制要点（偏向于Ps）</h3><ul><li><p>界面原型设计力求一步到位（否则就可能像我一样，反反复复重写.wxss文件）</p></li><li><p>多参考好的界面设计，集大成</p></li><li><p>Ps一定要保存原有图层</p></li><li><p>Ps导出.png图片时，如果是对已有图案的修改，直接覆盖，避免同类图片冗余</p></li><li><p>大量的矢量图标都不需要自己绘制（这也是血的教训，自己画的图标又不标准又耗时），登录 <a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a> 进行搜索下载</p></li><li><p>一般的界面设计都能通过编程实现，只有难易之分，所以设计时不要顾虑太多后期的实现策略（但是动态背景或者听起来就比较高级的还是先放一放，开发前期还是着力搭建框架）</p></li><li><p>界面原型设计的画布采用与微信开发小程序预览界面相同像素大小，对于之后的编程只有好处没有坏处（否则你就只能像我一样，疯狂修改.wxss里的数据，一次次地真机调试，浪费了大量时间）</p></li></ul><h2 id="界面前端编程"><a href="#界面前端编程" class="headerlink" title="界面前端编程"></a><strong>界面前端编程</strong></h2><p>&emsp;&emsp;新建界面的要点在上一章已经讲得很清楚，我们从已经初始化页面配置开始讲起。</p><h3 id="设置页面背景"><a href="#设置页面背景" class="headerlink" title="设置页面背景"></a>设置页面背景</h3><h4 id="1-修改背景颜色"><a href="#1-修改背景颜色" class="headerlink" title="1. 修改背景颜色"></a>1. 修改背景颜色</h4><p>&emsp;&emsp;小程序页面默认背景颜色是白色，如果我们要改变当前页面的背景色，打开newpage.wxss进行修改：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">page &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: whitesmoke;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;小程序支持两种颜色代码，一种是图示的颜色英文名称，另一种是十六进制代码，使用Ps的同学可以直接在Ps调色板中获取到所需颜色的十六进制代码。</p><h4 id="2-修改背景图片"><a href="#2-修改背景图片" class="headerlink" title="2. 修改背景图片"></a>2. 修改背景图片</h4><p>&emsp;&emsp;小程序背景图片的添加有些特殊，本地的图片一般是不能直接作为背景图片，当我们添加了本地图片作为背景时，图片无法显示，以及会出现如下报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pages/newpage/newpage.wxss 中的本地资源图片无法通过 WXSS 获取，可以使用网络图片，或者 base64，或者使用&lt;image/&gt;标签。请参考文档：https://developers.weixin.qq.com/miniprogram/dev/qa.html#%E6%9C%AC%E5%9C%B0%E8%B5%84%E6%BA%90%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87-wxss-%E8%8E%B7%E5%8F%96</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;对于这种情况，最好的解决办法是将本地图片上传到oss，获取图片的url，写入.wxss中，但是如果我们坚持使用本地图片，则需要在.js文件中输入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把base64转换成图片</span></span><br><span class="line">  <span class="function"><span class="title">getBase64ImageUrl</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取到base64Data</span></span><br><span class="line">    <span class="keyword">var</span> base64Data = data;</span><br><span class="line">    <span class="comment">/// 通过微信小程序自带方法将base64转为二进制去除特殊符号，再转回base64</span></span><br><span class="line">    base64Data = wx.arrayBufferToBase64(wx.base64ToArrayBuffer(base64Data));</span><br><span class="line">    <span class="comment">/// 拼接请求头，data格式可以为image/png或者image/jpeg等，看需求</span></span><br><span class="line">    <span class="keyword">const</span> base64ImgUrl = <span class="string">&quot;data:image/png;base64,&quot;</span> + base64Data;</span><br><span class="line">    <span class="comment">/// 刷新数据</span></span><br><span class="line">    <span class="comment">// console.log(base64ImgUrl)</span></span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      <span class="attr">baseImgUrl</span>:base64ImgUrl</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样就能将我们的本地图片转化成base64，判断成功的依据是，重新编译时出现弹窗，选中我们的背景图片，系统会自动生成一段编码（非常非常长），这时将我们原背景图片地址替换成这段编码，即可显示在我们的小程序中。（但是我后来在用的时候发现有的时候没有弹窗也没有报错，实在是不推荐这种方式）</p><h4 id="3-设置多层次的页面背景"><a href="#3-设置多层次的页面背景" class="headerlink" title="3. 设置多层次的页面背景"></a>3. 设置多层次的页面背景</h4><p>&emsp;&emsp;有时，我们并不想页面呈现一个简单的图片，而是希望多种图片叠加在一起，形成组合样式，那么我们将要用到view这一工具来实现我们的想法，在.wxml文件中输入下述代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">&#x27;page&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">&#x27;image1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">&#x27;image2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里我们只是简单构建了三个view，外层view和内层的两个view，内层的两个view用来装我们的图片，外层view用来控制内层view的分布。在.wxss文件中输入下述代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.image1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">750</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">750</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这时我们会看到背景中出现一蓝一红矩形框，两个矩形框大小相同，纵向分布。对于两个矩形的布局可参考前一章讲的弹性盒子布局，而如果我们想要实现下方的红色矩形框覆盖一部分上方的蓝色矩形框，可通过margin这一利器实现：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.image1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">750</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">750</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">100</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们将会看到红色矩形框向上移动了100rpx。对于参数的调节，我建议初学者多调多试，在不了解页面属性的时候，通过简单的改变数值来得到自己想要的效果。</p><blockquote><p>这里需要特别强调的一点是，我们在页面布局时，如果是纵向布局，我们应采用横向开发，即调整好当前行的内容及样式后，再进行下一行的开发。我踩的一个大坑就是急于布局，将纵向框架搭好然后填充内容，结果填充的时候发现预留尺寸出现问题，当然如果前期界面原型设计准确的话，也可以采用先搭整体框架再开发的方法。</p></blockquote><h3 id="设置元素样式"><a href="#设置元素样式" class="headerlink" title="设置元素样式"></a>设置元素样式</h3><h4 id="1-元素样式基本配置"><a href="#1-元素样式基本配置" class="headerlink" title="1. 元素样式基本配置"></a>1. 元素样式基本配置</h4><p>&emsp;&emsp;为什么这一章会单独提一下这个问题，是因为我在开发过程中总是会无意地漏掉一些元素的基本属性配置，导致出现不期的效果，而迟迟找不到原因，浪费了很多时间。对于内层view元素（即view中不再嵌套view），我们通常需要如下样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.image2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;尤其需要注意我们要优先设置元素的宽和高，比如我前面举的红蓝矩形块的例子，如果不设置宽高，就会看不到颜色块。另外，对于文字以及图片独有的样式配置，不在此赘述，有需要的样式在网上查找资料就好了。而对于外层view元素（即view中嵌套view），我们通常需要如下样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pageid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;  // 设置图片样式时需注意</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;尤其需要注意，这些属性的配置我虽然在上一章写过，但是整体大小（height）的配置仍然是很容易被忽略掉的。</p><h4 id="2-美化元素样式"><a href="#2-美化元素样式" class="headerlink" title="2. 美化元素样式"></a>2. 美化元素样式</h4><p>&emsp;&emsp;元素样式的美化通常是通过设置css属性，但对于初学者而言，对css属性设置了解较少，以及对多种属性搭配的效果把握不好，因此我建议很多看似需要多重view嵌套的部分可以直接用Ps封装代替。</p><p>&emsp;&emsp;比如我们需要实现一个按钮，那么按钮大概有以下几种样式需要实现：未按按钮时按钮的文字样式和背景图片样式，按了按钮之后的文字样式和背景图片样式，文字样式和背景图片样式的布局。那么对于按钮这种固定样式，我们最好采用贴图的方式，在Ps中直接绘制未按和已按的两种按钮样式，并保留图片原格式以及导出.png文件，加载到小程序页面中。注意，小程序是支持image标签直接引用本地图片的，这一点要和背景图片区分。</p><p>&emsp;&emsp;再比如我们要实现某种特殊字体，导入字体包固然是一种方式，但如果是仅改变标题或者一些固定出现的字的话，也可以考虑采用Ps贴图的方式快速实现。</p><h4 id="3-元素显示与隐藏"><a href="#3-元素显示与隐藏" class="headerlink" title="3. 元素显示与隐藏"></a>3. 元素显示与隐藏</h4><p>&emsp;&emsp;元素的显示与隐藏是小程序前端开发的核心知识，对于初学者的开发很有用处。我们在实现页面跳转的时候，很多时候是当前页面跳到当前页面，也就是说，我们只希望当前页面的一些部分发生变化，而页面本身还是原来的页面。那此时我们需要搞明白变化的到底是什么，其实是view的替换。举前面红蓝矩形块的例子，我们希望点击红色矩形块，下方的蓝色矩形块变成一个绿色的圆。那么我们其实原本就有三个view元素，红色矩形块、蓝色矩形块、绿色的圆，只是我们未点击红色矩形块时，蓝色矩形块显示，绿色圆隐藏；点击之后，蓝色矩形块隐藏，绿色圆显示。关于这一块内容，我将在以后的章节中详细讲解，此处我只给出网上查找的实例代码，初学者可以通过模仿代码结构来实现自己想要的效果：</p><p>.wxml文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;switch-type&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;btn &#123;&#123;currentSelectTripType == &#x27;pinche&#x27; ? &#x27;active&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;selectedPinche&#x27;</span> <span class="attr">data-id</span>=<span class="string">&#x27;pinche&#x27;</span>&gt;</span>拼车<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;btn &#123;&#123;currentSelectTripType == &#x27;baoche&#x27; ? &#x27;active&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;selectedBaoche&#x27;</span> <span class="attr">data-id</span>=<span class="string">&#x27;baoche&#x27;</span>&gt;</span>包车<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">currentSelectTripType</span>: <span class="string">&#x27;pinche&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 更新data 切换选中状态</span></span><br><span class="line">  <span class="attr">selectedPinche</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      <span class="attr">currentSelectTripType</span>: e.currentTarget.dataset.id</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">selectedBaoche</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      <span class="attr">currentSelectTripType</span>: e.currentTarget.dataset.id</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>.wxss文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.switch-type</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.switch-type</span> <span class="selector-class">.btn</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-bottom-right-radius</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.switch-type</span> <span class="selector-class">.btn</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-bottom-left-radius</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.switch-type</span> <span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#dfdfdf</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10</span>rpx <span class="number">40</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.switch-type</span> <span class="selector-class">.btn</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2</span>rpx solid <span class="number">#007bff</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原文 <a href="https://www.shiqidu.com/d/469">https://www.shiqidu.com/d/469</a></p><p>转载地址 <a href="http://nandodu.cn">http://nandodu.cn</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ant Design of Vue学习笔记（一）</title>
      <link href="/2020/04/22/Ant%20Design%20of%20Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/22/Ant%20Design%20of%20Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;在自己的项目开发和学习过程中使用Vue是十分频繁的，所以就把学习的过程写在这里方便查看。另外，还是声明，最好的参考文档一定是官方的文档。下面给两个官方文档的连接，有什么问题可以到里面字寻找。<br /><b><a href="https://cn.vuejs.org/v2/guide/">Vue官方文档</a></b><br /><b><a href="https://www.antdv.com/docs/vue/introduce-cn/">Ant Design of Vue官方文档</a></b></p><h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-modal</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:visible</span>=<span class="string">&quot;addCouponVisible&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">title</span>=<span class="string">&quot;添加优惠策略&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">cancelText</span>=<span class="string">&quot;取消&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">okText</span>=<span class="string">&quot;确定&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">cancel</span>=<span class="string">&quot;cancel&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">ok</span>=<span class="string">&quot;handleSubmit&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里是添加策略模态框区域，请编写表单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-form</span> <span class="attr">:form</span>=<span class="string">&quot;form&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 30px&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;formItemLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a-form-item</span> <span class="attr">label</span>=<span class="string">&quot;优惠券类型&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;formItemLayout&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a-select</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">v-decorator</span>=<span class="string">&quot;[</span></span></span><br><span class="line"><span class="string"><span class="tag">                    &#x27;type&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">                    &#123; rules: [&#123; required: true, message: &#x27;请选择优惠券类型&#x27; &#125;] &#125;]&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a-select-option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>生日优惠<span class="tag">&lt;/<span class="name">a-select-option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a-select-option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>多间优惠<span class="tag">&lt;/<span class="name">a-select-option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a-select-option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>满减优惠<span class="tag">&lt;/<span class="name">a-select-option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a-select-option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>限时优惠<span class="tag">&lt;/<span class="name">a-select-option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a-select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a-form-item</span> <span class="attr">label</span>=<span class="string">&quot;券名&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;formItemLayout&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a-input</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">placeholder</span>=<span class="string">&quot;请填写券名&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">v-decorator</span>=<span class="string">&quot;[&#x27;name&#x27;, &#123; rules: [&#123; required: true, message: &#x27;请填写券名&#x27; &#125;] &#125;]&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a-form-item</span> <span class="attr">label</span>=<span class="string">&quot;优惠简介&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;formItemLayout&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a-textarea</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">placeholder</span>=<span class="string">&quot;请填写优惠简介&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">:rows</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">v-decorator</span>=<span class="string">&quot;[&#x27;description&#x27;, &#123; rules: [&#123; required: true, message: &#x27;请填写优惠简介&#x27; &#125;] &#125;]&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a-form-item</span> <span class="attr">label</span>=<span class="string">&quot;达标金额&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;formItemLayout&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a-input</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">placeholder</span>=<span class="string">&quot;请填写达标金额&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">v-decorator</span>=<span class="string">&quot;[&#x27;targetMoney&#x27;, &#123; rules: [&#123; required: true, message: &#x27;请填写达标金额&#x27; &#125;] &#125;]&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a-form-item</span> <span class="attr">label</span>=<span class="string">&quot;优惠金额&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;formItemLayout&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a-input</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">placeholder</span>=<span class="string">&quot;请填写优惠金额&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">v-decorator</span>=<span class="string">&quot;[&#x27;discountMoney&#x27;, &#123; rules: [&#123; required: true, message: &#x27;请填写优惠金额&#x27; &#125;] &#125;]&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> &#123; mapGetters, mapMutations, mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;addCouponModal&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">formItemLayout</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">labelCol</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">xs</span>: &#123; <span class="attr">span</span>: <span class="number">12</span> &#125;,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">sm</span>: &#123; <span class="attr">span</span>: <span class="number">6</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">wrapperCol</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">xs</span>: &#123; <span class="attr">span</span>: <span class="number">24</span> &#125;,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">sm</span>: &#123; <span class="attr">span</span>: <span class="number">16</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">            ...mapGetters([</span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;activeHotelId&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;addCouponVisible&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            ])</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 表单名默认为“form”</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.form = <span class="built_in">this</span>.$form.createForm(<span class="built_in">this</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;addCouponModal&#x27;</span> &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            ...mapMutations([</span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;set_addCouponVisible&#x27;</span></span></span><br><span class="line"><span class="javascript">            ]),</span></span><br><span class="line"><span class="javascript">            ...mapActions([</span></span><br><span class="line"><span class="javascript">                <span class="comment">// addHotelCoupon：添加酒店策略接口</span></span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;addHotelCoupon&#x27;</span></span></span><br><span class="line"><span class="javascript">            ]),</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">cancel</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.set_addCouponVisible(<span class="literal">false</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.form=<span class="literal">null</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">changeType</span>(<span class="params">v</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>( v == <span class="string">&#x27;3&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.$message.warning(<span class="string">&#x27;请实现&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">handleSubmit</span>(<span class="params">e</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                e.preventDefault();</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.form.validateFieldsAndScroll(<span class="function">(<span class="params">err, values</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (!err) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">const</span> data = &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 这里添加接口参数</span></span></span><br><span class="line"><span class="javascript">                            <span class="attr">type</span>: <span class="built_in">this</span>.form.getFieldValue(<span class="string">&#x27;type&#x27;</span>),</span></span><br><span class="line"><span class="javascript">                            <span class="attr">name</span>: (<span class="built_in">this</span>.form.getFieldValue(<span class="string">&#x27;name&#x27;</span>)),</span></span><br><span class="line"><span class="javascript">                            <span class="attr">description</span>: (<span class="built_in">this</span>.form.getFieldValue(<span class="string">&#x27;description&#x27;</span>)),</span></span><br><span class="line"><span class="javascript">                            <span class="attr">targetMoney</span>: <span class="built_in">Number</span>(<span class="built_in">this</span>.form.getFieldValue(<span class="string">&#x27;targetMoney&#x27;</span>)),</span></span><br><span class="line"><span class="javascript">                            <span class="attr">discountMoney</span>: <span class="built_in">Number</span>(<span class="built_in">this</span>.form.getFieldValue(<span class="string">&#x27;discountMoney&#x27;</span>)),</span></span><br><span class="line"><span class="javascript">                            <span class="attr">hotelId</span>:<span class="built_in">Number</span>(<span class="built_in">this</span>.activeHotelId),</span></span><br><span class="line"><span class="javascript">                            <span class="attr">status</span>:<span class="number">1</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.addHotelCoupon(data)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明一下这段代码，就是这个的确是form的代码，但是下面的script代码请自行添加，结构较为清晰我就直接放在这里，也不做特殊解释了，基本上都是直接能看懂的。</p><p>然后唯一的稍稍难懂一点的就是后面的数据传回的部分，关于这个部分可以看看后端的接口或者是直接看database中的示例，然后从form中进行获取就可以了。</p><h2 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h2><p>&emsp;&emsp;Table的实现还是比较魔幻的，我现在还不是非常知道为什么能够做到动态的数据读取和显示。直接给代码吧。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-modal</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:visible</span>=<span class="string">&quot;couponVisible&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">title</span>=<span class="string">&quot;优惠策略&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;900px&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:footer</span>=<span class="string">&quot;null&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">cancel</span>=<span class="string">&quot;cancel&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里是模态框内容区域，请编写列表代码与添加策略按钮 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addCoupon&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">type</span>=<span class="string">&quot;plus&quot;</span>/&gt;</span></span><br><span class="line">                    添加优惠策略</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a-table</span> <span class="attr">:dataSource</span>=<span class="string">&quot;couponList&quot;</span> <span class="attr">:columns</span>=<span class="string">&quot;columns&quot;</span> <span class="attr">bordered</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a-tag</span> <span class="attr">slot</span>=<span class="string">&quot;couponName&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;couponName&quot;</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>&#123;&#123;couponName&#125;&#125;<span class="tag">&lt;/<span class="name">a-tag</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-modal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AddCoupon</span>&gt;</span><span class="tag">&lt;/<span class="name">AddCoupon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后如果有人知道这个为什么能够做到后端数据的联通请<strong>留言告诉我</strong>。现在猜测的是有可能是Vue的datasource的自动获取和匹配。</p><h2 id="作业中用到的js知识点"><a href="#作业中用到的js知识点" class="headerlink" title="作业中用到的js知识点"></a>作业中用到的js知识点</h2><ul><li><p>现在知道的就是js中的赋值可以通过commit函数传参实现。</p><p>  例如将res传递给一个列表可以写作<code>commit(&#39;set_couponList&#39;,res)</code></p><p>  再例如将一个窗口显示属性设置为隐藏就可以<code>commit(&#39;set_addCouponVisible&#39;,false)</code></p></li><li><p>还有就是和commit高度相似的dispatch函数，这个函数是处理异步操作的，简单来说就是dispatch调用的应该是actions中的方法，而commit用的是mutations中的方法。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论常用公式（持续更新）</title>
      <link href="/2020/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2020/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="S-1第一章"><a href="#S-1第一章" class="headerlink" title="$\S$1第一章"></a>$\S$1第一章</h2><h3 id="S-1-1条件概率"><a href="#S-1-1条件概率" class="headerlink" title="$\S$1.1条件概率"></a>$\S$1.1条件概率</h3><script type="math/tex; mode=display">P(B|A)=\frac{P(AB)}{P(A)}</script><p>&emsp;扩展可得</p><script type="math/tex; mode=display">P(\bigcup^{\infty}_{i=1} B_i|A)=\sum_{i=1}^{\infty} P(B_i|A)</script><h3 id="S-1-2全概率公式"><a href="#S-1-2全概率公式" class="headerlink" title="$\S$1.2全概率公式"></a>$\S$1.2全概率公式</h3><script type="math/tex; mode=display">P(A)=P(A|B_1)P(B_1)+P(A|B_2)P(B_2)+···+P(A|B_n)P(B_n)</script><h3 id="S-1-3贝叶斯公式"><a href="#S-1-3贝叶斯公式" class="headerlink" title="$\S$1.3贝叶斯公式"></a>$\S$1.3贝叶斯公式</h3><script type="math/tex; mode=display">P(B_i|A)=\frac{P(B_iA)}{P(A)}=\frac{P(A|B_i)P(B_i)}{\sum\nolimits^n_{j=1}P(A|B_j)P(B_j)},j=1,2,···,3</script><h2 id="S-2第二章"><a href="#S-2第二章" class="headerlink" title="$\S$2第二章"></a>$\S$2第二章</h2><h3 id="S-2-1伯努利实验"><a href="#S-2-1伯努利实验" class="headerlink" title="$\S$2.1伯努利实验"></a>$\S$2.1伯努利实验</h3><p>&emsp;&emsp;需要注意n重伯努利试验结果是二项分布。</p><h3 id="S-2-2二项分布"><a href="#S-2-2二项分布" class="headerlink" title="$\S$2.2二项分布"></a>$\S$2.2二项分布</h3><p>&emsp;&emsp;记为 $X\sim b(n,p)$</p><script type="math/tex; mode=display">P\{X=k\}=C_n^kp^kq^{n-k},k=0,1,2,···,n</script><h3 id="S-2-3泊松分布"><a href="#S-2-3泊松分布" class="headerlink" title="$\S$2.3泊松分布"></a>$\S$2.3泊松分布</h3><p>&emsp;&emsp;记为$X \sim\pi(\lambda)$</p><script type="math/tex; mode=display">P\{X=k\}=\frac{\lambda^ke^{-k}}{k!}</script><h4 id="S-2-3-1泊松定理"><a href="#S-2-3-1泊松定理" class="headerlink" title="$\S$2.3.1泊松定理"></a>$\S$2.3.1泊松定理</h4><p>&emsp;&emsp;设$\lambda&gt;0$是一个常数，n是任意正整数，设$np_n=\lambda$，则对于任何一固定的非负整数k，有：</p><script type="math/tex; mode=display">\lim_{n \to \infty}C_n^kp_n^k(1-p_n)^{n-k}=\frac{\lambda^ke^{-k}}{k!}</script><h3 id="S-2-4分布函数"><a href="#S-2-4分布函数" class="headerlink" title="$\S$2.4分布函数"></a>$\S$2.4分布函数</h3><p>&emsp;&emsp;<strong>定义</strong>&emsp;设X是一个随机变量，x是任意实数，函数</p><script type="math/tex; mode=display">F(x)=P\{X\leq x\},-\infty<x<\infty</script><p>称为X的<strong>分布函数</strong></p><h3 id="S-2-5概率密度函数"><a href="#S-2-5概率密度函数" class="headerlink" title="$\S$2.5概率密度函数"></a>$\S$2.5概率密度函数</h3><p>&emsp;&emsp;如果对于随机变量X的分布函数F(x)，存在非负可积函数f(x)，使对于任意实数x有</p><script type="math/tex; mode=display">F(x) = \int^x_{-\infty}f(t)dt</script><p>则称X为<strong>连续性随机变量</strong>，f(x)成为X的<strong>概率密度函数</strong>，简称<strong>概率密度</strong></p><h3 id="S-2-6-均匀分布"><a href="#S-2-6-均匀分布" class="headerlink" title="$\S$2.6 均匀分布"></a>$\S$2.6 均匀分布</h3><p>&emsp;&emsp;若连续型随机变量$X$具有概率密度</p><script type="math/tex; mode=display">f(n)=\begin{cases}\frac{1}{b-a}, & a<x<b \\0, & \mbox{其他}\end{cases}</script><p>则称$X$在区间(a,b)上服从<strong>均匀分布</strong>，记为$X \sim U(a,b)$</p><h3 id="S-2-7指数分布"><a href="#S-2-7指数分布" class="headerlink" title="$\S$2.7指数分布"></a>$\S$2.7指数分布</h3><p>&emsp;&emsp;若连续性随机变量$X$的概率密度为</p><script type="math/tex; mode=display">f(x)=\begin{cases}\frac{1}{\theta}e^{-\frac{x}{\theta}}, & x>0 \\0, & \mbox{其他}\end{cases}</script><p>其中$\theta&gt;0$为常数，则称$X$为服从参数$\theta$的<strong>指数分布</strong></p><h3 id="S-2-8正态分布"><a href="#S-2-8正态分布" class="headerlink" title="$\S$2.8正态分布"></a>$\S$2.8正态分布</h3><p>&emsp;&emsp;若连续性随机变量$X$的概率密度为</p><script type="math/tex; mode=display">f(x)=\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^2}{2\sigma^2}}</script><p>其中$\mu,\sigma(\sigma&gt;0)$为常数，则称$X$服从参数为$\mu,\sigma$的<strong>正态分布</strong>或<strong>高斯分布</strong>，记为$X\sim N(\mu,\sigma^2)$</p><p>标准正态分布的概率密度和分布函数分别用$\varphi(x),\Phi(x)$表示，即有</p><script type="math/tex; mode=display">\varphi(x)=\frac{1}{\sqrt{2\pi}}e^{-\frac{x^2}{2}}</script><script type="math/tex; mode=display">\Phi(x)=\frac{1}{\sqrt{2\pi}}\int^x_{-\infty}e^{-\frac{t^2}{2}}dt</script><p>且有</p><script type="math/tex; mode=display">\Phi(-x)=1-\Phi(x)</script><h4 id="S2-8-1-正态分布转化引理"><a href="#S2-8-1-正态分布转化引理" class="headerlink" title="$\S2.8.1$正态分布转化引理"></a>$\S2.8.1$正态分布转化引理</h4><p>&emsp;&emsp;若$X\sim N(\mu,\sigma^2)$，则<script type="math/tex">Z=\frac{X-\mu}{\sigma}\sim N</script></p><h3 id="S-2-9随机变量的函数分布"><a href="#S-2-9随机变量的函数分布" class="headerlink" title="$\S$2.9随机变量的函数分布"></a>$\S$2.9随机变量的函数分布</h3><p><strong>定理</strong>&emsp;若随机变量$X$具有概率密度$f_x(x),-\infty&lt;x&lt;\infty$，又设函数$g(x)$处处可导且恒有$g’(x)&gt;0$(或恒有$g’(x)&lt;0$)，则$Y=g(X)$是连续性随机变量，其概率密度为</p><script type="math/tex; mode=display">f_y(y)=\begin{cases}f_x[h(y)]|h'(y)|, & \alpha<y<\beta \\0, & \mbox{其他}\end{cases}</script><p>其中$\alpha=min\{g(-\infty),g(\infty)\},\beta=max\{g(-\infty),g(\infty)\},h(y)$是$g(x)$的反函数</p><h4 id="S-2-9-1例题1"><a href="#S-2-9-1例题1" class="headerlink" title="$\S$2.9.1例题1"></a>$\S$2.9.1例题1</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/math/2.png" alt="例题1"></p><h4 id="S-2-9-2例题2"><a href="#S-2-9-2例题2" class="headerlink" title="$\S$2.9.2例题2"></a>$\S$2.9.2例题2</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/math/1.png" alt="例题2"></p><h2 id="S-3第三章"><a href="#S-3第三章" class="headerlink" title="$\S$3第三章"></a>$\S$3第三章</h2><h3 id="S-3-1二维随机变量"><a href="#S-3-1二维随机变量" class="headerlink" title="$\S$3.1二维随机变量"></a>$\S$3.1二维随机变量</h3><p>对于二维随机变量$(X,Y)$的分布函数$F(x,y)$，如果存在非负可积函数$f(x,y)$使对于任意$x,y$有</p><script type="math/tex; mode=display">F(x,y)=\int^y_{-\infty}\int^x_{\infty}f(u,v)dudv</script><p>则称$(X,Y)$是连续型的二维随机变量，函数$f(x,y)$称为二维随机变量$(X,Y)$的<strong>概率密度</strong>，或者称为随机变量$X$和$Y$的<strong>联合概率密度</strong></p><h3 id="S-3-2边缘分布"><a href="#S-3-2边缘分布" class="headerlink" title="$\S$3.2边缘分布"></a>$\S$3.2边缘分布</h3><p>对于连续型随机变量$(X,Y)$，设他的概率密度为$f(x,y)$，由于</p><script type="math/tex; mode=display">F_X(x)=F(x,\infty)=\int_{-\infty}^x[\int_{-\infty}^{\infty}f(x,y)dy]dx</script><p>由前面的知识可以知道$X$是一个连续型随机变量，其概率密度为</p><script type="math/tex; mode=display">f_X(x)=\int^{\infty}_{-\infty}f(x,y)dy</script><p>同样，$Y$也是一个连续型随机变量，其概率密度为</p><script type="math/tex; mode=display">f_Y(y)=\int^{\infty}_{-\infty}f(x,y)dx</script><p>分别称为$f_x(x),f_y(y)$为$(X,Y)$关于$X$和关于$Y$的<strong>边缘概率密度</strong></p><h3 id="S-3-4相互独立的随机变量"><a href="#S-3-4相互独立的随机变量" class="headerlink" title="$\S$3.4相互独立的随机变量"></a>$\S$3.4相互独立的随机变量</h3><p>&emsp;&emsp;<strong>定义</strong>&emsp;设$F(x,y)$及$F_X(x)$,$F_y(y)$分别是二维随机变量$(X,Y)$的分布函数及边缘分布函数，若对于所有的$x,y$有</p><script type="math/tex; mode=display">F(x,y)=F_X(x)F_Y(y)</script><p>则称随机变量$X$和$Y$是<strong>相互独立的</strong>。</p><p>&emsp;&emsp;<strong>定理</strong>&emsp;设$(X_1,X_2,\dots,X_m)$和$(Y_1,Y_2,\dots,Y_n)$相互独立，则$X_i(i=1,2,\dots,n)$相互独立。又若$(h,g)$是连续函数，则$h(X_1,X_2,\dots,X_m)$和$g(Y_1,Y_2,\dots,Y_n)$相互独立</p><h3 id="S-3-5两个随机变量的函数的分布"><a href="#S-3-5两个随机变量的函数的分布" class="headerlink" title="$\S$3.5两个随机变量的函数的分布"></a>$\S$3.5两个随机变量的函数的分布</h3><p>&emsp;&emsp;一般设$X,Y$互相独立且$X\sim N(\mu_1,\sigma^2_1),Y\sim N(\mu_2,\sigma^2_2)$由推算可知，$Z=X+Y$仍然服从正态分布，且有$Z\sim N(\mu_1+\mu_2,\sigma^2_1+\sigma_2^2)$,这个结论还能推广到$n$个独立正态随机变量之和的情况。即若$X_i\sim N(\mu_i,\sigma_i^2)(i=1,2,\dots,n)$，且他们互相独立，则他们的和$Z=X_1+X_2+\dots+X_n$仍然服从正态分布，且有$Z\sim N(\mu_1+\mu_2+\dots +\mu_n,\sigma_1^2+\sigma^2_2+\dots +\sigma^2_n)$。</p><p>&emsp;&emsp;更一般地，可以证明<strong>有限个互相独立的正态随机变量的线性组合仍然服从正态分布</strong></p><p>&emsp;&emsp;若$Z=X+Y$，有</p><script type="math/tex; mode=display">f_Z(z)=\int_{-\infty}^{\infty}f_X(x)f_Y(z-x)dx</script><p>或</p><script type="math/tex; mode=display">f_Z(z)=\int_{-\infty}^{\infty}f_X(z-y)f_Y(y)dy</script><p>&emsp;&emsp;若$Z=\frac{X}{Y}$，有</p><script type="math/tex; mode=display">f_Z(z)=\int_{-\infty}^{\infty}|x|f(x,xz)dx</script><p>若两个随机变量相互独立</p><script type="math/tex; mode=display">f_Z(z)=\int_{-\infty}^{\infty}|x|f_X(x)f_Y({xz})dx</script><p>&emsp;&emsp;若$Z=XY$，有</p><script type="math/tex; mode=display">f_Z(z)=\int_{-\infty}^{\infty}\frac{1}{|x|}f(x,\frac{z}{x})dx</script><p>若两个随机变量相互独立</p><script type="math/tex; mode=display">f_Z(z)=\int_{-\infty}^{\infty}\frac{1}{|x|}f_X(x)f_Y({\frac{z}{x}})dx</script><h2 id="S-4第四章-随机变量的数字特征"><a href="#S-4第四章-随机变量的数字特征" class="headerlink" title="$\S$4第四章 随机变量的数字特征"></a>$\S$4第四章 随机变量的数字特征</h2><h3 id="S-4-1数学期望"><a href="#S-4-1数学期望" class="headerlink" title="$\S$4.1数学期望"></a>$\S$4.1数学期望</h3><p>&emsp;&emsp;<strong>定义</strong>&emsp;设离散型随机变量$X$的分布律为</p><script type="math/tex; mode=display">P\{X=x_k\}=p_k,k=1,2,\dots.</script><p>若级数</p><script type="math/tex; mode=display">\sum_{k=1}^{\infty}x_kp_k</script><p>绝对收敛，则称级数$\sum_{k=1}^{\infty}x_kp_k$的和为随机变量$X$的<strong>数学期望</strong>，记为$E(X)$。即</p><script type="math/tex; mode=display">E(X)=\sum_{k=1}^{\infty}x_kp_k</script><p>设连续型随机变量$X$的概率密度为$f(x)$，若积分$\int_{-\infty}^{\infty}xf(x)dx$绝对收敛，则称积分$\int_{-\infty}^{\infty}xf(x)dx$的值为随机变量$X$的<strong>数学期望</strong>记为$E(X)$。即</p><script type="math/tex; mode=display">E(X)=\int_{-\infty}^{\infty}xf(x)dx</script><p>数学期望简称<strong>期望</strong>，又称为<strong>均值</strong></p><p>数学期望的几个定理：</p><ol><li><p>设$C$是常数，则有$E(C)=C$。</p></li><li><p>设$X$是一个随机变量，$C$是常数，则有</p></li></ol><script type="math/tex; mode=display">E(CX)=CE(X)</script><ol><li><p>$E(XY)=E(X)(Y)$</p></li><li><p>$E(X+Y)=E(X)+E(Y)$</p></li></ol><h3 id="S-4-2-方差"><a href="#S-4-2-方差" class="headerlink" title="$\S$4.2 方差"></a>$\S$4.2 方差</h3><p>&emsp;&emsp;<strong>定义</strong>&emsp;设$X$是一个随机变量，若$E{[X-E(X)]^2}$存在，则称$E\{[X-E(X)]^2\}$为$X$的<strong>方差</strong>，记为$D(X)$或$Var(X)$，即</p><script type="math/tex; mode=display">D(X)=Var(X)=E\{[X-E(X)]^2\}</script><p>在应用上还引入$\sqrt{D(X)}$，记为$\sigma(X)$，称为<strong>标准差</strong>或<strong>均方差</strong></p><p>方差的计算公式除了上述的还有</p><script type="math/tex; mode=display">D(X)=\sum_{k=1}^{\infty}[x_k-E(X)]^2p_k</script><script type="math/tex; mode=display">D(X)=\int_{-\infty}^{\infty}[X-E(X)]^2f(x)dx</script><script type="math/tex; mode=display">D(X)=E(X^2)-[E(X)]^2</script><p>方差的几个性质如下</p><ol><li>$D(C)=0$，C是常数</li><li>$D(CX)=C^2D(X)$,$D(X+C)=D(X)$</li><li>$D(X+Y)=D(X)+D(Y)+2E\{[X-E(X)][Y-E(Y)]\}$特别的如果$X,Y$相互独立，$D(X+Y)=D(X)+D(Y)$</li></ol><p>&emsp;&emsp;<strong>定理</strong>&emsp;设随机变量$X$具有数学期望和方差，则对于任何正数$\varepsilon$，不等式</p><script type="math/tex; mode=display">P\{|X-\mu|\geq \varepsilon\}\leq\frac{\sigma ^2}{\varepsilon ^2}</script><p>成立。这一不等式称为<strong>切比雪夫不等式</strong>。</p><h3 id="S-4-3-协方差和相关系数"><a href="#S-4-3-协方差和相关系数" class="headerlink" title="$\S$4.3 协方差和相关系数"></a>$\S$4.3 协方差和相关系数</h3><p>&emsp;&emsp;<strong>定义</strong>&emsp;量$E\{[X-E(X)][Y-E(Y)]\}$成为随机变量$X$与$Y$ 的<strong>协方差</strong>。记为$Cov(X,Y)$，即</p><script type="math/tex; mode=display">Cov(X,Y)=E\{[X-E(X)][Y-E(Y)]\}</script><p>而</p><script type="math/tex; mode=display">\rho_XY=\frac{Cov(X,Y)}{\sqrt{D(X)}\sqrt{D(Y)}}</script><p>称为随机变量$X$与$Y$ 的<strong>相关系数</strong></p><h3 id="S-4-4-矩、协方差矩阵"><a href="#S-4-4-矩、协方差矩阵" class="headerlink" title="$\S$4.4 矩、协方差矩阵"></a>$\S$4.4 矩、协方差矩阵</h3><p>&emsp;&emsp;<strong>定义</strong>&emsp;设$X$与$Y$ 是随机变量，若</p><script type="math/tex; mode=display">E(X^k),k=1,2,\dots</script><p>存在，称它为$X$的<strong>k阶原点矩</strong>，简称<strong>k阶矩</strong>。</p><p>若</p><script type="math/tex; mode=display">E\{[X-E(X)]^k\},k=2,3,\dots</script><p>存在，称它为$X$的<strong>k阶中心矩</strong></p><p>若</p><script type="math/tex; mode=display">E(X^kY^l),k,l=1,2,\dots</script><p>存在，称它为$X$与$Y$ 的<strong>k+l阶混合矩</strong></p><p>若</p><script type="math/tex; mode=display">E\{[X-E(X)]^k[Y-E(Y)]^l\}k,l=1,2,\dots</script><p>存在，称它为$X$与$Y$ 的<strong>k+l阶混合中心距</strong></p><h2 id="S-5-大数定律及中心极限定理"><a href="#S-5-大数定律及中心极限定理" class="headerlink" title="$\S$5 大数定律及中心极限定理"></a>$\S$5 大数定律及中心极限定理</h2><h3 id="S-5-1-大数定律"><a href="#S-5-1-大数定律" class="headerlink" title="$\S$5.1 大数定律"></a>$\S$5.1 大数定律</h3><h4 id="弱大数定理"><a href="#弱大数定理" class="headerlink" title="弱大数定理"></a>弱大数定理</h4><p>对于任何$\varepsilon &gt; 0$，有</p><script type="math/tex; mode=display">\lim_{n \to \infty}\{|\frac{1}{n}\sum_{k=1}^{\infty}X_k - \mu|<\varepsilon\}=1</script><p>这个$X$序列被称为<strong>依概率收敛于$\mu$</strong>，记为</p><script type="math/tex; mode=display">X_n \xrightarrow{P}a</script><p>若随机变量$X_1,X_2,\dots,X_n,\dots$相互独立，服从同一分布且具有数学期望$E(X_k)=\mu$,则序列$\bar{X}=\frac{1}{n}\sum_{k=1}^{n}X_k$依概率收敛于$\mu$，即$\bar{X} \xrightarrow{P}a$</p><h4 id="伯努利大数定理"><a href="#伯努利大数定理" class="headerlink" title="伯努利大数定理"></a>伯努利大数定理</h4><p>设$f_A$是n次独立重复实验中事件A发生的次数，p是时间A在每次实验中发生的概率，则对于任意正数$\varepsilon&gt;0$有</p><script type="math/tex; mode=display">\lim_{n \to \infty}P\{|\frac{f_A}{n}-p|<\varepsilon\}=1</script><h3 id="S-5-2中心极限定理"><a href="#S-5-2中心极限定理" class="headerlink" title="$\S$5.2中心极限定理"></a>$\S$5.2中心极限定理</h3><p>&emsp;&emsp;<strong>定理一</strong>（独立同分布的中心极限定理）&emsp;设随机变量$X_1,X_2,\dots,X_n$相互独立，服从同一分布且具有数学期望$E(X_k)=\mu,D(X_k)=\sigma^2$</p><h2 id="S-6-样本及抽样分布"><a href="#S-6-样本及抽样分布" class="headerlink" title="$\S$6 样本及抽样分布"></a>$\S$6 样本及抽样分布</h2><h3 id="S-6-1-随机样本"><a href="#S-6-1-随机样本" class="headerlink" title="$\S$6.1 随机样本"></a>$\S$6.1 随机样本</h3><p>&emsp;&emsp;我们将实验的全部可能的观察值称为<strong>总体</strong>，这些值不一定都相同，数目上也不一定是有限的，每一个可能观察值称为<strong>个体</strong>。总体中所包含的个体的个数称为总体的<strong>容量</strong>。容量有限的称为<strong>有限总体</strong>，容量为无限的称为<strong>无限总体</strong>。</p><p>&emsp;&emsp;<strong>定义</strong>&emsp;设$X$是具有分布函数$F$的随机变量，若$X_1,X_2,\dots,X_n$是具有同一分布函数$F$的、相互独立的随机变量，则称$X_1,X_2,\dots,X_n$为从分布函数$F$（或者总体F，或总体X）得到的<strong>容量为n的简单随机样本</strong>，简称<strong>样本</strong>，他们的观察值$x_1,x_2,\dots,x_n$称为<strong>样本值</strong>，又称为$X$的n个<strong>独立的观察值</strong>。</p><h3 id="S-6-2-直方图和箱线图"><a href="#S-6-2-直方图和箱线图" class="headerlink" title="$\S$6.2 直方图和箱线图"></a>$\S$6.2 直方图和箱线图</h3><p>中位数和四分位数的定义（略）</p><h3 id="S-6-3-抽样分布"><a href="#S-6-3-抽样分布" class="headerlink" title="$\S$6.3 抽样分布"></a>$\S$6.3 抽样分布</h3><p>&emsp;&emsp;<strong>定义</strong>&emsp;设$X_1,X_2,\dots,X_n$是来自总体$X$的一个样本，$g(X_1,X_2,\dots,X_n)$是$X_1,X_2,\dots,X_n$的函数，若$g$中不含未知数，则称$g(X_1,X_2,\dots,X_n)$是一<strong>统计量</strong>。</p><p>下面列出的几个常用的统计量。设$X_1,X_2,\dots,X_n$是来自总体$X$的一个样本，$x_1,x_2,\dots,x_n$是这一样本的观察值，定义</p><ul><li>样本平均值</li></ul><script type="math/tex; mode=display">\bar{X}=\frac{1}{2}\sum_{i=1}^nX_i$$;* 样本方差$$S^2=\frac{1}{n-1}\sum_{i-1}^n(X_i-\bar{X})^2=\frac{1}{n-1}(\sum_{i=1}^nX_i-n\bar{X}^2)$$;* 样本标准差$$S=\sqrt{S^2}=\sqrt{\frac{1}{n-1}\sum_{i=1}^n(X_i-\bar{X})^2}</script><ul><li>样本$k$阶原点矩</li></ul><p><script type="math/tex">A_k=\frac{1}{n}\sum_{i=1}^{n}X_i^k,k=1,2,3,\dots</script>;</p><ul><li>样本$k$阶中心矩</li></ul><p><script type="math/tex">B_k=\frac{1}{n}\sum_{i=1}^n(X_i-\bar{X})^k,k=2,3,\dots</script>;</p><h4 id="（一）-chi-2-分布"><a href="#（一）-chi-2-分布" class="headerlink" title="（一）$\chi^2$分布"></a>（一）$\chi^2$分布</h4>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WechatApp开发笔记之login界面（一）</title>
      <link href="/2020/04/18/WechatApp%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%E4%B9%8Blogin%E7%95%8C%E9%9D%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/04/18/WechatApp%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%E4%B9%8Blogin%E7%95%8C%E9%9D%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>&emsp;&emsp;这篇文章不一定涵盖了所有我碰到的问题，只有高频的问题我才会进行记录，尽量保持持续更新吧，我尽力。但是要说的是不管怎么样官方的文档都是最终解释最有效的方法，么有找到的可以尝试到<b><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">官方开发文档</a></b>中进行寻找。</p><h2 id="页面顶栏设置"><a href="#页面顶栏设置" class="headerlink" title="页面顶栏设置"></a>页面顶栏设置</h2><p>&emsp;&emsp;在该页面的json文件中编辑属性，如下样式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;navigationBarTitleText&quot;</span>:<span class="string">&quot;授权登录&quot;</span>, <span class="comment">//顶栏标题</span></span><br><span class="line">    <span class="attr">&quot;navigationBarBackgroundColor&quot;</span>:<span class="string">&quot;#fff&quot;</span>, <span class="comment">//顶栏背景色</span></span><br><span class="line">    <span class="attr">&quot;navigationBarTextStyle&quot;</span>:<span class="string">&quot;black&quot;</span> <span class="comment">//顶栏文字颜色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Loading时的背景颜色"><a href="#Loading时的背景颜色" class="headerlink" title="Loading时的背景颜色"></a>Loading时的背景颜色</h2><p>&emsp;&emsp;触发onPullDownRefresh事件的时候背景颜色是根据json文件中的<code>backgroundColor</code>参数而定的，所以只需要修改这个参数即可。</p><h2 id="最简单的Login界面的模板代码"><a href="#最简单的Login界面的模板代码" class="headerlink" title="最简单的Login界面的模板代码"></a>最简单的Login界面的模板代码</h2><p>&emsp;&emsp;下面的这个模板能实现最简单的登录功能，主页有一句提示语一个logo和一个登录按钮，若第一次进行用户授权就会弹出窗口进行确认，若之前有进行授权直接进入小程序，可以自由改动用户拒绝授权之后的提示文本，具体改动的注意细节请参考官方文档。</p><ul><li><p>wxml代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;canIUse&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/logo.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;words&quot;</span>&gt;</span>介绍文本<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;getUserInfo&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;zh_CN&quot;</span> <span class="attr">bindgetuserinfo</span>=<span class="string">&quot;bindGetUserInfo&quot;</span>&gt;</span>授权登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span>请升级微信版本<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>wxss代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">375</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">375</span>rpx;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fad73f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">text &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fullScreen</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: auto;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.floatlogo</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>js代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="comment">//判断小程序的API，回调，参数，组件等是否在当前版本可用。</span></span><br><span class="line">    <span class="attr">canIUse</span>: wx.canIUse(<span class="string">&#x27;button.open-type.getUserInfo&#x27;</span>),</span><br><span class="line">    <span class="attr">isHide</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">// 查看是否授权</span></span><br><span class="line">    wx.getSetting(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.authSetting[<span class="string">&#x27;scope.userInfo&#x27;</span>]) &#123;</span><br><span class="line">          wx.getUserInfo(&#123;</span><br><span class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">              <span class="comment">// 用户已经授权过,不需要显示授权页面,所以不需要改变 isHide 的值</span></span><br><span class="line">              <span class="comment">// 根据自己的需求有其他操作再补充</span></span><br><span class="line">              <span class="comment">// 我这里实现的是在用户授权成功后，调用微信的 wx.login 接口，从而获取code</span></span><br><span class="line">              wx.login(&#123;</span><br><span class="line">                <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                  <span class="comment">// 获取到用户的 code 之后：res.code</span></span><br><span class="line">                  <span class="built_in">console</span>.log(<span class="string">&quot;用户的code:&quot;</span> + res.code);</span><br><span class="line">                  <span class="comment">// 可以传给后台，再经过解析获取用户的 openid</span></span><br><span class="line">                  <span class="comment">// 或者可以直接使用微信的提供的接口直接获取 openid ，方法如下：</span></span><br><span class="line">                  <span class="comment">// wx.request(&#123;</span></span><br><span class="line">                  <span class="comment">//  // 自行补上自己的 APPID 和 SECRET</span></span><br><span class="line">                    <span class="comment">//  url: &#x27;https://api.weixin.qq.com/sns/jscode2session?appid=自己的APPID&amp;secret=自己的SECRET&amp;js_code=&#x27; + res.code + &#x27;&amp;grant_type=authorization_code&#x27;,</span></span><br><span class="line">                  <span class="comment">//  success: res =&gt; &#123;</span></span><br><span class="line">                  <span class="comment">//   // 获取到用户的 openid</span></span><br><span class="line">                  <span class="comment">//   console.log(&quot;用户的openid:&quot; + res.data.openid);</span></span><br><span class="line">                  <span class="comment">//  &#125;</span></span><br><span class="line">                  <span class="comment">// &#125;);</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 用户没有授权</span></span><br><span class="line">          <span class="comment">// 改变 isHide 的值，显示授权页面</span></span><br><span class="line">          that.setData(&#123;</span><br><span class="line">            <span class="attr">isHide</span>: <span class="literal">true</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">bindGetUserInfo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.detail.userInfo) &#123;</span><br><span class="line">      <span class="comment">//用户按了允许授权按钮</span></span><br><span class="line">      <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">      wx.switchTab(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/pages/my/my&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 获取到用户的信息了，打印到控制台上看下</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;用户的信息如下：&quot;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(e.detail.userInfo);</span><br><span class="line">      <span class="comment">//授权成功后,通过改变 isHide 的值，让实现页面显示出来，把授权页面隐藏起来</span></span><br><span class="line">      that.setData(&#123;</span><br><span class="line">        <span class="attr">isHide</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//用户按了拒绝按钮</span></span><br><span class="line">      wx.showModal(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;警告&quot;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&quot;小程序需要量身定制，请授权登录&quot;</span>,</span><br><span class="line">        <span class="attr">showCancel</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">confirmText</span>: <span class="string">&quot;返回授权&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 用户没有授权成功，不需要改变 isHide 的值</span></span><br><span class="line">          <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;用户点击了“返回授权”&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">onPullDownRefresh</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.showNavigationBarLoading()</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// complete</span></span><br><span class="line">      wx.hideNavigationBarLoading() <span class="comment">//完成停止加载</span></span><br><span class="line">      wx.stopPullDownRefresh() <span class="comment">//停止下拉刷新</span></span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>json代码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;navigationBarTitleText&quot;</span>:<span class="string">&quot;授权登录&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;navigationBarBackgroundColor&quot;</span>:<span class="string">&quot;#fad73f&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;backgroundColor&quot;</span>: <span class="string">&quot;#fad73f&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这样就可以实现最简单的登录功能，有需要的可以酌情添加。</p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
      
      
      <categories>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Packet Tracer两PC单向发送icmp报文实验</title>
      <link href="/2020/04/18/Packet-Tracer%E4%B8%A4PC%E5%8D%95%E5%90%91ping%E9%80%9A%E5%AE%9E%E9%AA%8C/"/>
      <url>/2020/04/18/Packet-Tracer%E4%B8%A4PC%E5%8D%95%E5%90%91ping%E9%80%9A%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;本实验希望通过packet-tracer模拟器实现两个PC之间的单向发送icmp报文，提供两种方法。</p><h2 id="实验文件"><a href="#实验文件" class="headerlink" title="实验文件"></a>实验文件</h2><p>&emsp;&emsp;基于Packet-Tracer5.2，已经完成了下述的两种方法的拓扑，右边的是方法一，左边的是方法二。<br />可以<b><a href="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/single_icmp.pkt">下载查看拓扑文件</a></b>。</p><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><h3 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h3><p>&emsp;&emsp;何为单向发送icmp报文，即一个PC向另一个PC能够成功的发送icmp报文但是另一个PC由于无法向发送端回应所以ping是不可能能通的，所以应该得到的反馈是两边都不能ping通但是两边的报错是不一样的，我的实验结果是一边是host unreachable而另一边是timeout。</p><h3 id="终端IP分配表"><a href="#终端IP分配表" class="headerlink" title="终端IP分配表"></a>终端IP分配表</h3><div class="table-container"><table><thead><tr><th>设备</th><th>IP地址</th><th>网关地址</th></tr></thead><tbody><tr><td>PC0</td><td>192.168.1.2</td><td>192.168.1.1</td></tr><tr><td>PC1</td><td>192.168.3.2</td><td>192.168.3.1</td></tr></tbody></table></div><h3 id="路由器IP分配表"><a href="#路由器IP分配表" class="headerlink" title="路由器IP分配表"></a>路由器IP分配表</h3><div class="table-container"><table><thead><tr><th>设备</th><th>fa0/0</th><th>s2/0</th></tr></thead><tbody><tr><td>Router0</td><td>192.168.1.1</td><td>192.168.2.1</td></tr><tr><td>Router1</td><td>192.168.3.1</td><td>192.168.2.2</td></tr></tbody></table></div><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="方法一：ACL防火墙设置-由大佬Dart提供"><a href="#方法一：ACL防火墙设置-由大佬Dart提供" class="headerlink" title="方法一：ACL防火墙设置(由大佬Dart提供)"></a>方法一：ACL防火墙设置(由大佬<code>Dart</code>提供)</h3><h4 id="1-将三台设备相连"><a href="#1-将三台设备相连" class="headerlink" title="1.将三台设备相连"></a>1.将三台设备相连</h4><p>用交叉双绞线连接PC和路由器，最后的效果拓扑为这样（注：在没配置之前线上的点是红色的，配置成功后为绿色）</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/tuopu.png" alt="拓扑图"></p><h4 id="2-设置两台PC"><a href="#2-设置两台PC" class="headerlink" title="2.设置两台PC"></a>2.设置两台PC</h4><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/pc0_config.png" alt="PC0设置"></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/pc1_config.png" alt="PC1设置"></p><h4 id="3-设置router0各个端口"><a href="#3-设置router0各个端口" class="headerlink" title="3.设置router0各个端口"></a>3.设置router0各个端口</h4><p>在CLI或者是图形界面进行相应的设置，图形界面操作如下：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/fa0_0.png" alt="fa0/0配置"></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/fa0_1.png" alt="fa0/配置"></p><h4 id="4-在Router上配置access-list来实现拦截PC0向PC1发出的icmp报文"><a href="#4-在Router上配置access-list来实现拦截PC0向PC1发出的icmp报文" class="headerlink" title="4.在Router上配置access-list来实现拦截PC0向PC1发出的icmp报文"></a>4.在Router上配置access-list来实现拦截PC0向PC1发出的icmp报文</h4><p>在配置模式下输入下图指令</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/acl_config.png" alt="access-list配置"></p><p>配置成功后可以进入特权模式查看</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/show.png" alt="查看"></p><h4 id="5-将access-list应用到端口"><a href="#5-将access-list应用到端口" class="headerlink" title="5.将access list应用到端口"></a>5.将access list应用到端口</h4><p>注意区分选择的端口与源地址的远近关系（近的用out，远的用in)，本次实验配置在fa0/0，源地址是PC1，因此是in</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/tos.png" alt="应用到端口"></p><h4 id="6-尝试ping命令"><a href="#6-尝试ping命令" class="headerlink" title="6.尝试ping命令"></a>6.尝试ping命令</h4><p>PC0 ping PC1:</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/pc0pingpc1.png" alt="PC0 ping PC1"></p><p>PC1 ping PC0:</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/pc1pingpc0.png" alt="PC1 ping PC2"></p><h3 id="方法二：静态路由设置"><a href="#方法二：静态路由设置" class="headerlink" title="方法二：静态路由设置"></a>方法二：静态路由设置</h3><h4 id="1-将四台设备相连"><a href="#1-将四台设备相连" class="headerlink" title="1.将四台设备相连"></a>1.将四台设备相连</h4><p>用交叉双绞线连接PC和路由器，用DTE线将两个路由器相连，最后的效果拓扑为这样。</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/begin.png" alt="拓扑图"></p><h4 id="2-设置Router0的各个端口"><a href="#2-设置Router0的各个端口" class="headerlink" title="2.设置Router0的各个端口"></a>2.设置Router0的各个端口</h4><p>在CLI或者是图形界面进行相应的设置，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">en</span><br><span class="line">conf t</span><br><span class="line">int fa0/0</span><br><span class="line">ip address 192.168.1.1 255.255.255.0</span><br><span class="line">no shut</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">en</span><br><span class="line">conf t</span><br><span class="line">int s2/0</span><br><span class="line">ip address 192.168.2.1 255.255.255.0</span><br><span class="line">clock rate 64000</span><br><span class="line">no shut</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>实际效果如图：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/router0_config.png" alt="Router0设置图"></p><h4 id="3-设置Router1的各个端口"><a href="#3-设置Router1的各个端口" class="headerlink" title="3.设置Router1的各个端口"></a>3.设置Router1的各个端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">en</span><br><span class="line">conf t</span><br><span class="line">int fa0/0</span><br><span class="line">ip address 192.168.3.1 255.255.255.0</span><br><span class="line">no shut</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">en</span><br><span class="line">conf t</span><br><span class="line">int s2/0</span><br><span class="line">ip address 192.168.2.2 255.255.255.0</span><br><span class="line">clock rate 64000</span><br><span class="line">no shut</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>实际效果如图：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/router1_config.png" alt="Router1设置图"></p><h4 id="4-设置Router0的静态路由跳转"><a href="#4-设置Router0的静态路由跳转" class="headerlink" title="4.设置Router0的静态路由跳转"></a>4.设置Router0的静态路由跳转</h4><p>代码如下（环境如下<code>Router(config)#</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip route 192.168.3.0 255.255.255.0 192.168.2.2</span><br></pre></td></tr></table></figure><p>这里不在单独展示效果图，配置完成。</p><h4 id="5-设置两台PC"><a href="#5-设置两台PC" class="headerlink" title="5.设置两台PC"></a>5.设置两台PC</h4><p>设置两台PC的网关和IP地址，效果见下两图：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/PC0.png" alt="PC0设置图"></p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/PC1.png" alt="PC1设置图"></p><h4 id="6-尝试ping命令-1"><a href="#6-尝试ping命令-1" class="headerlink" title="6.尝试ping命令"></a>6.尝试ping命令</h4><p>在PC0中尝试<code>ping 192.168.3.2</code>,效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/PC0_ping.png" alt="PC0中ping示意图"></p><p>在PC1中尝试<code>ping 192.168.1.2</code>，效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/packet_tracer/PC1_ping.png" alt="PC1中ping示意图"></p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>&emsp;&emsp;由于ping命令需要双边通信才能有TTL的返回值，所以单边的ICMP报文是无法返回的，在这个实验中第二种方法的实验让Router0能够收到目的网段为<code>192.168.3.0</code>的请求后跳转到下一个路由，可以让目标PC收到icmp报文，但是由于Router1在返回的时候并不知道如何跳转，所以无法返回，导致PC0中的ping命令最后返回了<code>Request timed out</code>，而PC1中的ping命令由于根本找不到跳转路由返回了<code>Destination host unreachable</code>。这样整个实验就算是完成了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> packet-tracer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Hexo静态博客中使用pdf文章</title>
      <link href="/2020/04/14/%E5%A6%82%E4%BD%95%E5%9C%A8Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E4%B8%AD%E4%BD%BF%E7%94%A8pdf%E6%96%87%E7%AB%A0/"/>
      <url>/2020/04/14/%E5%A6%82%E4%BD%95%E5%9C%A8Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E4%B8%AD%E4%BD%BF%E7%94%A8pdf%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;我又回来写hexo博客的技术笔记了，因为有一个大(cai)佬(bi)他平时的文档都是用latex写得，发博客有点麻烦，所以要用嵌入pdf的方式进行发表，但是hexo原生不支持pdf，所以我就写了这个教程附带了hexo博客平时的部署方法，供参考。</p><h2 id="安装PDF插件"><a href="#安装PDF插件" class="headerlink" title="安装PDF插件"></a>安装PDF插件</h2><ul><li><p>进入你个人博客本地的根目录，在命令行中打开，并运行</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-pdf</span><br></pre></td></tr></table></figure></li></ul><h2 id="PDF发表"><a href="#PDF发表" class="headerlink" title="PDF发表"></a>PDF发表</h2><p>&emsp;&emsp;这一步在国内有两种可行办法，一种是使用本地的文件，让hexo从博客中加载，一种就是放在云端的存储仓库进行加载。这里两种方法都做演示，但是推荐使用后者。</p><h3 id="方法一：本地仓库"><a href="#方法一：本地仓库" class="headerlink" title="方法一：本地仓库"></a>方法一：本地仓库</h3><ol><li><p>这个方法比较简单，但是效果较差，可能会造成较大的卡顿，首先在本地的根目录下打开<code>source</code>在这个文件夹下直接将你的pdf放进去即可。</p></li><li><p>在你的本地的博客根目录下新建一篇文章命令行</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章名称&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>到你的根目录里的<code>source/_posts</code>文件夹中找到新建的文章，在完成了文章的头部编辑之后，在正文部分只用加一句</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf /你自己刚刚放的pdf文档的名称.pdf %&#125;</span><br></pre></td></tr></table></figure></li><li><p>回到博客的根目录运行,生成hexo部署文档</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li><p>运行<code>hexo s</code>做本地调试或者是使用<code>hexo d</code>进行远端部署，这个过程中可能会遇到命令行提示github用户名和密码，用户名是GitHub注册邮箱，输入后回车确认密码的输入是不可见的，保证输入无误之后回车即可。</p></li></ol><h3 id="方法二：远端仓库"><a href="#方法二：远端仓库" class="headerlink" title="方法二：远端仓库"></a>方法二：远端仓库</h3><p>白嫖GitHub的远端资源。（这里默认已经掌握GitHub基本操作）</p><ol><li><p>新建一个英文名称的公共仓库。</p></li><li><p>在本地文件夹clone或者是通过任何方法使本地文件夹和仓库相连通</p></li><li><p>将你要发布的pdf放在本地的文件夹中</p></li><li><p>使用<code>git push</code>命令将文件推到远端仓库</p></li><li><p>使用jsDelivr的cdn服务实现国内的加速访问，访问方法如下：<br>在文档中加入pdf嵌入语句</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/你的GitHub账户名/你的新建的仓库名/你的文件路径/你的pdf文件.pdf %&#125;</span><br></pre></td></tr></table></figure><p> <em>其中的文件路径需要自己进行调整，若是主目录直接使用pdf文件名即可，不需要输入路径。</em></p></li><li><p>和第一种方法一致，新建文章并进行推送即可。</p></li></ol><h2 id="访问网站"><a href="#访问网站" class="headerlink" title="访问网站"></a>访问网站</h2><p>&emsp;&emsp;到这里应该就已经全部结束了，但是在实际访问过程中，我发现我的一些下载插件经常会自动抓取到pdf并提示下载，遇到这种情况就可以通过白名单，或者是忽略解决。</p><h2 id="实际效果预览"><a href="#实际效果预览" class="headerlink" title="实际效果预览"></a>实际效果预览</h2><h3 id="我的实际代码样式"><a href="#我的实际代码样式" class="headerlink" title="我的实际代码样式"></a>我的实际代码样式</h3><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/codeview01.png" alt=""></p><h3 id="pdf嵌入处"><a href="#pdf嵌入处" class="headerlink" title="pdf嵌入处"></a>pdf嵌入处</h3><div class="row">    <embed src="https://cdn.jsdelivr.net/gh/icimence/CDN/pdf/理论力学第六周.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iDo微信小程序功能开发文档</title>
      <link href="/2020/04/11/iDo%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/"/>
      <url>/2020/04/11/iDo%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>&emsp;&emsp;进入大学，面对丰富多彩的大学生活，很多同学往往因为突然涌来的大量信息，或是缺少途径了解适合自己的信息，时常会感到茫然。不知道自己从何入手，不知道如何规划自己的大学生活。陷入明明有很多事情可做，却因目标不明确或盲目选择等等原因而贻误了大学学习的宝贵时光。</p><h2 id="项目理念"><a href="#项目理念" class="headerlink" title="项目理念"></a>项目理念</h2><p>&emsp;&emsp;该项目旨在通过提供用户多种可选择的学习目标，帮助用户确立本科期间的长远目标，以及为达到长远目标帮助规划可由用户自主选择的短期目标，并根据设定的目标提供精准的信息，从一本书、一份资料、一场竞赛……开始，及时提醒用户完成一个又一个的短期任务，陪伴用户以梦为马，不负韶华。</p><h2 id="项目定位"><a href="#项目定位" class="headerlink" title="项目定位"></a>项目定位</h2><p>&emsp;&emsp;为大学生更好地完成学业或进一步深造提供强有力的信息支持与目标引领（陪跑小程序）。</p><h3 id="目标人群"><a href="#目标人群" class="headerlink" title="目标人群"></a>目标人群</h3><p>&emsp;&emsp;本科生。</p><h2 id="程序界面"><a href="#程序界面" class="headerlink" title="程序界面"></a>程序界面</h2><h3 id="初始登录授权界面"><a href="#初始登录授权界面" class="headerlink" title="初始登录授权界面"></a>初始登录授权界面</h3><p>&emsp;<img src="https://cdn.jsdelivr.net/gh/icimence/CDN/wechat/login.png" height=400px title="初始登录授权界面" ></p><h3 id="我的”界面设计"><a href="#我的”界面设计" class="headerlink" title="我的”界面设计"></a>我的”界面设计</h3><p>&emsp;<img src="https://cdn.jsdelivr.net/gh/icimence/CDN/wechat/mine.png" height=400px title="“我的”界面设计" ></p><h3 id="进行中”界面设计"><a href="#进行中”界面设计" class="headerlink" title="进行中”界面设计"></a>进行中”界面设计</h3><p>&emsp;<img src="https://cdn.jsdelivr.net/gh/icimence/CDN/wechat/running.png" height=400px title="“进行中”界面设计"></p><h3 id="推荐”界面设计"><a href="#推荐”界面设计" class="headerlink" title="推荐”界面设计"></a>推荐”界面设计</h3><p>&emsp;<img src="https://cdn.jsdelivr.net/gh/icimence/CDN/wechat/home.png" height=400px title="“推荐”界面设计"></p><blockquote><p>p1: 初始登录授权界面；p2: “我的”界面设计；p3: “进行中”界面设计；p4: “推荐”界面设计</p></blockquote><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="新用户登录"><a href="#新用户登录" class="headerlink" title="新用户登录"></a>新用户登录</h3><ul><li><p>新用户登录显示p1，即初始登录授权界面，开始画面可采用打字机效果，图片中文字仅供参考；</p></li><li><p>登录授权后，进入新人引导阶段（图片未展示），新人引导会向新用户介绍小程序的核心功能：目标制定、信息获取、任务提醒，并引导新用户进入“我的”界面进行目标设定；</p></li><li><p>进入“我的”界面后，初始状态仅显示“添加目标专业”（图片未展示），添加目标专业后（可多选），“我的”界面如p2所示；</p></li><li><p>余下使用说明见“老用户使用”</p></li></ul><h3 id="老用户使用"><a href="#老用户使用" class="headerlink" title="老用户使用"></a>老用户使用</h3><ul><li><p>打开“我的”界面修改当前目标（此步骤可跳过）；</p></li><li><p>打开“推荐”界面，可看到更新的推荐信息，推荐信息由用户制定的目标决定；</p></li><li><p>浏览推荐信息，收藏感兴趣以及对自己有帮助的条目（可在“我的”界面查看）；</p></li><li><p>打开“进行中”界面，添加新任务（“我的”界面紧急任务栏随之更新）</p></li></ul><h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h2><ul><li><p>显示用户使用小程序天数</p></li><li><p>新建/修改目标专业</p></li><li><p>推荐专业相关信息</p></li><li><p>推荐信息分类</p></li><li><p>推荐信息可收藏</p></li><li><p>收藏栏可显示/新建分组</p></li><li><p>新建/完成/搁置/删除任务</p></li><li><p>任务栏分组显示</p></li><li><p>任务栏可新建/删除分组</p></li><li><p>统计板显示完成/搁置/删除数目</p></li><li><p>紧急任务栏显示/修改截止日期最近的任务</p></li><li><p>支持问题反馈</p></li></ul><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ul><li><p>2020/04/16 20:00  <strong>V1.2</strong> 小程序改版，增加更新记录，提供版本号记录。更新用户界面图片加载。</p></li><li><p>2020/04/16 20:36 <strong>V1.2.1</strong> 优化文档结构。</p></li><li><p>2020/04/17 18:43 <strong>V1.2.2</strong> 优化项目理念文字描述。</p></li><li><p>2020/04/17 22:14 <strong>V1.2.3</strong> 优化项目理念文字描述。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在自己的服务器上部署hexo博客</title>
      <link href="/2020/04/10/%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/04/10/%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://english.icimence.cn/2020/04/10/How-to-create-a-git-repositry-Create-Hexo-Blog/#Foreword">English Version</a></p><p>因为我有一个腾讯云的服务器，配置如下:</p><ul><li>CentOS7.2 X64</li><li>1 GB RAM</li></ul><p>我想在服务器IP上构建一个hexo博客。</p><ol><li>在云服务器上配置git</li><li>配置服务器上的Nginx</li><li>调整您自己的本地计算机中的Hexo</li></ol><p>通过执行以上简单步骤，您也可以拥有自己的网站。废话不多，让我们开始吧！</p><h2 id="云服务器准备"><a href="#云服务器准备" class="headerlink" title="云服务器准备"></a>云服务器准备</h2><h3 id="进入您的云服务器控制台"><a href="#进入您的云服务器控制台" class="headerlink" title="进入您的云服务器控制台"></a>进入您的云服务器控制台</h3><p>你知道该怎么做</p><h3 id="在您的服务器上安装Git"><a href="#在您的服务器上安装Git" class="headerlink" title="在您的服务器上安装Git"></a>在您的服务器上安装Git</h3><ol><li><p>安装依赖项和编译工具</p><ul><li><p>安装依赖项</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br></pre></td></tr></table></figure></li><li><p>安装编译工具</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc perl-ExtUtils-MakeMaker package</span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装 git</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure></li><li><p>检查git版本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p> 如果此命令有效并在您的服务器console上显示git版本，则说明您已成功安装git</p></li><li><p>找不到git命令</p><p> 如果遇到此问题，请在服务器上配置环境变量</p><ul><li><p>将git添加到PATH</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:/usr/local/git/bin&#x27;</span> &gt;&gt; /etc/bashrc</span><br></pre></td></tr></table></figure></li><li><p>使git环境变量生效</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/bashrc</span><br></pre></td></tr></table></figure></li><li><p>再次尝试步骤3</p></li></ul></li></ol><h3 id="使Git在您的服务器上正常工作"><a href="#使Git在您的服务器上正常工作" class="headerlink" title="使Git在您的服务器上正常工作"></a>使Git在您的服务器上正常工作</h3><p>在这一步中，我们将在home / git中创建一个名为hexoBlog的空仓库，并配置目录的权限。并创建一个新的git hook以进行自动部署。</p><ul><li><p>创建目录并配置权限</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/git/</span><br><span class="line">chown -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /home/git/</span><br><span class="line">chmod -R 755 /home/git/</span><br></pre></td></tr></table></figure></li><li><p>创建空的git仓库</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/</span><br><span class="line">git init --bare hexoBlog.git</span><br></pre></td></tr></table></figure></li><li><p>创建一个新的git hook以进行自动部署（需要Vim知识）</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/git/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>  将这些代码放入打开的文件中。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --work-tree=/home/hexoBlog --git-dir=/home/git/hexoBlog.git checkout -f</span><br></pre></td></tr></table></figure><p>  保存并退出。</p><p>  修改文件权限以使其可执行。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /home/git/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure></li></ul><h3 id="在服务器上配置Nginx"><a href="#在服务器上配置Nginx" class="headerlink" title="在服务器上配置Nginx"></a>在服务器上配置Nginx</h3><ol><li><p>安装 Nginx</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure></li><li><p>运行 Nginx</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure></li><li><p>测试 Nginx 服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://127.0.0.1</span><br></pre></td></tr></table></figure><p> 如果您在控制台上收到类似这样的消息，则说明您已正确安装nginx。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Connecting to 127.0.0.1:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 43704 (43K) [text/html]</span><br><span class="line">Saving to: ‘index.html’</span><br><span class="line"></span><br><span class="line">100%[=======================================&gt;] 43,704      --.-K/s   <span class="keyword">in</span> 0s</span><br><span class="line"></span><br><span class="line">2018-03-09 23:04:09 (487 MB/s) - ‘index.html’ saved [43704/43704]</span><br></pre></td></tr></table></figure><p> 尝试在浏览器中输入服务器IP地址进行测试</p></li><li><p>配置Nginx托管目录</p></li></ol><ul><li><p>创建用于Nginx托管的home / hexoBlog目录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/hexoBlog/</span><br><span class="line">chown -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /home/hexoBlog/</span><br><span class="line">chmod -R 755 /home/hexoBlog/</span><br></pre></td></tr></table></figure></li><li><p>检查Nginx的安装位置</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure></li><li><p>配置（需要Vim知识）</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></li><li><p>修改文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    listen [::]:80</span><br><span class="line">    default_server;</span><br><span class="line">    root /home/hexoBlog;    <span class="comment">#Need Modify here</span></span><br><span class="line">    server_name icimence.cn; <span class="comment">#Need Modify here</span></span><br><span class="line">    <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line">    location / &#123;&#125;</span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">    location = /40x.html &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新启动Nginx服务</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改计算机上的本地文件"><a href="#修改计算机上的本地文件" class="headerlink" title="修改计算机上的本地文件"></a>修改计算机上的本地文件</h2><ul><li><p>在Hexo根目录下打开_conig.yml</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    repo: root@<span class="string">&#x27;Your IP address here&#x27;</span>:/home/git/hexoBlog</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure></li><li><p>运行hexo deploy命令</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将VSC作为latex编辑工具</title>
      <link href="/2020/04/08/%E5%B0%86VSC%E4%BD%9C%E4%B8%BAlatex%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/04/08/%E5%B0%86VSC%E4%BD%9C%E4%B8%BAlatex%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp;&emsp;因为latex自带的编辑工具有点老旧且不太好用，所以使用轻量级的VSC作为latex编辑器，自己配置完了之后推荐给了同学，然后他的同学来问怎么配置，就干脆写成文章来拯救我的“菜鸡”同学（逃。<br><span id="more"></span></p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ol><li>自然是下载VSC，不过多赘述。</li><li>然后打开VSC的插件页面搜索<code>latex workshop</code>并安装，如图：<br><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/vscLatex/latex-plugin-search.png" alt=""><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2></li><li>打开VSC的命令面板，如图:<br><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/vscLatex/settings.png" alt=""></li><li>搜索首选项:打开设置(JSON),如图:<br><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/vscLatex/select-settings.png" alt=""></li><li>在打开的页面中两个大括号中间增加如下代码:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;latex-workshop.latex.tools&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;latexmk&quot;</span>,</span><br><span class="line">            <span class="string">&quot;command&quot;</span>: <span class="string">&quot;latexmk&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-pdf&quot;</span>,</span><br><span class="line">                <span class="string">&quot;%DOC%&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">            <span class="string">&quot;command&quot;</span>: <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;-synctex=1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-interaction=nonstopmode&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-file-line-error&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-pdf&quot;</span>,</span><br><span class="line">            <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;pdflatex&quot;</span>,</span><br><span class="line">            <span class="string">&quot;command&quot;</span>: <span class="string">&quot;pdflatex&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span>,</span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">            <span class="string">&quot;command&quot;</span>: <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;latex-workshop.latex.recipes&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;latexmk&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;latexmk&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;pdflatex -&gt; bibtex&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xelatex -&gt; bibtex -&gt; xelatex*2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;latex-workshop.view.pdf.viewer&quot;</span>: <span class="string">&quot;tab&quot;</span>,</span><br><span class="line">    <span class="string">&quot;latex-workshop.latex.clean.fileTypes&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;*.aux&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.bbl&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.blg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.idx&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.ind&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.lof&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.lot&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.out&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.toc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.acn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.acr&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.alg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.glg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.glo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.gls&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.ist&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.fls&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.log&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.fdb_latexmk&quot;</span></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure>增加之后效果如图：<br><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/vscLatex/json-settings.png" alt=""><br>前面的碎片代码是我自己另外的配置，不用添加。<br>然后保存json文件并重启VSC软件<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2></li><li>新建一个文件，然后保存为<code>.tex</code>后缀，然后在文件中粘贴你的tex文件，下面提供一段样例代码：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\title&#123;你好，world!&#125;</span><br><span class="line">\author&#123;name&#125;</span><br><span class="line">\date&#123;\today&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\maketitle</span><br><span class="line">\section&#123;你好中国&#125;</span><br><span class="line">中国在 East Asia.</span><br><span class="line">\subsection&#123;Hello Beijing&#125;</span><br><span class="line">北京是 capital of China.</span><br><span class="line">\subsubsection&#123;Hello Dongcheng District&#125;</span><br><span class="line">\paragraph&#123;Tian&#x27;anmen Square&#125;</span><br><span class="line">is in the center of Beijing</span><br><span class="line">\subparagraph&#123;Chairman Mao&#125;</span><br><span class="line">is in the center of 天安门广场。</span><br><span class="line">\subsection&#123;Hello 北京&#125;</span><br><span class="line">\paragraph&#123;北京&#125; is an international city。</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure></li><li>然后把边栏中的latex插件点开，点击<code>Recipe:xelatex</code>,如图：<br><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/vscLatex/latex-page.png" alt=""><br>最后点击侧边栏的<code>View LaTeX PDF</code>里面的View in VSCode tab 实现VSC内实时预览，只要文档内容发生改变并保存，且编译通过就能实时显示在右侧的预览屏幕中，当然也可以点击<code>View in web browser</code>实现网络页面预览，如图：<br><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/vscLatex/View-in-vsc.png" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>槎湖望族 戴家</title>
      <link href="/2020/04/02/%E6%A7%8E%E6%B9%96%E6%9C%9B%E6%97%8F-%E6%88%B4%E5%AE%B6/"/>
      <url>/2020/04/02/%E6%A7%8E%E6%B9%96%E6%9C%9B%E6%97%8F-%E6%88%B4%E5%AE%B6/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="0" src="http://v.qq.com/txp/iframe/player.html?origin=https%3A%2F%2Fmp.weixin.qq.com&chid=17&vid=q0367zx0es8&autoplay=false&full=true&show1080p=false&isDebugIframe=false" allowFullScreen="true" height=600px width="100%"></iframe>]]></content>
      
      
      <categories>
          
          <category> 视频分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron-Vue技术笔记一</title>
      <link href="/2020/04/01/Electron-Vue%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
      <url>/2020/04/01/Electron-Vue%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="electron-vue-应用的构建"><a href="#electron-vue-应用的构建" class="headerlink" title="electron-vue 应用的构建"></a>electron-vue 应用的构建</h2><p>&emsp;&emsp;可能会有人认为这个架构构建起来非常简单，不需要指南就可以。甚至从空白到运行软件就三局句命令行的事情（官方就是这么认为的）如图：<br><span id="more"></span><br><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/electronVue.png" alt=""><br>但是下面是我在我的电脑上的实际情况，大家可以进行参考。</p><p>首先要说明的就是我的安装环境(我偏向于在开发过程中使用yarn而不是npm)：<br>yarn的安装命令行（已经安装nodejs的情况下,未安装的链接如下<em>都是官方链接</em>）：</p><p><a href = "https://npm.taobao.org/mirrors/node/v12.16.1/node-v12.16.1-x64.msi">Windows 安装包</a></p><p><a href="https://npm.taobao.org/mirrors/node/v12.16.1/node-v12.16.1.pkg">macOS安装包</a></p><p><a href="https://npm.taobao.org/mirrors/node/v12.16.1/node-v12.16.1.tar.gz">源代码</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm i yarn -g</span><br><span class="line"></span><br><span class="line">NodeJS Version: 12.16.1 LTS</span><br><span class="line">npm Version: 6.13.4</span><br><span class="line">Vue Version: 2.9.6</span><br><span class="line">yarn Version: 1.22.4</span><br></pre></td></tr></table></figure><br>我们接下来要安装全局的脚手架：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure><br>第一步一定是在预定的文件夹中创建一个新的electron-vue项目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init simulatedgreg/electron-vue (project-name here)</span><br></pre></td></tr></table></figure><br>第二步下载依赖：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure><br>第三步本地启动调试版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run dev</span><br></pre></td></tr></table></figure><br>理论上到这里已经结束了，我们应该看到的应用界面是这样的：<br><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/electronVueApp.png" alt=""></p><p>但是呢我一开始并不是这样的界面，专门去GitHub上找了issue，发现是因为NodeJS版本太新导致的，下面是解决方法：</p><p>我一开始看到的界面报错是这样的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ReferenceError: process is not defined</span><br><span class="line"></span><br><span class="line">- index.ejs:11 <span class="built_in">eval</span></span><br><span class="line">  [.]/[html-webpack-plugin]/lib/loader.js!./src/index.ejs:11:2</span><br><span class="line"></span><br><span class="line">- index.ejs:16 module.exports</span><br><span class="line">  [.]/[html-webpack-plugin]/lib/loader.js!./src/index.ejs:16:3</span><br><span class="line"></span><br><span class="line">- index.js:284 </span><br><span class="line"> /[html-webpack-plugin]/index.js:284:18      - runMicrotasks      - task_queues.js:97 processTicksAndRejections     internal/process/task_queues.js:97:5  </span><br></pre></td></tr></table></figure><br>解决方法其实是蛮简单的就是将项目的根目录下的.electron-vue目录中的webpack.renderer.config.js中的HtmlWebpackPlugin的定义修改为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">new HtmlWebpackPlugin(&#123;</span><br><span class="line">     filename: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">     template: path.resolve(__dirname, <span class="string">&#x27;../src/index.ejs&#x27;</span>),</span><br><span class="line">     minify: &#123;</span><br><span class="line">       collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">       removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">       removeComments: <span class="literal">true</span></span><br><span class="line">     &#125;,</span><br><span class="line">     templateParameters(compilation, assets, options) &#123;</span><br><span class="line">       <span class="built_in">return</span> &#123;</span><br><span class="line">         compilation: compilation,</span><br><span class="line">         webpack: compilation.getStats().toJson(),</span><br><span class="line">         webpackConfig: compilation.options,</span><br><span class="line">         htmlWebpackPlugin: &#123;</span><br><span class="line">           files: assets,</span><br><span class="line">           options: options</span><br><span class="line">         &#125;,</span><br><span class="line">         process,</span><br><span class="line">       &#125;;</span><br><span class="line">     &#125;,</span><br><span class="line">     nodeModules: process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span></span><br><span class="line">       ? path.resolve(__dirname, <span class="string">&#x27;../node_modules&#x27;</span>)</span><br><span class="line">       : <span class="literal">false</span></span><br><span class="line">   &#125;), </span><br></pre></td></tr></table></figure><br>再将webpack.web.config.js中的 HtmlWebpackPlugin 的定义修改为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">new HtmlWebpackPlugin(&#123;</span><br><span class="line">     filename: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">     template: path.resolve(__dirname, <span class="string">&#x27;../src/index.ejs&#x27;</span>),</span><br><span class="line">     templateParameters(compilation, assets, options) &#123;</span><br><span class="line">       <span class="built_in">return</span> &#123;</span><br><span class="line">         compilation: compilation,</span><br><span class="line">         webpack: compilation.getStats().toJson(),</span><br><span class="line">         webpackConfig: compilation.options,</span><br><span class="line">         htmlWebpackPlugin: &#123;</span><br><span class="line">           files: assets,</span><br><span class="line">           options: options</span><br><span class="line">         &#125;,</span><br><span class="line">         process,</span><br><span class="line">       &#125;;</span><br><span class="line">     &#125;,</span><br><span class="line">     minify: &#123;</span><br><span class="line">       collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">       removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">       removeComments: <span class="literal">true</span></span><br><span class="line">     &#125;,</span><br><span class="line">     nodeModules: <span class="literal">false</span></span><br><span class="line">   &#125;),</span><br><span class="line">   new webpack.DefinePlugin(&#123;</span><br><span class="line">     <span class="string">&#x27;process.env.IS_WEB&#x27;</span>: <span class="string">&#x27;true&#x27;</span></span><br><span class="line">   &#125;), </span><br></pre></td></tr></table></figure><br>这样就可以基本上完美的解决问题。</p><h2 id="加一笔"><a href="#加一笔" class="headerlink" title="加一笔"></a>加一笔</h2><p>这里再多加一笔，在新版本的electron中可能会出现用require引用的时候报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require not defined</span><br></pre></td></tr></table></figure><br>这个问题的来源是官方修改了<code>nodeIntergration</code>中的默认值，官方描述如下：<br>The default values of nodeIntegration and webviewTag are now false to improve security.<br>所以在新建任何一个需要require的页面时需要添加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">webPreferences: &#123;</span><br><span class="line">        nodeIntegration: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>至此现阶段碰到的问题我已经基本解决，关于Electron-Vue的应用开发的技术笔记会持续进行更新。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目sql配置指南</title>
      <link href="/2020/04/01/SpringBoot%E9%A1%B9%E7%9B%AEsql%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"/>
      <url>/2020/04/01/SpringBoot%E9%A1%B9%E7%9B%AEsql%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp;&emsp;因为最近在进行一个Spring Boot项目的开发，导致很多人来问我项目中的MySQL是怎么配置的以及一系列的问题，所以就把步骤全部写在这里了。<br><span id="more"></span></p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>&emsp;&emsp;首先就是创建本地数据库，根据自己的需要在本地创建一个数据库，比如我的项目就是需要本地数据库hotel只需要在本地的sql命令行中输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database hotel;</span><br></pre></td></tr></table></figure><br>然后可以看到返回了成功的结果</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><ol><li><p>在IDEA中联通本地数据库（IDEA必须是专业版），在侧边栏点击加号按钮，如图：<br><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/addSql.png" alt=""></p></li><li><p>然后在设置界面输入本地数据库的用户名和密码，测试连通性，连通性测试爆红见<a href="https://icimence.cn/2020/03/30/MySQL%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98/">Spring Boot项目中的MySQL的相关问题</a>文章中的解答，实际情况如下图：<br><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/sqlConf.png" alt=""></p></li><li>最后点击OK添加数据库。<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2>这就是最后一步了，找到项目中的<code>application.yml</code>文件将里面的密码和用户名设置为本地的MySQL用户名和密码。<br>找到sql文件夹中的sql文件进行运行同时选择正确的运行环境，如图：<br><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/sqlRuntime.png" alt=""><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2>最终看到如图最后一行表示成功启动项目<br><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/running.png" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot项目中的MySQL的相关问题</title>
      <link href="/2020/03/30/Spring%20Boot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84MySQL%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
      <url>/2020/03/30/Spring%20Boot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84MySQL%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL时区问题"><a href="#MySQL时区问题" class="headerlink" title="MySQL时区问题"></a>MySQL时区问题</h2><h3 id="永久解决方法"><a href="#永久解决方法" class="headerlink" title="永久解决方法"></a>永久解决方法</h3><p>在MySQL的配置文件my.ini中加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default-time_zone = <span class="string">&#x27;+8:00&#x27;</span></span><br></pre></td></tr></table></figure><p>然后重启MySQL就可以了。</p><h3 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h3><p>MySQL时区问题经常出现，每次百度过于头疼，就放在这里了。</p><p>现实中的报错情况如下，如果不同请自行百度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server returns invalid timezone. Go to <span class="string">&#x27;Advanced&#x27;</span> tab and <span class="built_in">set</span> <span class="string">&#x27;serverTimezone&#x27;</span> property manually.</span><br></pre></td></tr></table></figure><p>解决方法也很简单就是在MySQL的时长下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> global time_zone=<span class="string">&#x27;+8:00&#x27;</span>;</span><br></pre></td></tr></table></figure><p>即可连接成功。</p><h3 id="解决方法二"><a href="#解决方法二" class="headerlink" title="解决方法二"></a>解决方法二</h3><p>将图中所示的driver版本调低至5.1</p><p><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/mysqlDriver.png" alt="调整driver版本"></p><h2 id="连接失败（版本问题）"><a href="#连接失败（版本问题）" class="headerlink" title="连接失败（版本问题）"></a>连接失败（版本问题）</h2><p>很多人在启动配置spring boot项目时都会发现数据库连不上这时候要注意只要本地环境没有问题大概率就是版本不匹配造成的。典型的图片：<br><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/sql-could-not-connect.png" alt=""><br>这张图片中出现的问题就是本地的sql的版本比驱动要低，驱动选择了默认的MySQL8.0但是本地的版本却只有5.7.28，所以报错，修改后成功连接。</p><p>还有一种较为常见的原因在于项目是下载来的开源项目，导致配置文件中的驱动版本号不正确，检查pom.xml文件中的版本号并进行相应的更改即可。</p>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于并查集的一道题目（Python）</title>
      <link href="/2020/03/29/%E5%85%B3%E4%BA%8E%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%9A%84%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE%EF%BC%88Python%EF%BC%89/"/>
      <url>/2020/03/29/%E5%85%B3%E4%BA%8E%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%9A%84%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE%EF%BC%88Python%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="题目概要"><a href="#题目概要" class="headerlink" title="题目概要"></a>题目概要</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个字符串 s，以及该字符串中的一些「索引对」数组 pairs，其中 pairs[i] = [a, b] 表示字符串中的两个索引（编号从 0 开始）。</p><p>你可以 任意多次交换 在 pairs 中任意一对索引处的字符。</p><p>返回在经过若干次交换后，s 可以变成的按字典序最小的字符串。<br><span id="more"></span></p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一个字符串 s，以及该字符串中的一些「索引对」数组 pairs，其中 pairs[i] = [a, b] 表示字符串中的两个索引（编号从 0 开始）。</span><br><span class="line">1 &lt;= s.length &lt;= 10^5</span><br><span class="line">0 &lt;= pairs.length &lt;= 10^5</span><br><span class="line">0 &lt;= pairs[i][0], pairs[i][1] &lt; s.length</span><br><span class="line">s 中只含有小写英文字母</span><br></pre></td></tr></table></figure><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回在经过若干次交换后，s 可以变成的按字典序最小的字符串。</span><br></pre></td></tr></table></figure><h3 id="测试样例"><a href="#测试样例" class="headerlink" title="测试样例"></a>测试样例</h3><p>样例1: 输入-输出-解释<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dcab</span><br><span class="line">[[0,3],[1,2]]</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bacd</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">交换 s[0] 和 s[3], s = <span class="string">&quot;bcad&quot;</span></span><br><span class="line">交换 s[1] 和 s[2], s = <span class="string">&quot;bacd&quot;</span></span><br></pre></td></tr></table></figure></p><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><code>LeetCode</code></p><h2 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">a, x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a[x] == x:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a[x] = find(a, a[x])</span><br><span class="line">        <span class="keyword">return</span> a[x]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="built_in">input</span>()</span><br><span class="line">swap = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">a = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))]</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> swap:</span><br><span class="line">    a[find(a, y)] = find(a, a[x])</span><br><span class="line">a = [find(a, b) <span class="keyword">for</span> b <span class="keyword">in</span> a]</span><br><span class="line"></span><br><span class="line">linked = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line">    <span class="keyword">if</span> v <span class="keyword">in</span> linked:</span><br><span class="line">        linked[v].append(k)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        linked[v] = [k]</span><br><span class="line"></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> linked.values():</span><br><span class="line">    v.sort()</span><br><span class="line">    t = [s[loc] <span class="keyword">for</span> loc <span class="keyword">in</span> v]</span><br><span class="line">    t.sort()</span><br><span class="line">    res += [(v[i], t[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v))]</span><br><span class="line">res.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([v <span class="keyword">for</span> k, v <span class="keyword">in</span> res]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS环境变量编辑</title>
      <link href="/2020/03/28/MacOS%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E7%BC%96%E8%BE%91/"/>
      <url>/2020/03/28/MacOS%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E7%BC%96%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<p>首先Windows和macOS最大的区别就是环境变量的配置过程中有没有所谓的图形界面，在macOS中的环境变量的编辑方法直接放在下面。<br><span id="more"></span><br>首先要打开一个terminal（终端）然后输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><br><em>下面的步骤熟悉vim操作的可以跳过</em></p><ol><li>Vim编辑模式下首先按一下<code>i</code>进入编辑模式，进入编辑模式的标志就是在终端界面的左下角有一个<code>--INSERT--</code>提示</li><li>按照下面的要求修改这个文件</li><li>按<code>esc</code>键退出编辑模式</li><li>输入<code>:wq</code>保存并退出</li></ol><p>下面就是加入的代码，在最后一行加入即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/mysql/bin</span><br></pre></td></tr></table></figure><br>退出Vim。</p><p>运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><br>让配置立即生效。</p><p>然后可以在terminal中试一试命令是否能自动补全，如果出现了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsh -<span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><br>同样的方法打开<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><br>不管里面有没有代码只要在最后加一行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><br>同样的保存并退出即可。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew的一些诡异的问题解决</title>
      <link href="/2020/03/28/Homebrew%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%A1%E5%BC%82%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/03/28/Homebrew%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%A1%E5%BC%82%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="Homebrew的换源问题"><a href="#Homebrew的换源问题" class="headerlink" title="Homebrew的换源问题"></a>Homebrew的换源问题</h2><p>关于这个问题在前一篇文章中有提及，但是在实际的操作过程中发现一个问题就是下载十分的缓慢。这里提供一种方法可以在下载的时候就进行一定的加速。</p><h3 id="第一步，获取install文件"><a href="#第一步，获取install文件" class="headerlink" title="第一步，获取install文件"></a>第一步，获取install文件</h3><p>就是把官网的下载脚本下载下来。<br><span id="more"></span><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install &gt;&gt; brew_install</span><br></pre></td></tr></table></figure></p><h3 id="第二步，更改脚本中的链接，替换镜像"><a href="#第二步，更改脚本中的链接，替换镜像" class="headerlink" title="第二步，更改脚本中的链接，替换镜像"></a>第二步，更改脚本中的链接，替换镜像</h3><p>下面的这两句：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BREW_REPO = https://github.com/Homebrew/brew.freeze</span><br><span class="line"></span><br><span class="line">CORE_TAP_REPO = https://github.com/Homebrew/homebrew-core.freeze</span><br></pre></td></tr></table></figure><br>更改为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BREW_REPO = https://mirrors.ustc.edu.cn/brew.git .freeze </span><br><span class="line"></span><br><span class="line">CORE_TAP_REPO = https://mirrors.ustc.edu.cn/homebrew-core.git.freeze</span><br></pre></td></tr></table></figure><br>这样就是使用了中科大的镜像源。</p><h3 id="第三步，执行安装脚本"><a href="#第三步，执行安装脚本" class="headerlink" title="第三步，执行安装脚本"></a>第三步，执行安装脚本</h3><p>使用<code>Ruby</code>进行安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby brew_install</span><br></pre></td></tr></table></figure><br>这样以后y应该会有报错的产生这时候将homebrew的核心换源，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://mirrors.ustc.edu.cn/homebrew-core.git/ /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core --depth=1</span><br></pre></td></tr></table></figure><br>然后再进行一次换源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/brew.git </span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git </span><br></pre></td></tr></table></figure><br>最后执行更新配置代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><br>用一个命令检查安装状态：</p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew doctor</span><br></pre></td></tr></table></figure></h2><h2 id="Home-brew-权限不足问题"><a href="#Home-brew-权限不足问题" class="headerlink" title="Home brew 权限不足问题"></a>Home brew 权限不足问题</h2><p>在个别的情况中发现brew install时会产生权限不足的问题下面是解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $(whoami):admin /usr/<span class="built_in">local</span>  </span><br><span class="line">sudo chown -R $(whoami) Homebrew安装路径</span><br><span class="line">brew doctor  </span><br><span class="line">brew prune  </span><br><span class="line">brew update  </span><br></pre></td></tr></table></figure><hr><h2 id="Homebrew的卸载问题"><a href="#Homebrew的卸载问题" class="headerlink" title="Homebrew的卸载问题"></a>Homebrew的卸载问题</h2><p>这边提供两个方法。</p><h4 id="官方方法"><a href="#官方方法" class="headerlink" title="官方方法"></a>官方方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>&quot;</span></span><br></pre></td></tr></table></figure><h4 id="第三方的暴力方法"><a href="#第三方的暴力方法" class="headerlink" title="第三方的暴力方法"></a>第三方的暴力方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> `brew prefix`</span><br><span class="line">brew prune</span><br><span class="line">rm `git ls-files`</span><br><span class="line">rm -r /usr/<span class="built_in">local</span>/Homebrew</span><br><span class="line">rm -rf .git</span><br><span class="line">rm -rf ~/Library/Caches/Homebrew</span><br><span class="line">rm -rf /usr/<span class="built_in">local</span>/opt</span><br><span class="line">rm -rf /usr/<span class="built_in">local</span>/Caskroom</span><br><span class="line">rm -rf /usr/<span class="built_in">local</span>/var/homebrew</span><br></pre></td></tr></table></figure><p>如果权限不够使用sudo</p><p>本文借鉴了<a href="https://blog.csdn.net/qq_41234116/article/details/79366454">https://blog.csdn.net/qq_41234116/article/details/79366454</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>换源大集合（持续更新）</title>
      <link href="/2020/03/26/%E6%8D%A2%E6%BA%90%E5%A4%A7%E9%9B%86%E5%90%88/"/>
      <url>/2020/03/26/%E6%8D%A2%E6%BA%90%E5%A4%A7%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="npm换源"><a href="#npm换源" class="headerlink" title="npm换源"></a>npm换源</h2><p>&emsp;&emsp;众所周知的就是maven和npm在国内下载速度极其缓慢，慢到令人难以置信，下面就是解决方法，其中npm较为简单，只用一句命令行就可以搞定,在任意cmd中键入回车即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><br><span id="more"></span><br>当然提供单次使用方法，但是如果长期在国内强烈建议永久换源。下面是单次换源命令行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><h2 id="maven换源"><a href="#maven换源" class="headerlink" title="maven换源"></a>maven换源</h2><p>在windows环境中一旦安装配置完maven应该在<code>C:\Users\“你的用户昵称”\.m2</code>文件目录（macOS系统是隐藏文件夹，需要快捷键<code>command+shift+&gt;</code>来显示隐藏文件夹<em>同样的快捷键还原隐藏</em>）下有一个<code>repository</code>文件夹，不要进入就在当前的文件夹下加一个名为<code>settings.xml</code>文件，文件内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;settings xmlns=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="line">xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;mirrors&gt;</span><br><span class="line">        &lt;!-- 阿里云仓库 --&gt;</span><br><span class="line">        &lt;mirror&gt;</span><br><span class="line">            &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">            &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;</span><br><span class="line">        &lt;/mirror&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 中央仓库1 --&gt;</span><br><span class="line">        &lt;mirror&gt;</span><br><span class="line">            &lt;id&gt;repo1&lt;/id&gt;</span><br><span class="line">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">            &lt;name&gt;Human Readable Name <span class="keyword">for</span> this Mirror.&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt;</span><br><span class="line">        &lt;/mirror&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 中央仓库2 --&gt;</span><br><span class="line">        &lt;mirror&gt;</span><br><span class="line">            &lt;id&gt;repo2&lt;/id&gt;</span><br><span class="line">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">            &lt;name&gt;Human Readable Name <span class="keyword">for</span> this Mirror.&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://repo2.maven.org/maven2/&lt;/url&gt;</span><br><span class="line">        &lt;/mirror&gt;</span><br><span class="line">    &lt;/mirrors&gt; </span><br><span class="line"></span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><br>配置完成后进入intelliJ的maven项目，然后打开设置或者使用快捷键<code>control+alt+s</code>搜索maven在如图所示<code>User Settings File</code>位置勾选上<code>override</code>。<br/><br><img src="https://cdn.jsdelivr.net/gh/icimence/CDN/postimg/settings.png" alt=""><br>大功告成，享受国内的高速下载吧！<br /></p><h2 id="Homebrew换源"><a href="#Homebrew换源" class="headerlink" title="Homebrew换源"></a>Homebrew换源</h2><p>安装在这里不再赘述，直接上代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">替换brew.git:</span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line">中科大:</span><br><span class="line">$ git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line">清华:</span><br><span class="line">$ git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line">替换homebrew-core.git:</span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="line"></span><br><span class="line">中科大:</span><br><span class="line">$ git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"></span><br><span class="line">清华:</span><br><span class="line">$ git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">替换homebrew-bottles:</span><br><span class="line"></span><br><span class="line">中科大:</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line">清华:</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line">应用：</span><br><span class="line">$ brew update</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 换源 </tag>
            
            <tag> 软工 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于CPP处理输入的一些说明和模板</title>
      <link href="/2020/03/22/%E5%85%B3%E4%BA%8ECPP%E5%A4%84%E7%90%86%E8%BE%93%E5%85%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%B4%E6%98%8E%E5%92%8C%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/03/22/%E5%85%B3%E4%BA%8ECPP%E5%A4%84%E7%90%86%E8%BE%93%E5%85%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%B4%E6%98%8E%E5%92%8C%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="目前的状况"><a href="#目前的状况" class="headerlink" title="目前的状况"></a>目前的状况</h2><p>&emsp;&emsp;先说明一下这篇文章诞生的原因，做题目的时候碰到了CPP的输入它长这样<code>[1, 0, -1, 0, 2, -1]</code>实在是太不友好了，只能自己写输入处理，然后呢就有了如下代码：<br><span id="more"></span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string str;</span><br><span class="line"><span class="built_in">getline</span>(cin, str);</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line">cin &gt;&gt; res;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> *pt = <span class="keyword">new</span> <span class="keyword">int</span>[index];</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">&#x27;[&#x27;</span> || str[i] == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">string temp_str = str.<span class="built_in">substr</span>(i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> temp2 = <span class="built_in">stoi</span>(temp_str);</span><br><span class="line">*(pt + index) = temp2;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">cout &lt;&lt; *(pt + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>成功的创建出了一个适合的动态数组，然后助教发话了，不能使用string容器。。。。。</p><p>现在正在疯狂诅咒助教，并且想办法补救这个程序。</p><p>To Be Continued。。。。</p><h2 id="更新他来了"><a href="#更新他来了" class="headerlink" title="更新他来了"></a>更新他来了</h2><p>&emsp;&emsp;在经过了一段时间的和char数组搏斗的过程后我成功的搞定了这个麻烦的输出，如果大家有更好的方法一定要联系我，这对我很重要！<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">char</span> input[MAX];</span><br><span class="line">cin.<span class="built_in">getline</span>(input,MAX);</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line">cin &gt;&gt; res;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in"><span class="keyword">sizeof</span></span>(input); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (input[i] == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> *pt = <span class="keyword">new</span> <span class="keyword">int</span>[index];</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">bool</span> negFlag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in"><span class="keyword">sizeof</span></span>(input); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (input[i] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">negFlag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (input[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; input[i]&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (!flag)</span><br><span class="line">temp += input[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">temp = temp * <span class="number">10</span> + input[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((input[i] &lt; <span class="string">&#x27;0&#x27;</span> || input[i] &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; flag) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (negFlag) &#123;</span><br><span class="line">*(pt + index) = -temp;</span><br><span class="line">negFlag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">*(pt + index) = temp;</span><br><span class="line">index++;</span><br><span class="line">temp = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">cout &lt;&lt; *(pt + i)&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="进阶方法"><a href="#进阶方法" class="headerlink" title="进阶方法"></a>进阶方法</h2><p>在做了一天的题之后回来看了一下发现自己实在是太菜了，为什么没有想到更好的办法，下面这个是一种比较通用的cpp的特殊格式输入的处理方法，可以基本上达到split函数的效果。<br><em>由于这个代码的编译环境是msvc所以有一些动态数组的部分可能有点怪怪的</em><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">int</span> *input = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (c != <span class="string">&#x27;]&#x27;</span> &amp;&amp; c != EOF) &#123;</span><br><span class="line"><span class="keyword">if</span> (c != <span class="string">&#x27; &#x27;</span> &amp;&amp; c!= <span class="string">&#x27;,&#x27;</span> &amp;&amp; c != <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">ungetc</span>(c, stdin);</span><br><span class="line">cin &gt;&gt; temp;</span><br><span class="line">input[index] = temp;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近公共祖先问题</title>
      <link href="/2020/03/21/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%E9%97%AE%E9%A2%98/"/>
      <url>/2020/03/21/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="如题，直接上代码"><a href="#如题，直接上代码" class="headerlink" title="如题，直接上代码"></a>如题，直接上代码</h2><p><em>这次这个是从学长那边打听到的面试的题目以及自己在做OJ题目的过程中碰到了</em><br><span id="more"></span><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包含自身也算祖先</span></span><br><span class="line"><span class="comment">//有三种情况:  1.一个结点在左子树,另一个结点在右子树(公共祖先是root)</span></span><br><span class="line">            <span class="comment">//2.两个结点都在左子树或者都在右子树</span></span><br><span class="line">            <span class="comment">//3.其中有个结点是root(公共祖先则是root)</span></span><br><span class="line"> <span class="comment">//因为题中已经说明有树,所以不考虑root为null情况 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestcommomAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == p || root == q)&#123;  <span class="comment">//其中有个结点是root,则公共祖先是root</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> pInLeft = search(root.left, p);<span class="comment">//判断p和传进去的某个结点的引用是否相等,不是和具体的值相等</span></span><br><span class="line">    <span class="keyword">boolean</span> qInLeft = search(root.left, q);</span><br><span class="line">    <span class="keyword">if</span>(pInLeft &amp;&amp; qInLeft)&#123;    <span class="comment">//两个结点都在左子树</span></span><br><span class="line">        <span class="keyword">return</span> lowestcommomAncestor(root.left,p,q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!pInLeft &amp;&amp; !qInLeft)&#123;  <span class="comment">//两个结点都在右子树</span></span><br><span class="line">        <span class="keyword">return</span> lowestcommomAncestor(root.right,p,q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;  <span class="comment">//一个结点在左子树,一个结点在右子树,公共祖先是root</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(TreeNode root, TreeNode n)</span></span>&#123;  <span class="comment">//等于就是n和root是同一个结点</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root == n)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(search(root.left, n))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> search(root.right, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>代码中的描述十分清晰这里我就不再补充，只是作为一个模板放在这里供大家参考。</p><p>下面额外提供一个Python版本供参考。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BTree</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.data = data  <span class="comment"># 数据域</span></span><br><span class="line">        self.left = left  <span class="comment"># 左子树</span></span><br><span class="line">        self.right = right  <span class="comment"># 右子树</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">searchTree</span>(<span class="params">root_temp, node_f</span>):</span></span><br><span class="line">    <span class="keyword">if</span> root_temp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> root_temp == node_f:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> searchTree(root_temp.left, node_f):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> searchTree(root_temp.right, node_f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchLowestCommonAncestor</span>(<span class="params">root_f, node1, node2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> root_f == node1 <span class="keyword">or</span> root_f == node2:</span><br><span class="line">        <span class="keyword">return</span> root_f</span><br><span class="line">    pInLeft = searchTree(root_f.left, node1)</span><br><span class="line">    qInLeft = searchTree(root_f.left, node2)</span><br><span class="line">    <span class="keyword">if</span> qInLeft <span class="keyword">and</span> pInLeft:</span><br><span class="line">        <span class="keyword">return</span> searchLowestCommonAncestor(root_f.left, node1, node2)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">not</span> pInLeft) <span class="keyword">and</span> (<span class="keyword">not</span> qInLeft):</span><br><span class="line">        <span class="keyword">return</span> searchLowestCommonAncestor(root_f.right, node1, node2)</span><br><span class="line">    <span class="keyword">return</span> root_f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nums, rootNum = (<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split())</span><br><span class="line">list_all = []</span><br><span class="line">Node_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nums):</span><br><span class="line">    list_temp = <span class="built_in">input</span>().split()</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_temp)):</span><br><span class="line">        list_temp[j] = <span class="built_in">int</span>(list_temp[j])</span><br><span class="line">    list_all.append(list_temp)</span><br><span class="line">q, p = (<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nums):</span><br><span class="line">    Node_list.append(BTree(list_all[i][<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nums):</span><br><span class="line">    opNode = Node_list[i]</span><br><span class="line">    opNode_inf = list_all[i]</span><br><span class="line">    opNode_left = opNode_inf[<span class="number">1</span>]</span><br><span class="line">    opNode_right = opNode_inf[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, nums):</span><br><span class="line">        <span class="keyword">if</span> Node_list[j].data == opNode_left:</span><br><span class="line">            opNode.left = Node_list[j]</span><br><span class="line">        <span class="keyword">elif</span> Node_list[j].data == opNode_right:</span><br><span class="line">            opNode.right = Node_list[j]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Node_list:</span><br><span class="line">    <span class="keyword">if</span> i.data == p:</span><br><span class="line">        quesnode1 = i</span><br><span class="line">    <span class="keyword">if</span> i.data == q:</span><br><span class="line">        quesnode2 = i</span><br><span class="line">    <span class="keyword">if</span> i.data == rootNum:</span><br><span class="line">        root = i</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(searchLowestCommonAncestor(root,quesnode1,quesnode2).data)</span><br></pre></td></tr></table></figure><br>Python代码可以直接运行并且按照一定的格式输入，格式要求如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一行输入两个整数 n 和 root，n 表示二叉树的总节点个数，root 表示二叉树的根节点。</span><br><span class="line"></span><br><span class="line">以下 n 行每行三个整数 fa，lch，rch，表示 fa 的左儿子为 lch，右儿子为 rch。(如果 lch 为 0 则表示 fa 没有左儿子，rch同理)</span><br><span class="line"></span><br><span class="line">最后一行为节点 o1 和 o2。</span><br></pre></td></tr></table></figure><br>这里再额外提供一个示例测试用例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">8 1</span><br><span class="line">1 2 3</span><br><span class="line">2 4 5</span><br><span class="line">4 0 0</span><br><span class="line">5 0 0</span><br><span class="line">3 6 7</span><br><span class="line">6 0 0</span><br><span class="line">7 8 0</span><br><span class="line">8 0 0</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后缀数组</title>
      <link href="/2020/03/21/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
      <url>/2020/03/21/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="关于后缀数组的一些说明"><a href="#关于后缀数组的一些说明" class="headerlink" title="关于后缀数组的一些说明"></a>关于后缀数组的一些说明</h2><p>&emsp;&emsp;本文撰写的目的在于做题时发现经常会有题目出现后缀数组的解法，而普通的暴力解法容易引起超时，所以特意在网上学了后缀数组，但是感觉网站的一些版本都不是特别清晰，所以在自己的博客中打算自己写一个份算法教程。<br><span id="more"></span></p><h2 id="遇事不决上代码"><a href="#遇事不决上代码" class="headerlink" title="遇事不决上代码"></a>遇事不决上代码</h2><p>请先欣赏Cpp的代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> tax[MAX],rak[MAX],tp[MAX],sa[MAX];</span><br><span class="line"><span class="keyword">char</span> s[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)tax[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)tax[a[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)tax[i]+=tax[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)sa[tax[a[b[i]]]--]=b[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">int</span> r[],<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a]==r[b]&amp;&amp;r[a+k]==r[b+k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sa</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    m=<span class="built_in">max</span>(m,a[i]=s[i]-<span class="string">&#x27;0&#x27;</span>),b[i]=i;</span><br><span class="line">    <span class="built_in">sort</span>(a,b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>,j=<span class="number">1</span>;p&lt;n;j&lt;&lt;=<span class="number">1</span>,m=p)&#123;</span><br><span class="line">        p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=j;i++)b[++p]=n-j+i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(sa[i]&gt;j)b[++p]=sa[i]-j;</span><br><span class="line">        <span class="built_in">sort</span>(a,b);</span><br><span class="line">        <span class="keyword">int</span> *t=a;a=b;b=t;</span><br><span class="line">        a[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        a[sa[i]]=<span class="built_in">comp</span>(b,sa[i],sa[i<span class="number">-1</span>],j)?p:++p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">get_sa</span>(rak,tp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,sa[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="开始前的准备"><a href="#开始前的准备" class="headerlink" title="开始前的准备"></a>开始前的准备</h2><p>&emsp;&emsp;在这里先进行一些后缀数组中的说明：首先让我们看一看这个程序中要用到的诸多参数，都是令人迷惑的东西。</p><ol><li>sa[i] = j， 表示第i名的后缀是从j开始的，这里需要注意的是j是下标，不是字符。</li><li>rk[i] = j， 表示从i下标开始的后缀的排名是j，这里可以注意到是和sa数组互逆的。</li><li>tp[i] = j， 表示第二关键字排名为i的后缀是从j开始的，同样储存的是下标。</li><li>tax[i] = j， 表示第一关键字排名为i的数，有j个<br>下面就是具体的后缀排序的流程：<br /><svg height="852.59375" version="1.1" width="224.5" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="overflow: hidden; position: relative;" viewBox="0 0 224.5 852.59375" preserveAspectRatio="xMidYMid meet"><desc style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">Created with Raphaël 2.2.0</desc><defs style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"><marker id="raphael-marker-endblock33-objyp1f4" markerHeight="3" markerWidth="3" orient="auto" refX="1.5" refY="1.5" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#raphael-marker-block" transform="rotate(180 1.5 1.5) scale(0.6,0.6)" stroke-width="1.6667" fill="black" stroke="none" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></use></marker><marker id="raphael-marker-endblock33-objnz3e9" markerHeight="3" markerWidth="3" orient="auto" refX="1.5" refY="1.5" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#raphael-marker-block" transform="rotate(180 1.5 1.5) scale(0.6,0.6)" stroke-width="1.6667" fill="black" stroke="none" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></use></marker><marker id="raphael-marker-endblock33-objgbifc" markerHeight="3" markerWidth="3" orient="auto" refX="1.5" refY="1.5" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#raphael-marker-block" transform="rotate(180 1.5 1.5) scale(0.6,0.6)" stroke-width="1.6667" fill="black" stroke="none" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></use></marker><marker id="raphael-marker-endblock33-objuc0ol" markerHeight="3" markerWidth="3" orient="auto" refX="1.5" refY="1.5" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#raphael-marker-block" transform="rotate(180 1.5 1.5) scale(0.6,0.6)" stroke-width="1.6667" fill="black" stroke="none" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></use></marker><marker id="raphael-marker-endblock33-objc9uj1" markerHeight="3" markerWidth="3" orient="auto" refX="1.5" refY="1.5" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#raphael-marker-block" transform="rotate(180 1.5 1.5) scale(0.6,0.6)" stroke-width="1.6667" fill="black" stroke="none" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></use></marker><marker id="raphael-marker-endblock33-objber2r" markerHeight="3" markerWidth="3" orient="auto" refX="1.5" refY="1.5" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#raphael-marker-block" transform="rotate(180 1.5 1.5) scale(0.6,0.6)" stroke-width="1.6667" fill="black" stroke="none" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></use></marker><marker id="raphael-marker-endblock33-objwna55" markerHeight="3" markerWidth="3" orient="auto" refX="1.5" refY="1.5" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#raphael-marker-block" transform="rotate(180 1.5 1.5) scale(0.6,0.6)" stroke-width="1.6667" fill="black" stroke="none" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></use></marker></defs><rect x="0" y="0" width="50" height="34" rx="20" ry="20" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);" stroke-width="2" class="flowchart" id="st" transform="matrix(1,0,0,1,75.75,35.375)"></rect><text x="10" y="17" text-anchor="start" font-family="sans-serif" font-size="14px" stroke="none" fill="#000000" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;" id="stt" class="flowchartt" font-weight="normal" transform="matrix(1,0,0,1,75.75,35.375)" stroke-width="1"><tspan dy="4" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">开始</tspan></text><rect x="0" y="0" width="140.1875" height="50.796875" rx="0" ry="0" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);" stroke-width="2" class="flowchart" id="op1" transform="matrix(1,0,0,1,30.6563,146.3516)"></rect><text x="10" y="25.3984375" text-anchor="start" font-family="sans-serif" font-size="14px" stroke="none" fill="#000000" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;" id="op1t" class="flowchartt" font-weight="normal" transform="matrix(1,0,0,1,30.6563,146.3516)" stroke-width="1"><tspan dy="-4.390625" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">把每个字母排序</tspan><tspan dy="16.8" x="10" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">得到第一次的 sa 值</tspan></text><rect x="0" y="0" width="140.1875" height="50.796875" rx="0" ry="0" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);" stroke-width="2" class="flowchart" id="op2" transform="matrix(1,0,0,1,30.6563,274.125)"></rect><text x="10" y="25.3984375" text-anchor="start" font-family="sans-serif" font-size="14px" stroke="none" fill="#000000" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;" id="op2t" class="flowchartt" font-weight="normal" transform="matrix(1,0,0,1,30.6563,274.125)" stroke-width="1"><tspan dy="-4.390625" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">根据上一次的 sa 值</tspan><tspan dy="16.8" x="10" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">得到第二关键字</tspan></text><rect x="0" y="0" width="133" height="50.796875" rx="0" ry="0" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);" stroke-width="2" class="flowchart" id="op3" transform="matrix(1,0,0,1,34.25,401.8984)"></rect><text x="10" y="25.3984375" text-anchor="start" font-family="sans-serif" font-size="14px" stroke="none" fill="#000000" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;" id="op3t" class="flowchartt" font-weight="normal" transform="matrix(1,0,0,1,34.25,401.8984)" stroke-width="1"><tspan dy="-4.390625" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">按现在关键字排序</tspan><tspan dy="16.8" x="10" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">得到新的 sa 值</tspan></text><rect x="0" y="0" width="139.1875" height="50.796875" rx="0" ry="0" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);" stroke-width="2" class="flowchart" id="op4" transform="matrix(1,0,0,1,31.1563,529.6719)"></rect><text x="10" y="25.3984375" text-anchor="start" font-family="sans-serif" font-size="14px" stroke="none" fill="#000000" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;" id="op4t" class="flowchartt" font-weight="normal" transform="matrix(1,0,0,1,31.1563,529.6719)" stroke-width="1"><tspan dy="-4.390625" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">根据现在的 sa 得到</tspan><tspan dy="16.8" x="10" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">新的第一关键字</tspan></text><path fill="#ffffff" stroke="#000000" d="M48.375,24.1875L0,48.375L96.75,96.75L193.5,48.375L96.75,0L0,48.375" stroke-width="2" font-family="sans-serif" font-weight="normal" id="cond" class="flowchart" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-family: sans-serif; font-weight: normal;" transform="matrix(1,0,0,1,4,634.4688)"></path><text x="53.375" y="48.375" text-anchor="start" font-family="sans-serif" font-size="14px" stroke="none" fill="#000000" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;" id="condt" class="flowchartt" font-weight="normal" transform="matrix(1,0,0,1,4,634.4688)" stroke-width="1"><tspan dy="4" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">排名各不相同？</tspan></text><rect x="0" y="0" width="50" height="34" rx="20" ry="20" fill="#ffffff" stroke="#000000" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);" stroke-width="2" class="flowchart" id="e" transform="matrix(1,0,0,1,75.75,816.5938)"></rect><text x="10" y="17" text-anchor="start" font-family="sans-serif" font-size="14px" stroke="none" fill="#000000" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;" id="et" class="flowchartt" font-weight="normal" transform="matrix(1,0,0,1,75.75,816.5938)" stroke-width="1"><tspan dy="4" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">结束</tspan></text><path fill="none" stroke="#000000" d="M100.75,69.375C100.75,69.375,100.75,129.16836858727038,100.75,143.3576152344449" stroke-width="2" marker-end="url(#raphael-marker-endblock33-objyp1f4)" font-family="sans-serif" font-weight="normal" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-family: sans-serif; font-weight: normal;"></path><path fill="none" stroke="#000000" d="M100.75,197.1484375C100.75,197.1484375,100.75,256.9418060872704,100.75,271.1310527344449" stroke-width="2" marker-end="url(#raphael-marker-endblock33-objnz3e9)" font-family="sans-serif" font-weight="normal" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-family: sans-serif; font-weight: normal;"></path><path fill="none" stroke="#000000" d="M100.75,324.921875C100.75,324.921875,100.75,384.7152435872704,100.75,398.9044902344449" stroke-width="2" marker-end="url(#raphael-marker-endblock33-objgbifc)" font-family="sans-serif" font-weight="normal" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-family: sans-serif; font-weight: normal;"></path><path fill="none" stroke="#000000" d="M100.75,452.6953125C100.75,452.6953125,100.75,512.4886810872704,100.75,526.6779277344449" stroke-width="2" marker-end="url(#raphael-marker-endblock33-objuc0ol)" font-family="sans-serif" font-weight="normal" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-family: sans-serif; font-weight: normal;"></path><path fill="none" stroke="#000000" d="M100.75,580.46875C100.75,580.46875,100.75,620.1228499412537,100.75,631.4691890846007" stroke-width="2" marker-end="url(#raphael-marker-endblock33-objc9uj1)" font-family="sans-serif" font-weight="normal" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-family: sans-serif; font-weight: normal;"></path><path fill="none" stroke="#000000" d="M100.75,731.21875C100.75,731.21875,100.75,798.4575031027198,100.75,813.5927888353144" stroke-width="2" marker-end="url(#raphael-marker-endblock33-objber2r)" font-family="sans-serif" font-weight="normal" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-family: sans-serif; font-weight: normal;"></path><text x="105.75" y="741.21875" text-anchor="start" font-family="sans-serif" font-size="14px" stroke="none" fill="#000000" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;" font-weight="normal" stroke-width="1"><tspan dy="4" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">yes</tspan></text><path fill="none" stroke="#000000" d="M197.5,682.84375C197.5,682.84375,222.5,682.84375,222.5,682.84375C222.5,682.84375,222.5,249.125,222.5,249.125C222.5,249.125,100.75,249.125,100.75,249.125C100.75,249.125,100.75,264.49844455718994,100.75,271.13424777425826" stroke-width="2" marker-end="url(#raphael-marker-endblock33-objwna55)" font-family="sans-serif" font-weight="normal" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-family: sans-serif; font-weight: normal;"></path><text x="202.5" y="672.84375" text-anchor="start" font-family="sans-serif" font-size="14px" stroke="none" fill="#000000" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); text-anchor: start; font-family: sans-serif; font-size: 14px; font-weight: normal;" font-weight="normal" stroke-width="1"><tspan dy="4" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">no</tspan></text></svg></li></ol><hr><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>建在就是可以进行代码分析的时候了。<br>首先说的是代码中的一个优化，在一般的过程中可能有人认为吧关键字放到pair中进行一次sort就可以解决，但是这里要介绍一种基数排序。</p><p>具体的代码如下；<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)tax[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)tax[a[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)tax[i]+=tax[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)sa[tax[a[b[i]]]--]=b[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="最熟悉的图他来了"><a href="#最熟悉的图他来了" class="headerlink" title="最熟悉的图他来了"></a>最熟悉的图他来了</h2><p>倍增的图就不用我多说了<br><img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/c0=baike92,5,5,92,30/sign=ab8bceba9213b07ea9b0585a6dbefa46/c2cec3fdfc03924586f1a8948694a4c27c1e25e0.jpg" alt=""></p><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么在hexo博客中使用latex格式的数学公式</title>
      <link href="/2020/03/20/%E6%80%8E%E4%B9%88%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E4%BD%BF%E7%94%A8latex%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
      <url>/2020/03/20/%E6%80%8E%E4%B9%88%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E4%BD%BF%E7%94%A8latex%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步：安装Kramed"><a href="#第一步：安装Kramed" class="headerlink" title="第一步：安装Kramed"></a>第一步：安装Kramed</h2><p>hexo 默认的渲染引擎是 marked，但是 marked 不支持 mathjax。，所以需要更换Hexo的markdown渲染引擎为hexo-renderer-kramed引擎，后者支持mathjax公式输出。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><br><span id="more"></span></p><h2 id="第二步：更改文件的配置"><a href="#第二步：更改文件的配置" class="headerlink" title="第二步：更改文件的配置"></a>第二步：更改文件的配置</h2><p>打开<code>/node_modules/hexo-renderer-kramed/lib/renderer.js</code>，将其中的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Change inline math rule</span><br><span class="line"><span class="keyword">function</span> formatText(text) &#123;</span><br><span class="line">    // Fit kramed<span class="string">&#x27;s rule: $$ + \1 + $$</span></span><br><span class="line"><span class="string">    return text.replace(/`\$(.*?)\$`/g, &#x27;</span>$$$$$1$$$$<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><br>更改为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Change inline math rule</span><br><span class="line"><span class="keyword">function</span> formatText(text) &#123;</span><br><span class="line">    <span class="built_in">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="第三步：换包，原有的hexo-math停用，使用新的mathjax包"><a href="#第三步：换包，原有的hexo-math停用，使用新的mathjax包" class="headerlink" title="第三步：换包，原有的hexo-math停用，使用新的mathjax包"></a>第三步：换包，原有的hexo-math停用，使用新的mathjax包</h2><ol><li>卸载hexo-math：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-math --save</span><br></pre></td></tr></table></figure></li><li>安装hexo-renderer-mathjax包：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure><h2 id="第四步更新刚安装的mathjax中的配置"><a href="#第四步更新刚安装的mathjax中的配置" class="headerlink" title="第四步更新刚安装的mathjax中的配置"></a>第四步更新刚安装的mathjax中的配置</h2>打开<code>/node_modules/hexo-renderer-mathjax/mathjax.html</code><br>注释掉原本最后一行的script引用，使用新的引用：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="第五步：更改默认转义规则"><a href="#第五步：更改默认转义规则" class="headerlink" title="第五步：更改默认转义规则"></a>第五步：更改默认转义规则</h2>因为LaTeX与markdown语法有语义冲突，所以 hexo 默认的转义规则会将一些字符进行转义，所以我们需要对默认的规则进行修改.<br>打开<code>/node_modules\kramed\lib\rules\inline.js</code></li><li>将<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">escape: /^\\([\\`*&#123;&#125;\[\]()<span class="comment">#$+\-.!_&gt;])/,</span></span><br></pre></td></tr></table></figure>更改为<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">escape: /^\\([`*\[\]()<span class="comment"># +\-.!_&gt;])/,</span></span><br></pre></td></tr></table></figure></li><li>将<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure>更改为<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2>因为我使用的使yilia的主题，所以只要修改yilia的配置文件就可以，别的主题大同小异。<br>打开<code>/themes/yilia</code>主题目录下的<code>config.yml</code>文件。我们需要在<code>config.yml</code>文件 中开启 Mathjax, 找到 mathjax 字段并将值从默认的<code>false</code>改为<code>true</code><h2 id="额外注意事项"><a href="#额外注意事项" class="headerlink" title="额外注意事项"></a>额外注意事项</h2>在写文章的时候要在顶部的说明中开启mathjax，即在文章顶部应该是这样的：<pre><code class="lang-bash">title: *date: *tags: *mathjax: true`</code></pre>最终我们就可以在自己的文章中使用数学公式了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Windows环境下Vim编辑器中文乱码问题</title>
      <link href="/2020/03/20/%E5%9C%A8Windows%E7%8E%AF%E5%A2%83%E4%B8%8BVim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/03/20/%E5%9C%A8Windows%E7%8E%AF%E5%A2%83%E4%B8%8BVim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>如题，在Windows环境中使用vim编辑会导致中文变为乱码，以下为解决方案：</p><p>更改Vim安装目录下的’_vimrc’文件为：<br><span id="more"></span><br><em>以下的更改实质上就是改变了vim的runtimeconfig使得能在终端中输入中文字符，不会变为乱码</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nocompatible</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$VIMRUNTIME</span>/vimrc_example.vim</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$VIMRUNTIME</span>/mswin.vim</span><br><span class="line">behave mswin</span><br><span class="line"> </span><br><span class="line"><span class="built_in">set</span> diffexpr=MyDiff()</span><br><span class="line"><span class="keyword">function</span> MyDiff()</span><br><span class="line">  <span class="built_in">let</span> opt = <span class="string">&#x27;-a --binary &#x27;</span></span><br><span class="line">  <span class="keyword">if</span> &amp;diffopt =~ <span class="string">&#x27;icase&#x27;</span> | <span class="built_in">let</span> opt = opt . <span class="string">&#x27;-i &#x27;</span> | endif</span><br><span class="line">  <span class="keyword">if</span> &amp;diffopt =~ <span class="string">&#x27;iwhite&#x27;</span> | <span class="built_in">let</span> opt = opt . <span class="string">&#x27;-b &#x27;</span> | endif</span><br><span class="line">  <span class="built_in">let</span> arg1 = v:fname_in</span><br><span class="line">  <span class="keyword">if</span> arg1 =~ <span class="string">&#x27; &#x27;</span> | <span class="built_in">let</span> arg1 = <span class="string">&#x27;&quot;&#x27;</span> . arg1 . <span class="string">&#x27;&quot;&#x27;</span> | endif</span><br><span class="line">  <span class="built_in">let</span> arg2 = v:fname_new</span><br><span class="line">  <span class="keyword">if</span> arg2 =~ <span class="string">&#x27; &#x27;</span> | <span class="built_in">let</span> arg2 = <span class="string">&#x27;&quot;&#x27;</span> . arg2 . <span class="string">&#x27;&quot;&#x27;</span> | endif</span><br><span class="line">  <span class="built_in">let</span> arg3 = v:fname_out</span><br><span class="line">  <span class="keyword">if</span> arg3 =~ <span class="string">&#x27; &#x27;</span> | <span class="built_in">let</span> arg3 = <span class="string">&#x27;&quot;&#x27;</span> . arg3 . <span class="string">&#x27;&quot;&#x27;</span> | endif</span><br><span class="line">  <span class="built_in">let</span> eq = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> <span class="variable">$VIMRUNTIME</span> =~ <span class="string">&#x27; &#x27;</span></span><br><span class="line">    <span class="keyword">if</span> &amp;sh =~ <span class="string">&#x27;\&lt;cmd&#x27;</span></span><br><span class="line">      <span class="built_in">let</span> cmd = <span class="string">&#x27;&quot;&quot;&#x27;</span> . <span class="variable">$VIMRUNTIME</span> . <span class="string">&#x27;\diff&quot;&#x27;</span></span><br><span class="line">      <span class="built_in">let</span> eq = <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">let</span> cmd = substitute(<span class="variable">$VIMRUNTIME</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&quot; &#x27;</span>, <span class="string">&#x27;&#x27;</span>) . <span class="string">&#x27;\diff&quot;&#x27;</span></span><br><span class="line">    endif</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">let</span> cmd = <span class="variable">$VIMRUNTIME</span> . <span class="string">&#x27;\diff&#x27;</span></span><br><span class="line">  endif</span><br><span class="line">  silent execute <span class="string">&#x27;!&#x27;</span> . cmd . <span class="string">&#x27; &#x27;</span> . opt . arg1 . <span class="string">&#x27; &#x27;</span> . arg2 . <span class="string">&#x27; &gt; &#x27;</span> . arg3 . eq</span><br><span class="line">endfunction</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>解决windows下的中文乱码问题</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">set encoding=utf-8</span></span><br><span class="line"><span class="string">&quot;</span><span class="built_in">set</span> termencoding=utf-8</span><br><span class="line"><span class="built_in">set</span> fileencodings=ucs-bom,utf-8,chinese,latin-1</span><br><span class="line"><span class="keyword">if</span> has(<span class="string">&quot;win32&quot;</span>)</span><br><span class="line"><span class="built_in">set</span> fileencoding=chinese</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">set</span> fileencoding=utf-8</span><br><span class="line">endif</span><br><span class="line"><span class="string">&quot;解决中文菜单乱码</span></span><br><span class="line"><span class="string">set langmenu=zh_CN.utf-8</span></span><br><span class="line"><span class="string">source <span class="variable">$VIMRUNTIME</span>/delmenu.vim</span></span><br><span class="line"><span class="string">source <span class="variable">$VIMRUNTIME</span>/menu.vim</span></span><br><span class="line"><span class="string">&quot;</span>解决console输出乱码</span><br><span class="line">language messages zh_cn.utf-8</span><br></pre></td></tr></table></figure><br>这样即可解决所有问题</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
